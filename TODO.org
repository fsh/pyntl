
* TODO multithreading: AvailableThreads(), SetNumThreads()
* TODO documentation
* STRT improve matrix wrappers
* DONE init poly/vec/mat from lists
* DONE poly/vec/mat slice indexing
* DONE generic power for ZZX
* TODO better template system (just leverage gcc -E?)
* TODO any_to_pythonstring -> PyString_from_any
* TODO options for formatted output
* DONE ZZ_from_PyLong
* KILL CANCELLED REPTYPE_from_PyObject? Fix the ugly mess that is type conversions.
* DONE assert that modulus is the same for modtypes
* TODO indexing/slicing of integers to access bits
* DONE prime generation/testing
* DONE irreducible polynomial testing
* TODO irreducible polynomial generation
* STRT LLL for ZZ matrices
More options? Also expose BKZ.
* TODO smooth number test?
* TODO multiplicative group utility stuff (order, bsg, pohlig-hellman, etc.)
* TODO limit python ints in combination with NTL types to C longs?
* TODO more informative exceptions (type conversions etc)
* TODO actual tests?
* TODO better todo list

* FIXMES
  #+begin_example  
>>> PyZZ_pX(rings[0], [0,1]) == PyZZ_pX(rings[1], [0,1])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "ntl/ntl_ZZ_pX.pyx", line 173, in ntl.ntl_ZZ_pX.PyZZ_pX.__eq__
    cdef PyZZ_pX arg = self._convert_arg(_arg)
  File "ntl/ntl_ZZ_pX.pyx", line 403, in ntl.ntl_ZZ_pX.PyZZ_pX._convert_arg
    raise TypeError("base ring modulus does not match")
TypeError: base ring modulus does not match
  #+end_example

  

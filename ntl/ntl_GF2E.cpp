/* Generated by Cython 3.0a6 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [
            "ntl/ccore.h",
            "ntl/ccore_templ.h",
            "ntl/ntl_wrap.h",
            "venv/lib/python3.8/site-packages/cysignals/macros.h",
            "venv/lib/python3.8/site-packages/cysignals/struct_signals.h"
        ],
        "extra_link_args": [],
        "include_dirs": [
            "./ntl",
            "ntl",
            "venv/lib/python3.8/site-packages/cysignals",
            "."
        ],
        "language": "c++",
        "libraries": [
            "ntl"
        ],
        "name": "ntl.ntl_GF2E",
        "sources": [
            "ntl/ntl_GF2E.pyx"
        ]
    },
    "module_name": "ntl.ntl_GF2E"
}
END: Cython Metadata */

#define PY_SSIZE_T_CLEAN
#if defined(CYTHON_LIMITED_API) && 0
  #ifndef Py_LIMITED_API
    #if CYTHON_LIMITED_API+0 > 0x03030000
      #define Py_LIMITED_API CYTHON_LIMITED_API
    #else
      #define Py_LIMITED_API 0x03030000
    #endif
  #endif
#endif

#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02070000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.7+ or Python 3.3+.
#else
#define CYTHON_ABI "3_0a6"
#define __PYX_ABI_MODULE_NAME "_cython_" CYTHON_ABI
#define __PYX_TYPE_MODULE_PREFIX __PYX_ABI_MODULE_NAME "."
#define CYTHON_HEX_VERSION 0x030000A6
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #define HAVE_LONG_LONG
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS (PY_MAJOR_VERSION >= 3)
  #endif
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP487_INIT_SUBCLASS
  #define CYTHON_PEP487_INIT_SUBCLASS 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(CYTHON_LIMITED_API)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 1
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #ifndef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #ifndef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_GIL
    #define CYTHON_FAST_GIL (PY_MAJOR_VERSION < 3 || PY_VERSION_HEX >= 0x03060000)
  #endif
  #ifndef CYTHON_METH_FASTCALL
    #define CYTHON_METH_FASTCALL (PY_VERSION_HEX >= 0x030700A1)
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #ifndef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if !defined(CYTHON_VECTORCALL)
#define CYTHON_VECTORCALL  (CYTHON_FAST_PYCCALL && PY_VERSION_HEX >= 0x030800B1)
#endif
#define CYTHON_BACKPORT_VECTORCALL (CYTHON_METH_FASTCALL && PY_VERSION_HEX < 0x030800B1)
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
            typedef unsigned char     uint8_t;
            typedef unsigned short    uint16_t;
            typedef unsigned int      uint32_t;
        #else
            typedef unsigned __int8   uint8_t;
            typedef unsigned __int16  uint16_t;
            typedef unsigned __int32  uint32_t;
        #endif
    #endif
    #if _MSC_VER < 1300
        #ifdef _WIN64
            typedef unsigned long long  __pyx_uintptr_t;
        #else
            typedef unsigned int        __pyx_uintptr_t;
        #endif
    #else
        #ifdef _WIN64
            typedef unsigned __int64    __pyx_uintptr_t;
        #else
            typedef unsigned __int32    __pyx_uintptr_t;
        #endif
    #endif
#else
    #include <stdint.h>
    typedef uintptr_t  __pyx_uintptr_t;
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_DefaultClassType PyClass_Type
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_DefaultClassType PyType_Type
#if PY_VERSION_HEX >= 0x030800B2
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_NewWithPosOnlyArgs(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#elif PY_VERSION_HEX >= 0x030800A4
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
#endif
#if PY_VERSION_HEX >= 0x030900A4 || defined(Py_IS_TYPE)
  #define __Pyx_IS_TYPE(ob, type) Py_IS_TYPE(ob, type)
#else
  #define __Pyx_IS_TYPE(ob, type) (((const PyObject*)ob)->ob_type == (type))
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_METH_FASTCALL
  #define __Pyx_METH_FASTCALL METH_FASTCALL
  #define __Pyx_PyCFunction_FastCall __Pyx_PyCFunctionFast
  #define __Pyx_PyCFunction_FastCallWithKeywords __Pyx_PyCFunctionFastWithKeywords
#else
  #define __Pyx_METH_FASTCALL METH_VARARGS
  #define __Pyx_PyCFunction_FastCall PyCFunction
  #define __Pyx_PyCFunction_FastCallWithKeywords PyCFunctionWithKeywords
#endif
#if CYTHON_VECTORCALL
  #define __pyx_vectorcallfunc vectorcallfunc
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  PY_VECTORCALL_ARGUMENTS_OFFSET
  #define __Pyx_PyVectorcall_NARGS(n)  PyVectorcall_NARGS(n)
#elif CYTHON_BACKPORT_VECTORCALL
  typedef PyObject *(*__pyx_vectorcallfunc)(PyObject *callable, PyObject *const *args,
                                            size_t nargsf, PyObject *kwnames);
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  ((size_t)1 << (8 * sizeof(size_t) - 1))
  #define __Pyx_PyVectorcall_NARGS(n)  ((n) & ~__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET)
#else
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  0
  #define __Pyx_PyVectorcall_NARGS(n)  (n)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#elif CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyThreadState_Current PyThreadState_Get()
#elif !CYTHON_FAST_THREAD_STATE
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
static inline void *__Pyx_PyModule_GetState(PyObject *op)
{
    void *result;
    result = PyModule_GetState(op);
    if (!result)
        Py_FatalError("Couldn't find the module state");
    return result;
}
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX > 0x030600B4 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStrWithError(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
static CYTHON_INLINE PyObject * __Pyx_PyDict_GetItemStr(PyObject *dict, PyObject *name) {
    PyObject *res = __Pyx_PyDict_GetItemStrWithError(dict, name);
    if (res == NULL) PyErr_Clear();
    return res;
}
#elif PY_MAJOR_VERSION >= 3 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07020000)
#define __Pyx_PyDict_GetItemStrWithError  PyDict_GetItemWithError
#define __Pyx_PyDict_GetItemStr           PyDict_GetItem
#else
static CYTHON_INLINE PyObject * __Pyx_PyDict_GetItemStrWithError(PyObject *dict, PyObject *name) {
#if CYTHON_COMPILING_IN_PYPY
    return PyDict_GetItem(dict, name);
#else
    PyDictEntry *ep;
    PyDictObject *mp = (PyDictObject*) dict;
    long hash = ((PyStringObject *) name)->ob_shash;
    assert(hash != -1);
    ep = (mp->ma_lookup)(mp, name, hash);
    if (ep == NULL) {
        return NULL;
    }
    return ep->me_value;
#endif
}
#define __Pyx_PyDict_GetItemStr           PyDict_GetItem
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyType_GetFlags(tp)   (PyType_GetFlags((PyTypeObject *)tp))
#else
  #define __Pyx_PyType_GetFlags(tp)   (((PyTypeObject *)tp)->tp_flags)
#endif
#if CYTHON_USE_TYPE_SLOTS
  #define __Pyx_PyType_HasFeature(type, feature)  ((__Pyx_PyType_GetFlags(type) & (feature)) != 0)
  #define __Pyx_PyObject_GetIterNextFunc(obj)  (Py_TYPE(obj)->tp_iternext)
#else
  #define __Pyx_PyType_HasFeature(type, feature)  PyType_HasFeature(type, feature)
  #define __Pyx_PyObject_GetIterNextFunc(obj)  PyIter_Next
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GetLength(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_ReadChar(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((void)u, 1114111)
  #define __Pyx_PyUnicode_KIND(u)         ((void)u, (0))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)u)
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)k, PyUnicode_ReadChar((PyObject*)(d), i))
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GetLength(u))
#elif PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #if defined(PyUnicode_IS_READY) && defined(PyUnicode_GET_SIZE)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#if CYTHON_COMPILING_IN_CPYTHON
  #define __Pyx_PySequence_ListKeepNew(obj)\
    (likely(PyList_CheckExact(obj) && Py_REFCNT(obj) == 1) ? __Pyx_NewRef(obj) : PySequence_List(obj))
#else
  #define __Pyx_PySequence_ListKeepNew(obj)  PySequence_List(obj)
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        __Pyx_IS_TYPE(obj, &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsHash_t
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsSsize_t
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__ntl__ntl_GF2E
#define __PYX_HAVE_API__ntl__ntl_GF2E
/* Early includes */
#include "ntl_wrap.h"
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <vector>
#include <string.h>
#include <string>
#include <utility>

    #if __cplusplus > 199711L
    #include <type_traits>

    namespace cython_std {
    template <typename T> typename std::remove_reference<T>::type&& move(T& t) noexcept { return std::move(t); }
    template <typename T> typename std::remove_reference<T>::type&& move(T&& t) noexcept { return std::move(t); }
    }

    #endif
    
#include <algorithm>
#include <stdio.h>
#include "struct_signals.h"
#include "ccore.h"
#include "ccore_templ.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const wchar_t *u)
{
    const wchar_t *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject*);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

#if !CYTHON_COMPILING_IN_LIMITED_API
static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
#endif
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm = __FILE__;
static const char *__pyx_filename;

/* #### Code section: filename_table ### */

static const char *__pyx_f[] = {
  "ntl/ntl_GF2E.pyx",
  "stringsource",
  "ntl/ntl_ZZ.pxd",
  "ntl/ntl_GF2.pxd",
  "ntl/ntl_ZZX.pxd",
  "ntl/ntl_GF2X.pxd",
  "venv/lib/python3.8/site-packages/Cython/Includes/cpython/type.pxd",
  "ntl/ntl_GF2EX.pxd",
};
/* #### Code section: utility_code_proto_before_types ### */
/* #### Code section: numeric_typedefs ### */

/* "ccore.pxd":11
 * from .ntl_ZZ cimport *
 * 
 * ctypedef unsigned char uint8_t             # <<<<<<<<<<<<<<
 * ctypedef vector[uint8_t] bytevec
 * 
 */
typedef unsigned char __pyx_t_3ntl_5ccore_uint8_t;
/* #### Code section: complex_type_declarations ### */
/* #### Code section: type_declarations ### */

/*--- Type declarations ---*/
struct __pyx_obj_3ntl_6ntl_ZZ_PyZZ;
struct __pyx_obj_3ntl_7ntl_GF2_PyGF2;
struct __pyx_obj_3ntl_7ntl_ZZX_PyZZX;
struct __pyx_obj_3ntl_7ntl_ZZX_PyZZX_Class;
struct __pyx_obj_3ntl_8ntl_GF2X_PyGF2X;
struct __pyx_obj_3ntl_8ntl_GF2X_PyGF2X_Class;
struct __pyx_obj_3ntl_9ntl_GF2EX_PyGF2EX;
struct __pyx_obj_3ntl_9ntl_GF2EX_PyGF2EX_Class;
struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E_Context;
struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E;
struct __pyx_opt_args_3ntl_6ntl_ZZ_4PyZZ_bytes;

/* "ntl_ZZ.pxd":88
 * 
 *   #IF CTYPE == "ZZ" (= "True")
 *   cpdef bytes bytes(PyZZ self, str endian=*)             # <<<<<<<<<<<<<<
 *   #ENDIF <NONE> (= "False")
 * 
 */
struct __pyx_opt_args_3ntl_6ntl_ZZ_4PyZZ_bytes {
  int __pyx_n;
  PyObject *endian;
};

/* "ccore.pxd":12
 * 
 * ctypedef unsigned char uint8_t
 * ctypedef vector[uint8_t] bytevec             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "ccore.h":
 */
typedef std::vector<__pyx_t_3ntl_5ccore_uint8_t>  __pyx_t_3ntl_5ccore_bytevec;

/* "ntl_ZZ.pxd":70
 * 
 * 
 * cdef class PyZZ(object):             # <<<<<<<<<<<<<<
 *   cdef ZZ_c val
 *   #IF BASETYPE (= "False")
 */
struct __pyx_obj_3ntl_6ntl_ZZ_PyZZ {
  PyObject_HEAD
  struct __pyx_vtabstruct_3ntl_6ntl_ZZ_PyZZ *__pyx_vtab;
  ZZ val;
};


/* "ntl_GF2.pxd":62
 * 
 * 
 * cdef class PyGF2(object):             # <<<<<<<<<<<<<<
 *   cdef GF2_c val
 *   #IF BASETYPE (= "False")
 */
struct __pyx_obj_3ntl_7ntl_GF2_PyGF2 {
  PyObject_HEAD
  struct __pyx_vtabstruct_3ntl_7ntl_GF2_PyGF2 *__pyx_vtab;
  GF2 val;
};


/* "ntl_ZZX.pxd":84
 * 
 * 
 * cdef class PyZZX(object):             # <<<<<<<<<<<<<<
 *   cdef ZZX_c val
 *   #IF HASCONTEXT (= "False")
 */
struct __pyx_obj_3ntl_7ntl_ZZX_PyZZX {
  PyObject_HEAD
  struct __pyx_vtabstruct_3ntl_7ntl_ZZX_PyZZX *__pyx_vtab;
  ZZX val;
};


/* "ntl_ZZX.pxd":107
 * 
 * 
 * cdef class PyZZX_Class(object):             # <<<<<<<<<<<<<<
 *   #IF HASCONTEXT (= "False")
 * 
 */
struct __pyx_obj_3ntl_7ntl_ZZX_PyZZX_Class {
  PyObject_HEAD
};


/* "ntl_GF2X.pxd":90
 * 
 * 
 * cdef class PyGF2X(object):             # <<<<<<<<<<<<<<
 *   cdef GF2X_c val
 *   #IF HASCONTEXT (= "False")
 */
struct __pyx_obj_3ntl_8ntl_GF2X_PyGF2X {
  PyObject_HEAD
  struct __pyx_vtabstruct_3ntl_8ntl_GF2X_PyGF2X *__pyx_vtab;
  GF2X val;
};


/* "ntl_GF2X.pxd":113
 * 
 * 
 * cdef class PyGF2X_Class(object):             # <<<<<<<<<<<<<<
 *   #IF HASCONTEXT (= "False")
 * 
 */
struct __pyx_obj_3ntl_8ntl_GF2X_PyGF2X_Class {
  PyObject_HEAD
};


/* "ntl_GF2EX.pxd":88
 * 
 * 
 * cdef class PyGF2EX(object):             # <<<<<<<<<<<<<<
 *   cdef GF2EX_c val
 *   #IF HASCONTEXT (= "True")
 */
struct __pyx_obj_3ntl_9ntl_GF2EX_PyGF2EX {
  PyObject_HEAD
  struct __pyx_vtabstruct_3ntl_9ntl_GF2EX_PyGF2EX *__pyx_vtab;
  GF2EX val;
  struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E_Context *ctxt;
};


/* "ntl_GF2EX.pxd":111
 * 
 * 
 * cdef class PyGF2EX_Class(object):             # <<<<<<<<<<<<<<
 *   #IF HASCONTEXT (= "True")
 *   cdef PyGF2E_Context ctxt
 */
struct __pyx_obj_3ntl_9ntl_GF2EX_PyGF2EX_Class {
  PyObject_HEAD
  struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E_Context *ctxt;
};


/* "ntl/ntl_GF2E.pxd":69
 * #IF BASETYPE (= "True")
 * 
 * cdef class PyGF2E_Context(object):             # <<<<<<<<<<<<<<
 *   cdef GF2E_Context_c ctxt
 *   cdef PyGF2X _mod
 */
struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E_Context {
  PyObject_HEAD
  struct __pyx_vtabstruct_3ntl_8ntl_GF2E_PyGF2E_Context *__pyx_vtab;
  GF2EContext ctxt;
  struct __pyx_obj_3ntl_8ntl_GF2X_PyGF2X *_mod;
  PyObject *__weakref__;
};


/* "ntl/ntl_GF2E.pxd":85
 * 
 * 
 * cdef class PyGF2E(object):             # <<<<<<<<<<<<<<
 *   cdef GF2E_c val
 *   #IF BASETYPE (= "True")
 */
struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E {
  PyObject_HEAD
  struct __pyx_vtabstruct_3ntl_8ntl_GF2E_PyGF2E *__pyx_vtab;
  GF2E val;
  struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E_Context *ctxt;
};



/* "ntl_ZZ.pxd":70
 * 
 * 
 * cdef class PyZZ(object):             # <<<<<<<<<<<<<<
 *   cdef ZZ_c val
 *   #IF BASETYPE (= "False")
 */

struct __pyx_vtabstruct_3ntl_6ntl_ZZ_PyZZ {
  struct __pyx_obj_3ntl_6ntl_ZZ_PyZZ *(*_convert_arg)(struct __pyx_obj_3ntl_6ntl_ZZ_PyZZ *, PyObject *);
  struct __pyx_obj_3ntl_6ntl_ZZ_PyZZ *(*_convert_arg_zz)(PyObject *);
  int (*is_zero)(struct __pyx_obj_3ntl_6ntl_ZZ_PyZZ *, int __pyx_skip_dispatch);
  int (*is_one)(struct __pyx_obj_3ntl_6ntl_ZZ_PyZZ *, int __pyx_skip_dispatch);
  PyObject *(*bytes)(struct __pyx_obj_3ntl_6ntl_ZZ_PyZZ *, int __pyx_skip_dispatch, struct __pyx_opt_args_3ntl_6ntl_ZZ_4PyZZ_bytes *__pyx_optional_args);
  PyObject *(*mod)(struct __pyx_obj_3ntl_6ntl_ZZ_PyZZ *, PyObject *, int __pyx_skip_dispatch);
  int (*_init_lift)(struct __pyx_obj_3ntl_6ntl_ZZ_PyZZ *, PyObject *);
  int (*_init_proj)(struct __pyx_obj_3ntl_6ntl_ZZ_PyZZ *, PyObject *);
};
static struct __pyx_vtabstruct_3ntl_6ntl_ZZ_PyZZ *__pyx_vtabptr_3ntl_6ntl_ZZ_PyZZ;


/* "ntl_GF2.pxd":62
 * 
 * 
 * cdef class PyGF2(object):             # <<<<<<<<<<<<<<
 *   cdef GF2_c val
 *   #IF BASETYPE (= "False")
 */

struct __pyx_vtabstruct_3ntl_7ntl_GF2_PyGF2 {
  struct __pyx_obj_3ntl_7ntl_GF2_PyGF2 *(*_convert_arg)(struct __pyx_obj_3ntl_7ntl_GF2_PyGF2 *, PyObject *);
  int (*is_zero)(struct __pyx_obj_3ntl_7ntl_GF2_PyGF2 *, int __pyx_skip_dispatch);
  int (*is_one)(struct __pyx_obj_3ntl_7ntl_GF2_PyGF2 *, int __pyx_skip_dispatch);
  int (*_init_lift)(struct __pyx_obj_3ntl_7ntl_GF2_PyGF2 *, PyObject *);
  int (*_init_proj)(struct __pyx_obj_3ntl_7ntl_GF2_PyGF2 *, PyObject *);
};
static struct __pyx_vtabstruct_3ntl_7ntl_GF2_PyGF2 *__pyx_vtabptr_3ntl_7ntl_GF2_PyGF2;


/* "ntl_ZZX.pxd":84
 * 
 * 
 * cdef class PyZZX(object):             # <<<<<<<<<<<<<<
 *   cdef ZZX_c val
 *   #IF HASCONTEXT (= "False")
 */

struct __pyx_vtabstruct_3ntl_7ntl_ZZX_PyZZX {
  struct __pyx_obj_3ntl_7ntl_ZZX_PyZZX *(*_convert_arg)(struct __pyx_obj_3ntl_7ntl_ZZX_PyZZX *, PyObject *);
  int (*_init_from_seq)(struct __pyx_obj_3ntl_7ntl_ZZX_PyZZX *, PyObject *);
  long (*deg)(struct __pyx_obj_3ntl_7ntl_ZZX_PyZZX *, int __pyx_skip_dispatch);
  int (*is_zero)(struct __pyx_obj_3ntl_7ntl_ZZX_PyZZX *, int __pyx_skip_dispatch);
  int (*is_one)(struct __pyx_obj_3ntl_7ntl_ZZX_PyZZX *, int __pyx_skip_dispatch);
  PyObject *(*mod)(struct __pyx_obj_3ntl_7ntl_ZZX_PyZZX *, PyObject *, int __pyx_skip_dispatch);
  int (*_init_from_integer)(struct __pyx_obj_3ntl_7ntl_ZZX_PyZZX *, PyObject *);
  int (*_init_lift)(struct __pyx_obj_3ntl_7ntl_ZZX_PyZZX *, PyObject *);
  int (*_init_proj)(struct __pyx_obj_3ntl_7ntl_ZZX_PyZZX *, PyObject *);
};
static struct __pyx_vtabstruct_3ntl_7ntl_ZZX_PyZZX *__pyx_vtabptr_3ntl_7ntl_ZZX_PyZZX;


/* "ntl_GF2X.pxd":90
 * 
 * 
 * cdef class PyGF2X(object):             # <<<<<<<<<<<<<<
 *   cdef GF2X_c val
 *   #IF HASCONTEXT (= "False")
 */

struct __pyx_vtabstruct_3ntl_8ntl_GF2X_PyGF2X {
  struct __pyx_obj_3ntl_8ntl_GF2X_PyGF2X *(*_convert_arg)(struct __pyx_obj_3ntl_8ntl_GF2X_PyGF2X *, PyObject *);
  int (*_init_from_seq)(struct __pyx_obj_3ntl_8ntl_GF2X_PyGF2X *, PyObject *);
  long (*deg)(struct __pyx_obj_3ntl_8ntl_GF2X_PyGF2X *, int __pyx_skip_dispatch);
  int (*is_zero)(struct __pyx_obj_3ntl_8ntl_GF2X_PyGF2X *, int __pyx_skip_dispatch);
  int (*is_one)(struct __pyx_obj_3ntl_8ntl_GF2X_PyGF2X *, int __pyx_skip_dispatch);
  PyObject *(*mod)(struct __pyx_obj_3ntl_8ntl_GF2X_PyGF2X *, PyObject *, int __pyx_skip_dispatch);
  int (*_init_from_integer)(struct __pyx_obj_3ntl_8ntl_GF2X_PyGF2X *, PyObject *);
  int (*_init_lift)(struct __pyx_obj_3ntl_8ntl_GF2X_PyGF2X *, PyObject *);
  int (*_init_proj)(struct __pyx_obj_3ntl_8ntl_GF2X_PyGF2X *, PyObject *);
};
static struct __pyx_vtabstruct_3ntl_8ntl_GF2X_PyGF2X *__pyx_vtabptr_3ntl_8ntl_GF2X_PyGF2X;


/* "ntl_GF2EX.pxd":88
 * 
 * 
 * cdef class PyGF2EX(object):             # <<<<<<<<<<<<<<
 *   cdef GF2EX_c val
 *   #IF HASCONTEXT (= "True")
 */

struct __pyx_vtabstruct_3ntl_9ntl_GF2EX_PyGF2EX {
  struct __pyx_obj_3ntl_9ntl_GF2EX_PyGF2EX *(*_convert_arg)(struct __pyx_obj_3ntl_9ntl_GF2EX_PyGF2EX *, PyObject *);
  int (*_init_from_seq)(struct __pyx_obj_3ntl_9ntl_GF2EX_PyGF2EX *, PyObject *);
  long (*deg)(struct __pyx_obj_3ntl_9ntl_GF2EX_PyGF2EX *, int __pyx_skip_dispatch);
  int (*is_zero)(struct __pyx_obj_3ntl_9ntl_GF2EX_PyGF2EX *, int __pyx_skip_dispatch);
  int (*is_one)(struct __pyx_obj_3ntl_9ntl_GF2EX_PyGF2EX *, int __pyx_skip_dispatch);
  int (*_init_from_integer)(struct __pyx_obj_3ntl_9ntl_GF2EX_PyGF2EX *, PyObject *);
  int (*_init_lift)(struct __pyx_obj_3ntl_9ntl_GF2EX_PyGF2EX *, PyObject *);
  int (*_init_proj)(struct __pyx_obj_3ntl_9ntl_GF2EX_PyGF2EX *, PyObject *);
};
static struct __pyx_vtabstruct_3ntl_9ntl_GF2EX_PyGF2EX *__pyx_vtabptr_3ntl_9ntl_GF2EX_PyGF2EX;


/* "ntl/ntl_GF2E.pyx":23
 * #IF BASETYPE (= "True")
 * 
 * cdef class PyGF2E_Context():             # <<<<<<<<<<<<<<
 * 
 *   cdef void restore(self):
 */

struct __pyx_vtabstruct_3ntl_8ntl_GF2E_PyGF2E_Context {
  void (*restore)(struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E_Context *);
  struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E_Context *(*_get)(struct __pyx_obj_3ntl_8ntl_GF2X_PyGF2X *);
  struct __pyx_obj_3ntl_8ntl_GF2X_PyGF2X *(*modulus)(struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E_Context *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_3ntl_8ntl_GF2E_PyGF2E_Context *__pyx_vtabptr_3ntl_8ntl_GF2E_PyGF2E_Context;


/* "ntl/ntl_GF2E.pyx":83
 * 
 * 
 * cdef class PyGF2E(object):             # <<<<<<<<<<<<<<
 * 
 *   __slots__ = ()
 */

struct __pyx_vtabstruct_3ntl_8ntl_GF2E_PyGF2E {
  struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *(*_convert_arg)(struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *, PyObject *);
  int (*is_zero)(struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *, int __pyx_skip_dispatch);
  int (*is_one)(struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *, int __pyx_skip_dispatch);
  struct __pyx_obj_3ntl_8ntl_GF2X_PyGF2X *(*lift)(struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *, int __pyx_skip_dispatch);
  struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E_Context *(*parent)(struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *, int __pyx_skip_dispatch);
  int (*_init_lift)(struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *, PyObject *);
  int (*_init_proj)(struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *, PyObject *);
};
static struct __pyx_vtabstruct_3ntl_8ntl_GF2E_PyGF2E *__pyx_vtabptr_3ntl_8ntl_GF2E_PyGF2E;
/* #### Code section: utility_code_proto ### */

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, Py_ssize_t);
    void (*DECREF)(void*, PyObject*, Py_ssize_t);
    void (*GOTREF)(void*, PyObject*, Py_ssize_t);
    void (*GIVEREF)(void*, PyObject*, Py_ssize_t);
    void* (*SetupContext)(const char*, Py_ssize_t, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
  #define __Pyx_RefNannyFinishContextNogil() {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __Pyx_RefNannyFinishContext();\
              PyGILState_Release(__pyx_gilstate_save);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
  #define __Pyx_RefNannyFinishContextNogil() __Pyx_RefNannyFinishContext()
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContextNogil()
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_Py_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; Py_XDECREF(tmp);\
    } while (0)
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* PySequenceContains.proto */
static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#if !CYTHON_VECTORCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectFastCall.proto */
#define __Pyx_PyObject_FastCall(func, args, nargs)  __Pyx_PyObject_FastCallDict(func, args, nargs, NULL)
static CYTHON_INLINE PyObject* __Pyx_PyObject_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* ObjectGetItem.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject *key);
#else
#define __Pyx_PyObject_GetItem(obj, key)  PyObject_GetItem(obj, key)
#endif

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
#define __Pyx_GetModuleGlobalNameUncached(var, name)  {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* TupleAndListFromArray.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyList_FromArray(PyObject *const *src, Py_ssize_t n);
static CYTHON_INLINE PyObject* __Pyx_PyTuple_FromArray(PyObject *const *src, Py_ssize_t n);
#endif

/* IncludeStringH.proto */
#include <string.h>

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* fastcall.proto */
#define __Pyx_Arg_VARARGS(args, i) PyTuple_GET_ITEM(args, i)
#define __Pyx_NumKwargs_VARARGS(kwds) PyDict_Size(kwds)
#define __Pyx_KwValues_VARARGS(args, nargs) NULL
#define __Pyx_GetKwValue_VARARGS(kw, kwvalues, s) __Pyx_PyDict_GetItemStrWithError(kw, s)
#define __Pyx_KwargsAsDict_VARARGS(kw, kwvalues) PyDict_Copy(kw)
#if CYTHON_METH_FASTCALL
    #define __Pyx_Arg_FASTCALL(args, i) args[i]
    #define __Pyx_NumKwargs_FASTCALL(kwds) PyTuple_GET_SIZE(kwds)
    #define __Pyx_KwValues_FASTCALL(args, nargs) (&args[nargs])
    static CYTHON_INLINE PyObject * __Pyx_GetKwValue_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues, PyObject *s);
    #define __Pyx_KwargsAsDict_FASTCALL(kw, kwvalues) _PyStack_AsDict(kwvalues, kw)
#else
    #define __Pyx_Arg_FASTCALL __Pyx_Arg_VARARGS
    #define __Pyx_NumKwargs_FASTCALL __Pyx_NumKwargs_VARARGS
    #define __Pyx_KwValues_FASTCALL __Pyx_KwValues_VARARGS
    #define __Pyx_GetKwValue_FASTCALL __Pyx_GetKwValue_VARARGS
    #define __Pyx_KwargsAsDict_FASTCALL __Pyx_KwargsAsDict_VARARGS
#endif
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_ArgsSlice_VARARGS(args, start, stop) __Pyx_PyTuple_FromArray(&__Pyx_Arg_VARARGS(args, start), stop - start)
#define __Pyx_ArgsSlice_FASTCALL(args, start, stop) __Pyx_PyTuple_FromArray(&__Pyx_Arg_FASTCALL(args, start), stop - start)
#else
#define __Pyx_ArgsSlice_VARARGS(args, start, stop) PyTuple_GetSlice(args, start, stop)
#define __Pyx_ArgsSlice_FASTCALL(args, start, stop) PyTuple_GetSlice(args, start, stop)
#endif

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject *const *kwvalues,
    PyObject **argnames[],
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,
    const char* function_name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely(__Pyx_IS_TYPE(obj, type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* KeywordStringCheck.proto */
static int __Pyx_CheckKeywordStrings(PyObject *kw, const char* function_name, int kw_allowed);

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* tp_new.proto */
#define __Pyx_tp_new(type_obj, args) __Pyx_tp_new_kwargs(type_obj, args, NULL)
static CYTHON_INLINE PyObject* __Pyx_tp_new_kwargs(PyObject* type_obj, PyObject* args, PyObject* kwargs) {
    return (PyObject*) (((PyTypeObject*)type_obj)->tp_new((PyTypeObject*)type_obj, args, kwargs));
}

/* PyObjectSetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o, n, NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value);
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

/* MoveIfSupported.proto */
#if __cplusplus >= 201103L
  #include <utility>
  #define __PYX_STD_MOVE_IF_SUPPORTED(x) std::move(x)
#else
  #define __PYX_STD_MOVE_IF_SUPPORTED(x) x
#endif

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* SetVTable.proto */
static int __Pyx_SetVtable(PyObject *dict, void *vtable);

/* SetupReduce.proto */
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_setup_reduce(PyObject* type_obj);
#endif

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto
#define __PYX_HAVE_RT_ImportType_proto
enum __Pyx_ImportType_CheckSize {
   __Pyx_ImportType_CheckSize_Error = 0,
   __Pyx_ImportType_CheckSize_Warn = 1,
   __Pyx_ImportType_CheckSize_Ignore = 2
};
static PyTypeObject *__Pyx_ImportType(PyObject* module, const char *module_name, const char *class_name, size_t size, enum __Pyx_ImportType_CheckSize check_size);
#endif

/* GetVTable.proto */
static void* __Pyx_GetVtable(PyTypeObject *type);

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportDottedModule.proto */
static PyObject *__Pyx_ImportDottedModule(PyObject *name, PyObject *parts_tuple);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* FetchCommonType.proto */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);
#if CYTHON_COMPILING_IN_LIMITED_API
static PyTypeObject* __Pyx_FetchCommonTypeFromSpec(PyType_Spec *spec, PyObject *bases);
#endif

/* PyMethodNew.proto */
#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, CYTHON_UNUSED PyObject *typ) {
    if (!self)
        return __Pyx_NewRef(func);
    return PyMethod_New(func, self);
}
#else
    #define __Pyx_PyMethod_New PyMethod_New
#endif

/* PyVectorcallFastCallDict.proto */
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE PyObject *__Pyx_PyVectorcall_FastCallDict(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, Py_ssize_t nargs, PyObject *kw);
#endif

/* CythonFunctionShared.proto */
#define __Pyx_CyFunction_USED
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#define __Pyx_CyFunction_GetClassObj(f)\
    (((__pyx_CyFunctionObject *) (f))->func_classobj)
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
    PyCFunctionObject func;
#if CYTHON_BACKPORT_VECTORCALL
    __pyx_vectorcallfunc func_vectorcall;
#endif
#if PY_VERSION_HEX < 0x030500A0
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
    PyObject *func_classobj;
    void *defaults;
    int defaults_pyobjects;
    size_t defaults_size;  // used by FusedFunction for copying defaults
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
} __pyx_CyFunctionObject;
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyTypeObject *__pyx_CyFunctionType = 0;
#endif
#define __Pyx_CyFunction_Check(obj)  __Pyx_TypeCheck(obj, __pyx_CyFunctionType)
#define __Pyx_IsCyOrPyCFunction(obj)  __Pyx_TypeCheck2(obj, __pyx_CyFunctionType, &PyCFunction_Type)
#define __Pyx_CyFunction_CheckExact(obj)  __Pyx_IS_TYPE(obj, __pyx_CyFunctionType)
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject* op, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(void);
#if CYTHON_METH_FASTCALL
static PyObject * __Pyx_CyFunction_Vectorcall_NOARGS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_O(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
#if CYTHON_BACKPORT_VECTORCALL
#define __Pyx_CyFunction_func_vectorcall(f) (((__pyx_CyFunctionObject*)f)->func_vectorcall)
#else
#define __Pyx_CyFunction_func_vectorcall(f) (((__pyx_CyFunctionObject*)f)->func.vectorcall)
#endif
#endif

/* CythonFunction.proto */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);

/* GetNameInClass.proto */
#define __Pyx_GetNameInClass(var, nmspace, name)  (var) = __Pyx__GetNameInClass(nmspace, name)
static PyObject *__Pyx__GetNameInClass(PyObject *nmspace, PyObject *name);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
#if !CYTHON_COMPILING_IN_LIMITED_API
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);
#endif

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* None.proto */
#include <new>

/* FormatTypeName.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
typedef PyObject *__Pyx_TypeName;
#define __Pyx_FMT_TYPENAME "%U"
static __Pyx_TypeName __Pyx_PyType_GetName(PyTypeObject* tp);
#define __Pyx_DECREF_TypeName(obj) Py_XDECREF(obj)
#else
typedef const char *__Pyx_TypeName;
#define __Pyx_FMT_TYPENAME "%.200s"
#define __Pyx_PyType_GetName(tp) ((tp)->tp_name)
#define __Pyx_DECREF_TypeName(obj)
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
#define __Pyx_TypeCheck2(obj, type1, type2) __Pyx_IsAnySubtype2(Py_TYPE(obj), (PyTypeObject *)type1, (PyTypeObject *)type2)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_IsAnySubtype2(PyTypeObject *cls, PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_TypeCheck2(obj, type1, type2) (PyObject_TypeCheck(obj, (PyTypeObject *)type1) || PyObject_TypeCheck(obj, (PyTypeObject *)type2))
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyErr_ExceptionMatches2(err1, err2)  __Pyx_PyErr_GivenExceptionMatches2(__Pyx_PyErr_Occurred(), err1, err2)
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* FunctionExport.proto */
static int __Pyx_ExportFunction(const char *name, void (*f)(void), const char *sig);

/* VoidPtrImport.proto */
static int __Pyx_ImportVoidPtr(PyObject *module, const char *name, void **p, const char *sig);

/* FunctionImport.proto */
static int __Pyx_ImportFunction(PyObject *module, const char *funcname, void (**f)(void), const char *sig);

/* InitStrings.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_InitString(__Pyx_StringTabEntry t, PyObject **str);
#else
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);
#endif

/* #### Code section: module_declarations ### */
static void __pyx_f_3ntl_8ntl_GF2E_14PyGF2E_Context_restore(struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E_Context *__pyx_v_self); /* proto*/
static struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E_Context *__pyx_f_3ntl_8ntl_GF2E_14PyGF2E_Context__get(struct __pyx_obj_3ntl_8ntl_GF2X_PyGF2X *__pyx_v_m); /* proto*/
static struct __pyx_obj_3ntl_8ntl_GF2X_PyGF2X *__pyx_f_3ntl_8ntl_GF2E_14PyGF2E_Context_modulus(struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E_Context *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static int __pyx_f_3ntl_8ntl_GF2E_6PyGF2E_is_zero(struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static int __pyx_f_3ntl_8ntl_GF2E_6PyGF2E_is_one(struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static struct __pyx_obj_3ntl_8ntl_GF2X_PyGF2X *__pyx_f_3ntl_8ntl_GF2E_6PyGF2E_lift(struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E_Context *__pyx_f_3ntl_8ntl_GF2E_6PyGF2E_parent(struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static int __pyx_f_3ntl_8ntl_GF2E_6PyGF2E__init_lift(CYTHON_UNUSED struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_arg); /* proto*/
static int __pyx_f_3ntl_8ntl_GF2E_6PyGF2E__init_proj(struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *__pyx_v_self, PyObject *__pyx_v_arg); /* proto*/
static struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *__pyx_f_3ntl_8ntl_GF2E_6PyGF2E__convert_arg(struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *__pyx_v_self, PyObject *__pyx_v_arg); /* proto*/

/* Module declarations from "ntl.ntl_common" */
#if !CYTHON_COMPILING_IN_LIMITED_API
#endif

/* Module declarations from "ntl.ntl_ZZ" */
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyTypeObject *__pyx_ptype_3ntl_6ntl_ZZ_PyZZ = 0;
#endif

/* Module declarations from "ntl.ntl_GF2" */
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyTypeObject *__pyx_ptype_3ntl_7ntl_GF2_PyGF2 = 0;
#endif

/* Module declarations from "ntl.ntl_ZZX" */
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyTypeObject *__pyx_ptype_3ntl_7ntl_ZZX_PyZZX = 0;
static PyTypeObject *__pyx_ptype_3ntl_7ntl_ZZX_PyZZX_Class = 0;
#endif

/* Module declarations from "ntl.ntl_GF2X" */
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyTypeObject *__pyx_ptype_3ntl_8ntl_GF2X_PyGF2X = 0;
static PyTypeObject *__pyx_ptype_3ntl_8ntl_GF2X_PyGF2X_Class = 0;
#endif

/* Module declarations from "libcpp.vector" */
#if !CYTHON_COMPILING_IN_LIMITED_API
#endif

/* Module declarations from "libc.string" */
#if !CYTHON_COMPILING_IN_LIMITED_API
#endif

/* Module declarations from "libcpp.string" */
#if !CYTHON_COMPILING_IN_LIMITED_API
#endif

/* Module declarations from "libcpp" */
#if !CYTHON_COMPILING_IN_LIMITED_API
#endif

/* Module declarations from "libcpp.utility" */
#if !CYTHON_COMPILING_IN_LIMITED_API
#endif

/* Module declarations from "libcpp.algorithm" */
#if !CYTHON_COMPILING_IN_LIMITED_API
#endif

/* Module declarations from "libcpp.pair" */
#if !CYTHON_COMPILING_IN_LIMITED_API
#endif

/* Module declarations from "libc.stdio" */
#if !CYTHON_COMPILING_IN_LIMITED_API
#endif

/* Module declarations from "__builtin__" */
#if !CYTHON_COMPILING_IN_LIMITED_API
#endif

/* Module declarations from "cpython.type" */
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;
#endif

/* Module declarations from "cpython" */
#if !CYTHON_COMPILING_IN_LIMITED_API
#endif

/* Module declarations from "cpython.object" */
#if !CYTHON_COMPILING_IN_LIMITED_API
#endif

/* Module declarations from "cysignals.signals" */
#if !CYTHON_COMPILING_IN_LIMITED_API
#endif
static cysigs_t *__pyx_vp_9cysignals_7signals_cysigs = 0;
#define cysigs (*__pyx_vp_9cysignals_7signals_cysigs)
static void (*__pyx_f_9cysignals_7signals_verify_exc_value)(void); /*proto*/
static void (*_sig_on_interrupt_received)(void); /*proto*/
static void (*_sig_on_recover)(void); /*proto*/
static void (*_sig_off_warning)(char const *, int); /*proto*/
static void (*print_backtrace)(void); /*proto*/

/* Module declarations from "ntl.ccore" */
#if !CYTHON_COMPILING_IN_LIMITED_API
#endif

/* Module declarations from "ntl.ntl_GF2EX" */
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyTypeObject *__pyx_ptype_3ntl_9ntl_GF2EX_PyGF2EX = 0;
static PyTypeObject *__pyx_ptype_3ntl_9ntl_GF2EX_PyGF2EX_Class = 0;
#endif

/* Module declarations from "ntl.ntl_GF2E" */
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyTypeObject *__pyx_ptype_3ntl_8ntl_GF2E_PyGF2E_Context = 0;
static PyTypeObject *__pyx_ptype_3ntl_8ntl_GF2E_PyGF2E = 0;
#endif
static PyObject *__pyx_f_3ntl_8ntl_GF2E_PyGF2E_Ring(PyObject *, int __pyx_skip_dispatch); /*proto*/
/* #### Code section: typeinfo ### */
/* #### Code section: before_global_var ### */
#define __Pyx_MODULE_NAME "ntl.ntl_GF2E"
extern int __pyx_module_is_main_ntl__ntl_GF2E;
int __pyx_module_is_main_ntl__ntl_GF2E = 0;

/* Implementation of "ntl.ntl_GF2E" */
/* #### Code section: global_var ### */
static PyObject *__pyx_builtin_staticmethod;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_NotImplemented;
static PyObject *__pyx_builtin_AssertionError;
/* #### Code section: string_decls ### */
static const char __pyx_k__4[] = "*";
static const char __pyx_k__30[] = "?";
static const char __pyx_k_arg[] = "arg";
static const char __pyx_k_int[] = "__int__";
static const char __pyx_k_mod[] = "mod";
static const char __pyx_k_mul[] = "__mul__";
static const char __pyx_k_neq[] = "__neq__";
static const char __pyx_k_ref[] = "ref";
static const char __pyx_k_res[] = "res";
static const char __pyx_k_ctxt[] = "ctxt";
static const char __pyx_k_dict[] = "__dict__";
static const char __pyx_k_lift[] = "lift";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_self[] = "self";
static const char __pyx_k_spec[] = "__spec__";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_arg_2[] = "_arg";
static const char __pyx_k_bytes[] = "bytes";
static const char __pyx_k_slots[] = "__slots__";
static const char __pyx_k_PyGF2E[] = "PyGF2E";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_is_one[] = "is_one";
static const char __pyx_k_little[] = "little";
static const char __pyx_k_moduli[] = "_moduli";
static const char __pyx_k_parent[] = "parent";
static const char __pyx_k_random[] = "random";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_is_zero[] = "is_zero";
static const char __pyx_k_modulus[] = "modulus";
static const char __pyx_k_weakref[] = "weakref";
static const char __pyx_k_Sequence[] = "Sequence";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_pyx_state[] = "__pyx_state";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_from_bytes[] = "from_bytes";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_PyGF2E_Ring[] = "PyGF2E_Ring";
static const char __pyx_k_PyGF2E_lift[] = "PyGF2E.lift";
static const char __pyx_k_PyGF2E___neq[] = "PyGF2E.__neq__";
static const char __pyx_k_initializing[] = "_initializing";
static const char __pyx_k_ntl_ntl_GF2E[] = "ntl.ntl_GF2E";
static const char __pyx_k_staticmethod[] = "staticmethod";
static const char __pyx_k_stringsource[] = "stringsource";
static const char __pyx_k_PyGF2E_is_one[] = "PyGF2E.is_one";
static const char __pyx_k_PyGF2E_parent[] = "PyGF2E.parent";
static const char __pyx_k_class_getitem[] = "__class_getitem__";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_AssertionError[] = "AssertionError";
static const char __pyx_k_NotImplemented[] = "NotImplemented";
static const char __pyx_k_PyGF2E_Context[] = "PyGF2E_Context";
static const char __pyx_k_PyGF2E_is_zero[] = "PyGF2E.is_zero";
static const char __pyx_k_collections_abc[] = "collections.abc";
static const char __pyx_k_invalid_modulus[] = "invalid modulus";
static const char __pyx_k_require_context[] = "_require_context";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_ntl_ntl_GF2E_pyx[] = "ntl/ntl_GF2E.pyx";
static const char __pyx_k_conversion_failed[] = "conversion failed";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_PyGF2E_Context_random[] = "PyGF2E_Context.random";
static const char __pyx_k_PyGF2E_Context_modulus[] = "PyGF2E_Context.modulus";
static const char __pyx_k_PyGF2E___reduce_cython[] = "PyGF2E.__reduce_cython__";
static const char __pyx_k_modulus_does_not_match[] = "modulus does not match";
static const char __pyx_k_PyGF2E__require_context[] = "PyGF2E._require_context";
static const char __pyx_k_PyGF2E___setstate_cython[] = "PyGF2E.__setstate_cython__";
static const char __pyx_k_PyGF2E_Context___reduce_cython[] = "PyGF2E_Context.__reduce_cython__";
static const char __pyx_k_self_val_cannot_be_converted_to[] = "self.val cannot be converted to a Python object for pickling";
static const char __pyx_k_PyGF2E_Context___setstate_cython[] = "PyGF2E_Context.__setstate_cython__";
static const char __pyx_k_self_ctxt_cannot_be_converted_to[] = "self.ctxt cannot be converted to a Python object for pickling";
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyObject *__pyx_n_s_AssertionError;
static PyObject *__pyx_n_s_NotImplemented;
static PyObject *__pyx_n_s_PyGF2E;
static PyObject *__pyx_n_s_PyGF2E_Context;
static PyObject *__pyx_n_s_PyGF2E_Context___reduce_cython;
static PyObject *__pyx_n_s_PyGF2E_Context___setstate_cython;
static PyObject *__pyx_n_s_PyGF2E_Context_modulus;
static PyObject *__pyx_n_s_PyGF2E_Context_random;
static PyObject *__pyx_n_s_PyGF2E_Ring;
static PyObject *__pyx_n_s_PyGF2E___neq;
static PyObject *__pyx_n_s_PyGF2E___reduce_cython;
static PyObject *__pyx_n_s_PyGF2E___setstate_cython;
static PyObject *__pyx_n_s_PyGF2E__require_context;
static PyObject *__pyx_n_s_PyGF2E_is_one;
static PyObject *__pyx_n_s_PyGF2E_is_zero;
static PyObject *__pyx_n_s_PyGF2E_lift;
static PyObject *__pyx_n_s_PyGF2E_parent;
static PyObject *__pyx_n_s_Sequence;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_n_s__30;
static PyObject *__pyx_n_s__4;
static PyObject *__pyx_n_s_arg;
static PyObject *__pyx_n_s_arg_2;
static PyObject *__pyx_n_s_bytes;
static PyObject *__pyx_n_s_class_getitem;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_collections_abc;
static PyObject *__pyx_kp_u_conversion_failed;
static PyObject *__pyx_n_s_ctxt;
static PyObject *__pyx_n_s_dict;
static PyObject *__pyx_n_s_from_bytes;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_initializing;
static PyObject *__pyx_n_s_int;
static PyObject *__pyx_kp_u_invalid_modulus;
static PyObject *__pyx_n_s_is_one;
static PyObject *__pyx_n_s_is_zero;
static PyObject *__pyx_n_s_lift;
static PyObject *__pyx_n_u_little;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_mod;
static PyObject *__pyx_n_s_moduli;
static PyObject *__pyx_n_s_modulus;
static PyObject *__pyx_kp_u_modulus_does_not_match;
static PyObject *__pyx_n_s_mul;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_neq;
static PyObject *__pyx_n_s_ntl_ntl_GF2E;
static PyObject *__pyx_kp_s_ntl_ntl_GF2E_pyx;
static PyObject *__pyx_n_s_parent;
static PyObject *__pyx_n_s_pyx_state;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_random;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_s_ref;
static PyObject *__pyx_n_s_require_context;
static PyObject *__pyx_n_s_res;
static PyObject *__pyx_n_s_self;
static PyObject *__pyx_kp_s_self_ctxt_cannot_be_converted_to;
static PyObject *__pyx_kp_s_self_val_cannot_be_converted_to;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_s_slots;
static PyObject *__pyx_n_s_spec;
static PyObject *__pyx_n_s_staticmethod;
static PyObject *__pyx_kp_s_stringsource;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_weakref;
#endif
/* #### Code section: decls ### */
static int __pyx_pf_3ntl_8ntl_GF2E_14PyGF2E_Context___init__(struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E_Context *__pyx_v_self, struct __pyx_obj_3ntl_8ntl_GF2X_PyGF2X *__pyx_v_mod); /* proto */
static PyObject *__pyx_pf_3ntl_8ntl_GF2E_14PyGF2E_Context_2modulus(struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E_Context *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3ntl_8ntl_GF2E_14PyGF2E_Context_4__call__(struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E_Context *__pyx_v_self, PyObject *__pyx_v_args); /* proto */
static PyObject *__pyx_pf_3ntl_8ntl_GF2E_14PyGF2E_Context_6__eq__(struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E_Context *__pyx_v_self, struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E_Context *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_3ntl_8ntl_GF2E_14PyGF2E_Context_8random(struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E_Context *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3ntl_8ntl_GF2E_14PyGF2E_Context_1P___get__(struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E_Context *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3ntl_8ntl_GF2E_14PyGF2E_Context_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E_Context *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3ntl_8ntl_GF2E_14PyGF2E_Context_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E_Context *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_3ntl_8ntl_GF2E_PyGF2E_Ring(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_arg); /* proto */
static PyObject *__pyx_pf_3ntl_8ntl_GF2E_6PyGF2E__require_context(void); /* proto */
static PyObject *__pyx_pf_3ntl_8ntl_GF2E_6PyGF2E_2__neg__(struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3ntl_8ntl_GF2E_6PyGF2E_4__add__(struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *__pyx_v_self, PyObject *__pyx_v__arg); /* proto */
static PyObject *__pyx_pf_3ntl_8ntl_GF2E_6PyGF2E_6__radd__(struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *__pyx_v_self, PyObject *__pyx_v__arg); /* proto */
static PyObject *__pyx_pf_3ntl_8ntl_GF2E_6PyGF2E_8__sub__(struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *__pyx_v_self, PyObject *__pyx_v__arg); /* proto */
static PyObject *__pyx_pf_3ntl_8ntl_GF2E_6PyGF2E_10__rsub__(struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *__pyx_v_self, PyObject *__pyx_v__arg); /* proto */
static PyObject *__pyx_pf_3ntl_8ntl_GF2E_6PyGF2E_12__eq__(struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *__pyx_v_self, PyObject *__pyx_v__arg); /* proto */
static PyObject *__pyx_pf_3ntl_8ntl_GF2E_6PyGF2E_14__neq__(struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *__pyx_v_self, PyObject *__pyx_v__arg); /* proto */
static int __pyx_pf_3ntl_8ntl_GF2E_6PyGF2E_16__bool__(struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3ntl_8ntl_GF2E_6PyGF2E_18__str__(struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3ntl_8ntl_GF2E_6PyGF2E_20__repr__(struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3ntl_8ntl_GF2E_6PyGF2E_22is_zero(struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3ntl_8ntl_GF2E_6PyGF2E_24is_one(struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3ntl_8ntl_GF2E_6PyGF2E_26__index__(struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3ntl_8ntl_GF2E_6PyGF2E_28__int__(struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3ntl_8ntl_GF2E_6PyGF2E_30lift(struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3ntl_8ntl_GF2E_6PyGF2E_32parent(struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3ntl_8ntl_GF2E_6PyGF2E_34__mul__(struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *__pyx_v_self, PyObject *__pyx_v__arg); /* proto */
static PyObject *__pyx_pf_3ntl_8ntl_GF2E_6PyGF2E_36__rmul__(struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *__pyx_v_self, PyObject *__pyx_v__arg); /* proto */
static PyObject *__pyx_pf_3ntl_8ntl_GF2E_6PyGF2E_38__invert__(struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3ntl_8ntl_GF2E_6PyGF2E_40__truediv__(struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *__pyx_v_self, PyObject *__pyx_v__arg); /* proto */
static PyObject *__pyx_pf_3ntl_8ntl_GF2E_6PyGF2E_42__rtruediv__(struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *__pyx_v_self, PyObject *__pyx_v__arg); /* proto */
static PyObject *__pyx_pf_3ntl_8ntl_GF2E_6PyGF2E_44__pow__(struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *__pyx_v_self, PyObject *__pyx_v__exp, PyObject *__pyx_v__mod); /* proto */
static Py_hash_t __pyx_pf_3ntl_8ntl_GF2E_6PyGF2E_46__hash__(struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *__pyx_v_self); /* proto */
static int __pyx_pf_3ntl_8ntl_GF2E_6PyGF2E_48__init__(struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *__pyx_v_self, struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E_Context *__pyx_v_ctxt, PyObject *__pyx_v_arg); /* proto */
static PyObject *__pyx_pf_3ntl_8ntl_GF2E_6PyGF2E_50__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3ntl_8ntl_GF2E_6PyGF2E_52__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_tp_new_3ntl_8ntl_GF2E_PyGF2E_Context(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_3ntl_8ntl_GF2E_PyGF2E(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
#if !CYTHON_COMPILING_IN_LIMITED_API
#endif
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_tuple__22;
static PyObject *__pyx_tuple__24;
static PyObject *__pyx_tuple__26;
static PyObject *__pyx_tuple__28;
static PyObject *__pyx_codeobj__6;
static PyObject *__pyx_codeobj__8;
static PyObject *__pyx_codeobj__10;
static PyObject *__pyx_codeobj__12;
static PyObject *__pyx_codeobj__14;
static PyObject *__pyx_codeobj__15;
static PyObject *__pyx_codeobj__17;
static PyObject *__pyx_codeobj__19;
static PyObject *__pyx_codeobj__21;
static PyObject *__pyx_codeobj__23;
static PyObject *__pyx_codeobj__25;
static PyObject *__pyx_codeobj__27;
static PyObject *__pyx_codeobj__29;
#endif
/* #### Code section: late_includes ### */
#include "macros.h"
/* #### Code section: module_state ### */
#if CYTHON_COMPILING_IN_LIMITED_API
typedef struct {
  PyObject *__pyx_d;
  PyObject *__pyx_b;
  PyObject *__pyx_cython_runtime;
  PyObject *__pyx_empty_tuple;
  PyObject *__pyx_empty_bytes;
  PyObject *__pyx_empty_unicode;
  #ifdef __Pyx_CyFunction_USED
  PyTypeObject *__pyx_CyFunctionType;
  #endif
  #ifdef __Pyx_FusedFunction_USED
  PyTypeObject *__pyx_FusedFunctionType;
  #endif
  PyTypeObject *__pyx_ptype_3ntl_6ntl_ZZ_PyZZ;
  PyTypeObject *__pyx_ptype_3ntl_7ntl_GF2_PyGF2;
  PyTypeObject *__pyx_ptype_3ntl_7ntl_ZZX_PyZZX;
  PyTypeObject *__pyx_ptype_3ntl_7ntl_ZZX_PyZZX_Class;
  PyTypeObject *__pyx_ptype_3ntl_8ntl_GF2X_PyGF2X;
  PyTypeObject *__pyx_ptype_3ntl_8ntl_GF2X_PyGF2X_Class;
  PyTypeObject *__pyx_ptype_7cpython_4type_type;
  PyTypeObject *__pyx_ptype_3ntl_9ntl_GF2EX_PyGF2EX;
  PyTypeObject *__pyx_ptype_3ntl_9ntl_GF2EX_PyGF2EX_Class;
  PyTypeObject *__pyx_ptype_3ntl_8ntl_GF2E_PyGF2E_Context;
  PyObject *__pyx_type_3ntl_8ntl_GF2E_PyGF2E_Context;
  PyTypeObject *__pyx_ptype_3ntl_8ntl_GF2E_PyGF2E;
  PyObject *__pyx_type_3ntl_8ntl_GF2E_PyGF2E;
  PyObject *__pyx_n_s_AssertionError;
  PyObject *__pyx_n_s_NotImplemented;
  PyObject *__pyx_n_s_PyGF2E;
  PyObject *__pyx_n_s_PyGF2E_Context;
  PyObject *__pyx_n_s_PyGF2E_Context___reduce_cython;
  PyObject *__pyx_n_s_PyGF2E_Context___setstate_cython;
  PyObject *__pyx_n_s_PyGF2E_Context_modulus;
  PyObject *__pyx_n_s_PyGF2E_Context_random;
  PyObject *__pyx_n_s_PyGF2E_Ring;
  PyObject *__pyx_n_s_PyGF2E___neq;
  PyObject *__pyx_n_s_PyGF2E___reduce_cython;
  PyObject *__pyx_n_s_PyGF2E___setstate_cython;
  PyObject *__pyx_n_s_PyGF2E__require_context;
  PyObject *__pyx_n_s_PyGF2E_is_one;
  PyObject *__pyx_n_s_PyGF2E_is_zero;
  PyObject *__pyx_n_s_PyGF2E_lift;
  PyObject *__pyx_n_s_PyGF2E_parent;
  PyObject *__pyx_n_s_Sequence;
  PyObject *__pyx_n_s_TypeError;
  PyObject *__pyx_n_s_ValueError;
  PyObject *__pyx_n_s__30;
  PyObject *__pyx_n_s__4;
  PyObject *__pyx_n_s_arg;
  PyObject *__pyx_n_s_arg_2;
  PyObject *__pyx_n_s_bytes;
  PyObject *__pyx_n_s_class_getitem;
  PyObject *__pyx_n_s_cline_in_traceback;
  PyObject *__pyx_n_s_collections_abc;
  PyObject *__pyx_kp_u_conversion_failed;
  PyObject *__pyx_n_s_ctxt;
  PyObject *__pyx_n_s_dict;
  PyObject *__pyx_n_s_from_bytes;
  PyObject *__pyx_n_s_getstate;
  PyObject *__pyx_n_s_import;
  PyObject *__pyx_n_s_initializing;
  PyObject *__pyx_n_s_int;
  PyObject *__pyx_kp_u_invalid_modulus;
  PyObject *__pyx_n_s_is_one;
  PyObject *__pyx_n_s_is_zero;
  PyObject *__pyx_n_s_lift;
  PyObject *__pyx_n_u_little;
  PyObject *__pyx_n_s_main;
  PyObject *__pyx_n_s_mod;
  PyObject *__pyx_n_s_moduli;
  PyObject *__pyx_n_s_modulus;
  PyObject *__pyx_kp_u_modulus_does_not_match;
  PyObject *__pyx_n_s_mul;
  PyObject *__pyx_n_s_name;
  PyObject *__pyx_n_s_neq;
  PyObject *__pyx_n_s_ntl_ntl_GF2E;
  PyObject *__pyx_kp_s_ntl_ntl_GF2E_pyx;
  PyObject *__pyx_n_s_parent;
  PyObject *__pyx_n_s_pyx_state;
  PyObject *__pyx_n_s_pyx_vtable;
  PyObject *__pyx_n_s_random;
  PyObject *__pyx_n_s_reduce;
  PyObject *__pyx_n_s_reduce_cython;
  PyObject *__pyx_n_s_reduce_ex;
  PyObject *__pyx_n_s_ref;
  PyObject *__pyx_n_s_require_context;
  PyObject *__pyx_n_s_res;
  PyObject *__pyx_n_s_self;
  PyObject *__pyx_kp_s_self_ctxt_cannot_be_converted_to;
  PyObject *__pyx_kp_s_self_val_cannot_be_converted_to;
  PyObject *__pyx_n_s_setstate;
  PyObject *__pyx_n_s_setstate_cython;
  PyObject *__pyx_n_s_slots;
  PyObject *__pyx_n_s_spec;
  PyObject *__pyx_n_s_staticmethod;
  PyObject *__pyx_kp_s_stringsource;
  PyObject *__pyx_n_s_test;
  PyObject *__pyx_n_s_weakref;
  PyObject *__pyx_tuple_;
  PyObject *__pyx_tuple__2;
  PyObject *__pyx_tuple__3;
  PyObject *__pyx_tuple__5;
  PyObject *__pyx_tuple__7;
  PyObject *__pyx_tuple__9;
  PyObject *__pyx_tuple__11;
  PyObject *__pyx_tuple__13;
  PyObject *__pyx_tuple__16;
  PyObject *__pyx_tuple__18;
  PyObject *__pyx_tuple__20;
  PyObject *__pyx_tuple__22;
  PyObject *__pyx_tuple__24;
  PyObject *__pyx_tuple__26;
  PyObject *__pyx_tuple__28;
  PyObject *__pyx_codeobj__6;
  PyObject *__pyx_codeobj__8;
  PyObject *__pyx_codeobj__10;
  PyObject *__pyx_codeobj__12;
  PyObject *__pyx_codeobj__14;
  PyObject *__pyx_codeobj__15;
  PyObject *__pyx_codeobj__17;
  PyObject *__pyx_codeobj__19;
  PyObject *__pyx_codeobj__21;
  PyObject *__pyx_codeobj__23;
  PyObject *__pyx_codeobj__25;
  PyObject *__pyx_codeobj__27;
  PyObject *__pyx_codeobj__29;
} __pyx_mstate;

#ifdef __cplusplus
namespace {
  extern struct PyModuleDef __pyx_moduledef;
} /* anonymous namespace */
#else
static struct PyModuleDef __pyx_moduledef;
#endif

#define __pyx_mstate(o) ((__pyx_mstate *)__Pyx_PyModule_GetState(o))

#define __pyx_mstate_global (__pyx_mstate(PyState_FindModule(&__pyx_moduledef)))

#define __pyx_m (PyState_FindModule(&__pyx_moduledef))
#endif
/* #### Code section: module_state_clear ### */
#if CYTHON_COMPILING_IN_LIMITED_API
static int __pyx_m_clear(PyObject *m) {
  __pyx_mstate *clear_module_state = __pyx_mstate(m);
  if (!clear_module_state) return 0;
  Py_CLEAR(clear_module_state->__pyx_d);
  Py_CLEAR(clear_module_state->__pyx_b);
  Py_CLEAR(clear_module_state->__pyx_cython_runtime);
  Py_CLEAR(clear_module_state->__pyx_empty_tuple);
  Py_CLEAR(clear_module_state->__pyx_empty_bytes);
  Py_CLEAR(clear_module_state->__pyx_empty_unicode);
  #ifdef __Pyx_CyFunction_USED
  Py_CLEAR(clear_module_state->__pyx_CyFunctionType);
  #endif
  #ifdef __Pyx_FusedFunction_USED
  Py_CLEAR(clear_module_state->__pyx_FusedFunctionType);
  #endif
  Py_CLEAR(clear_module_state->__pyx_ptype_3ntl_6ntl_ZZ_PyZZ);
  Py_CLEAR(clear_module_state->__pyx_ptype_3ntl_7ntl_GF2_PyGF2);
  Py_CLEAR(clear_module_state->__pyx_ptype_3ntl_7ntl_ZZX_PyZZX);
  Py_CLEAR(clear_module_state->__pyx_ptype_3ntl_7ntl_ZZX_PyZZX_Class);
  Py_CLEAR(clear_module_state->__pyx_ptype_3ntl_8ntl_GF2X_PyGF2X);
  Py_CLEAR(clear_module_state->__pyx_ptype_3ntl_8ntl_GF2X_PyGF2X_Class);
  Py_CLEAR(clear_module_state->__pyx_ptype_7cpython_4type_type);
  Py_CLEAR(clear_module_state->__pyx_ptype_3ntl_9ntl_GF2EX_PyGF2EX);
  Py_CLEAR(clear_module_state->__pyx_ptype_3ntl_9ntl_GF2EX_PyGF2EX_Class);
  Py_CLEAR(clear_module_state->__pyx_ptype_3ntl_8ntl_GF2E_PyGF2E_Context);
  Py_CLEAR(clear_module_state->__pyx_type_3ntl_8ntl_GF2E_PyGF2E_Context);
  Py_CLEAR(clear_module_state->__pyx_ptype_3ntl_8ntl_GF2E_PyGF2E);
  Py_CLEAR(clear_module_state->__pyx_type_3ntl_8ntl_GF2E_PyGF2E);
  Py_CLEAR(clear_module_state->__pyx_n_s_AssertionError);
  Py_CLEAR(clear_module_state->__pyx_n_s_NotImplemented);
  Py_CLEAR(clear_module_state->__pyx_n_s_PyGF2E);
  Py_CLEAR(clear_module_state->__pyx_n_s_PyGF2E_Context);
  Py_CLEAR(clear_module_state->__pyx_n_s_PyGF2E_Context___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_PyGF2E_Context___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_PyGF2E_Context_modulus);
  Py_CLEAR(clear_module_state->__pyx_n_s_PyGF2E_Context_random);
  Py_CLEAR(clear_module_state->__pyx_n_s_PyGF2E_Ring);
  Py_CLEAR(clear_module_state->__pyx_n_s_PyGF2E___neq);
  Py_CLEAR(clear_module_state->__pyx_n_s_PyGF2E___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_PyGF2E___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_PyGF2E__require_context);
  Py_CLEAR(clear_module_state->__pyx_n_s_PyGF2E_is_one);
  Py_CLEAR(clear_module_state->__pyx_n_s_PyGF2E_is_zero);
  Py_CLEAR(clear_module_state->__pyx_n_s_PyGF2E_lift);
  Py_CLEAR(clear_module_state->__pyx_n_s_PyGF2E_parent);
  Py_CLEAR(clear_module_state->__pyx_n_s_Sequence);
  Py_CLEAR(clear_module_state->__pyx_n_s_TypeError);
  Py_CLEAR(clear_module_state->__pyx_n_s_ValueError);
  Py_CLEAR(clear_module_state->__pyx_n_s__30);
  Py_CLEAR(clear_module_state->__pyx_n_s__4);
  Py_CLEAR(clear_module_state->__pyx_n_s_arg);
  Py_CLEAR(clear_module_state->__pyx_n_s_arg_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_bytes);
  Py_CLEAR(clear_module_state->__pyx_n_s_class_getitem);
  Py_CLEAR(clear_module_state->__pyx_n_s_cline_in_traceback);
  Py_CLEAR(clear_module_state->__pyx_n_s_collections_abc);
  Py_CLEAR(clear_module_state->__pyx_kp_u_conversion_failed);
  Py_CLEAR(clear_module_state->__pyx_n_s_ctxt);
  Py_CLEAR(clear_module_state->__pyx_n_s_dict);
  Py_CLEAR(clear_module_state->__pyx_n_s_from_bytes);
  Py_CLEAR(clear_module_state->__pyx_n_s_getstate);
  Py_CLEAR(clear_module_state->__pyx_n_s_import);
  Py_CLEAR(clear_module_state->__pyx_n_s_initializing);
  Py_CLEAR(clear_module_state->__pyx_n_s_int);
  Py_CLEAR(clear_module_state->__pyx_kp_u_invalid_modulus);
  Py_CLEAR(clear_module_state->__pyx_n_s_is_one);
  Py_CLEAR(clear_module_state->__pyx_n_s_is_zero);
  Py_CLEAR(clear_module_state->__pyx_n_s_lift);
  Py_CLEAR(clear_module_state->__pyx_n_u_little);
  Py_CLEAR(clear_module_state->__pyx_n_s_main);
  Py_CLEAR(clear_module_state->__pyx_n_s_mod);
  Py_CLEAR(clear_module_state->__pyx_n_s_moduli);
  Py_CLEAR(clear_module_state->__pyx_n_s_modulus);
  Py_CLEAR(clear_module_state->__pyx_kp_u_modulus_does_not_match);
  Py_CLEAR(clear_module_state->__pyx_n_s_mul);
  Py_CLEAR(clear_module_state->__pyx_n_s_name);
  Py_CLEAR(clear_module_state->__pyx_n_s_neq);
  Py_CLEAR(clear_module_state->__pyx_n_s_ntl_ntl_GF2E);
  Py_CLEAR(clear_module_state->__pyx_kp_s_ntl_ntl_GF2E_pyx);
  Py_CLEAR(clear_module_state->__pyx_n_s_parent);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_state);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_vtable);
  Py_CLEAR(clear_module_state->__pyx_n_s_random);
  Py_CLEAR(clear_module_state->__pyx_n_s_reduce);
  Py_CLEAR(clear_module_state->__pyx_n_s_reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_reduce_ex);
  Py_CLEAR(clear_module_state->__pyx_n_s_ref);
  Py_CLEAR(clear_module_state->__pyx_n_s_require_context);
  Py_CLEAR(clear_module_state->__pyx_n_s_res);
  Py_CLEAR(clear_module_state->__pyx_n_s_self);
  Py_CLEAR(clear_module_state->__pyx_kp_s_self_ctxt_cannot_be_converted_to);
  Py_CLEAR(clear_module_state->__pyx_kp_s_self_val_cannot_be_converted_to);
  Py_CLEAR(clear_module_state->__pyx_n_s_setstate);
  Py_CLEAR(clear_module_state->__pyx_n_s_setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_slots);
  Py_CLEAR(clear_module_state->__pyx_n_s_spec);
  Py_CLEAR(clear_module_state->__pyx_n_s_staticmethod);
  Py_CLEAR(clear_module_state->__pyx_kp_s_stringsource);
  Py_CLEAR(clear_module_state->__pyx_n_s_test);
  Py_CLEAR(clear_module_state->__pyx_n_s_weakref);
  Py_CLEAR(clear_module_state->__pyx_tuple_);
  Py_CLEAR(clear_module_state->__pyx_tuple__2);
  Py_CLEAR(clear_module_state->__pyx_tuple__3);
  Py_CLEAR(clear_module_state->__pyx_tuple__5);
  Py_CLEAR(clear_module_state->__pyx_tuple__7);
  Py_CLEAR(clear_module_state->__pyx_tuple__9);
  Py_CLEAR(clear_module_state->__pyx_tuple__11);
  Py_CLEAR(clear_module_state->__pyx_tuple__13);
  Py_CLEAR(clear_module_state->__pyx_tuple__16);
  Py_CLEAR(clear_module_state->__pyx_tuple__18);
  Py_CLEAR(clear_module_state->__pyx_tuple__20);
  Py_CLEAR(clear_module_state->__pyx_tuple__22);
  Py_CLEAR(clear_module_state->__pyx_tuple__24);
  Py_CLEAR(clear_module_state->__pyx_tuple__26);
  Py_CLEAR(clear_module_state->__pyx_tuple__28);
  Py_CLEAR(clear_module_state->__pyx_codeobj__6);
  Py_CLEAR(clear_module_state->__pyx_codeobj__8);
  Py_CLEAR(clear_module_state->__pyx_codeobj__10);
  Py_CLEAR(clear_module_state->__pyx_codeobj__12);
  Py_CLEAR(clear_module_state->__pyx_codeobj__14);
  Py_CLEAR(clear_module_state->__pyx_codeobj__15);
  Py_CLEAR(clear_module_state->__pyx_codeobj__17);
  Py_CLEAR(clear_module_state->__pyx_codeobj__19);
  Py_CLEAR(clear_module_state->__pyx_codeobj__21);
  Py_CLEAR(clear_module_state->__pyx_codeobj__23);
  Py_CLEAR(clear_module_state->__pyx_codeobj__25);
  Py_CLEAR(clear_module_state->__pyx_codeobj__27);
  Py_CLEAR(clear_module_state->__pyx_codeobj__29);
  return 0;
}
#endif
/* #### Code section: module_state_traverse ### */
#if CYTHON_COMPILING_IN_LIMITED_API
static int __pyx_m_traverse(PyObject *m, visitproc visit, void *arg) {
  __pyx_mstate *traverse_module_state = __pyx_mstate(m);
  if (!traverse_module_state) return 0;
  Py_VISIT(traverse_module_state->__pyx_d);
  Py_VISIT(traverse_module_state->__pyx_b);
  Py_VISIT(traverse_module_state->__pyx_cython_runtime);
  Py_VISIT(traverse_module_state->__pyx_empty_tuple);
  Py_VISIT(traverse_module_state->__pyx_empty_bytes);
  Py_VISIT(traverse_module_state->__pyx_empty_unicode);
  #ifdef __Pyx_CyFunction_USED
  Py_VISIT(traverse_module_state->__pyx_CyFunctionType);
  #endif
  #ifdef __Pyx_FusedFunction_USED
  Py_VISIT(traverse_module_state->__pyx_FusedFunctionType);
  #endif
  Py_VISIT(traverse_module_state->__pyx_ptype_3ntl_6ntl_ZZ_PyZZ);
  Py_VISIT(traverse_module_state->__pyx_ptype_3ntl_7ntl_GF2_PyGF2);
  Py_VISIT(traverse_module_state->__pyx_ptype_3ntl_7ntl_ZZX_PyZZX);
  Py_VISIT(traverse_module_state->__pyx_ptype_3ntl_7ntl_ZZX_PyZZX_Class);
  Py_VISIT(traverse_module_state->__pyx_ptype_3ntl_8ntl_GF2X_PyGF2X);
  Py_VISIT(traverse_module_state->__pyx_ptype_3ntl_8ntl_GF2X_PyGF2X_Class);
  Py_VISIT(traverse_module_state->__pyx_ptype_7cpython_4type_type);
  Py_VISIT(traverse_module_state->__pyx_ptype_3ntl_9ntl_GF2EX_PyGF2EX);
  Py_VISIT(traverse_module_state->__pyx_ptype_3ntl_9ntl_GF2EX_PyGF2EX_Class);
  Py_VISIT(traverse_module_state->__pyx_ptype_3ntl_8ntl_GF2E_PyGF2E_Context);
  Py_VISIT(traverse_module_state->__pyx_type_3ntl_8ntl_GF2E_PyGF2E_Context);
  Py_VISIT(traverse_module_state->__pyx_ptype_3ntl_8ntl_GF2E_PyGF2E);
  Py_VISIT(traverse_module_state->__pyx_type_3ntl_8ntl_GF2E_PyGF2E);
  Py_VISIT(traverse_module_state->__pyx_n_s_AssertionError);
  Py_VISIT(traverse_module_state->__pyx_n_s_NotImplemented);
  Py_VISIT(traverse_module_state->__pyx_n_s_PyGF2E);
  Py_VISIT(traverse_module_state->__pyx_n_s_PyGF2E_Context);
  Py_VISIT(traverse_module_state->__pyx_n_s_PyGF2E_Context___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_PyGF2E_Context___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_PyGF2E_Context_modulus);
  Py_VISIT(traverse_module_state->__pyx_n_s_PyGF2E_Context_random);
  Py_VISIT(traverse_module_state->__pyx_n_s_PyGF2E_Ring);
  Py_VISIT(traverse_module_state->__pyx_n_s_PyGF2E___neq);
  Py_VISIT(traverse_module_state->__pyx_n_s_PyGF2E___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_PyGF2E___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_PyGF2E__require_context);
  Py_VISIT(traverse_module_state->__pyx_n_s_PyGF2E_is_one);
  Py_VISIT(traverse_module_state->__pyx_n_s_PyGF2E_is_zero);
  Py_VISIT(traverse_module_state->__pyx_n_s_PyGF2E_lift);
  Py_VISIT(traverse_module_state->__pyx_n_s_PyGF2E_parent);
  Py_VISIT(traverse_module_state->__pyx_n_s_Sequence);
  Py_VISIT(traverse_module_state->__pyx_n_s_TypeError);
  Py_VISIT(traverse_module_state->__pyx_n_s_ValueError);
  Py_VISIT(traverse_module_state->__pyx_n_s__30);
  Py_VISIT(traverse_module_state->__pyx_n_s__4);
  Py_VISIT(traverse_module_state->__pyx_n_s_arg);
  Py_VISIT(traverse_module_state->__pyx_n_s_arg_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_bytes);
  Py_VISIT(traverse_module_state->__pyx_n_s_class_getitem);
  Py_VISIT(traverse_module_state->__pyx_n_s_cline_in_traceback);
  Py_VISIT(traverse_module_state->__pyx_n_s_collections_abc);
  Py_VISIT(traverse_module_state->__pyx_kp_u_conversion_failed);
  Py_VISIT(traverse_module_state->__pyx_n_s_ctxt);
  Py_VISIT(traverse_module_state->__pyx_n_s_dict);
  Py_VISIT(traverse_module_state->__pyx_n_s_from_bytes);
  Py_VISIT(traverse_module_state->__pyx_n_s_getstate);
  Py_VISIT(traverse_module_state->__pyx_n_s_import);
  Py_VISIT(traverse_module_state->__pyx_n_s_initializing);
  Py_VISIT(traverse_module_state->__pyx_n_s_int);
  Py_VISIT(traverse_module_state->__pyx_kp_u_invalid_modulus);
  Py_VISIT(traverse_module_state->__pyx_n_s_is_one);
  Py_VISIT(traverse_module_state->__pyx_n_s_is_zero);
  Py_VISIT(traverse_module_state->__pyx_n_s_lift);
  Py_VISIT(traverse_module_state->__pyx_n_u_little);
  Py_VISIT(traverse_module_state->__pyx_n_s_main);
  Py_VISIT(traverse_module_state->__pyx_n_s_mod);
  Py_VISIT(traverse_module_state->__pyx_n_s_moduli);
  Py_VISIT(traverse_module_state->__pyx_n_s_modulus);
  Py_VISIT(traverse_module_state->__pyx_kp_u_modulus_does_not_match);
  Py_VISIT(traverse_module_state->__pyx_n_s_mul);
  Py_VISIT(traverse_module_state->__pyx_n_s_name);
  Py_VISIT(traverse_module_state->__pyx_n_s_neq);
  Py_VISIT(traverse_module_state->__pyx_n_s_ntl_ntl_GF2E);
  Py_VISIT(traverse_module_state->__pyx_kp_s_ntl_ntl_GF2E_pyx);
  Py_VISIT(traverse_module_state->__pyx_n_s_parent);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_state);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_vtable);
  Py_VISIT(traverse_module_state->__pyx_n_s_random);
  Py_VISIT(traverse_module_state->__pyx_n_s_reduce);
  Py_VISIT(traverse_module_state->__pyx_n_s_reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_reduce_ex);
  Py_VISIT(traverse_module_state->__pyx_n_s_ref);
  Py_VISIT(traverse_module_state->__pyx_n_s_require_context);
  Py_VISIT(traverse_module_state->__pyx_n_s_res);
  Py_VISIT(traverse_module_state->__pyx_n_s_self);
  Py_VISIT(traverse_module_state->__pyx_kp_s_self_ctxt_cannot_be_converted_to);
  Py_VISIT(traverse_module_state->__pyx_kp_s_self_val_cannot_be_converted_to);
  Py_VISIT(traverse_module_state->__pyx_n_s_setstate);
  Py_VISIT(traverse_module_state->__pyx_n_s_setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_slots);
  Py_VISIT(traverse_module_state->__pyx_n_s_spec);
  Py_VISIT(traverse_module_state->__pyx_n_s_staticmethod);
  Py_VISIT(traverse_module_state->__pyx_kp_s_stringsource);
  Py_VISIT(traverse_module_state->__pyx_n_s_test);
  Py_VISIT(traverse_module_state->__pyx_n_s_weakref);
  Py_VISIT(traverse_module_state->__pyx_tuple_);
  Py_VISIT(traverse_module_state->__pyx_tuple__2);
  Py_VISIT(traverse_module_state->__pyx_tuple__3);
  Py_VISIT(traverse_module_state->__pyx_tuple__5);
  Py_VISIT(traverse_module_state->__pyx_tuple__7);
  Py_VISIT(traverse_module_state->__pyx_tuple__9);
  Py_VISIT(traverse_module_state->__pyx_tuple__11);
  Py_VISIT(traverse_module_state->__pyx_tuple__13);
  Py_VISIT(traverse_module_state->__pyx_tuple__16);
  Py_VISIT(traverse_module_state->__pyx_tuple__18);
  Py_VISIT(traverse_module_state->__pyx_tuple__20);
  Py_VISIT(traverse_module_state->__pyx_tuple__22);
  Py_VISIT(traverse_module_state->__pyx_tuple__24);
  Py_VISIT(traverse_module_state->__pyx_tuple__26);
  Py_VISIT(traverse_module_state->__pyx_tuple__28);
  Py_VISIT(traverse_module_state->__pyx_codeobj__6);
  Py_VISIT(traverse_module_state->__pyx_codeobj__8);
  Py_VISIT(traverse_module_state->__pyx_codeobj__10);
  Py_VISIT(traverse_module_state->__pyx_codeobj__12);
  Py_VISIT(traverse_module_state->__pyx_codeobj__14);
  Py_VISIT(traverse_module_state->__pyx_codeobj__15);
  Py_VISIT(traverse_module_state->__pyx_codeobj__17);
  Py_VISIT(traverse_module_state->__pyx_codeobj__19);
  Py_VISIT(traverse_module_state->__pyx_codeobj__21);
  Py_VISIT(traverse_module_state->__pyx_codeobj__23);
  Py_VISIT(traverse_module_state->__pyx_codeobj__25);
  Py_VISIT(traverse_module_state->__pyx_codeobj__27);
  Py_VISIT(traverse_module_state->__pyx_codeobj__29);
  return 0;
}
#endif
/* #### Code section: module_state_defines ### */
#if CYTHON_COMPILING_IN_LIMITED_API
#define __pyx_d __pyx_mstate_global->__pyx_d
#define __pyx_b __pyx_mstate_global->__pyx_b
#define __pyx_cython_runtime __pyx_mstate_global->__pyx_cython_runtime
#define __pyx_empty_tuple __pyx_mstate_global->__pyx_empty_tuple
#define __pyx_empty_bytes __pyx_mstate_global->__pyx_empty_bytes
#define __pyx_empty_unicode __pyx_mstate_global->__pyx_empty_unicode
#ifdef __Pyx_CyFunction_USED
#define __pyx_CyFunctionType __pyx_mstate_global->__pyx_CyFunctionType
#endif
#ifdef __Pyx_FusedFunction_USED
#define __pyx_FusedFunctionType __pyx_mstate_global->__pyx_FusedFunctionType
#endif
#define __pyx_ptype_3ntl_6ntl_ZZ_PyZZ __pyx_mstate_global->__pyx_ptype_3ntl_6ntl_ZZ_PyZZ
#define __pyx_ptype_3ntl_7ntl_GF2_PyGF2 __pyx_mstate_global->__pyx_ptype_3ntl_7ntl_GF2_PyGF2
#define __pyx_ptype_3ntl_7ntl_ZZX_PyZZX __pyx_mstate_global->__pyx_ptype_3ntl_7ntl_ZZX_PyZZX
#define __pyx_ptype_3ntl_7ntl_ZZX_PyZZX_Class __pyx_mstate_global->__pyx_ptype_3ntl_7ntl_ZZX_PyZZX_Class
#define __pyx_ptype_3ntl_8ntl_GF2X_PyGF2X __pyx_mstate_global->__pyx_ptype_3ntl_8ntl_GF2X_PyGF2X
#define __pyx_ptype_3ntl_8ntl_GF2X_PyGF2X_Class __pyx_mstate_global->__pyx_ptype_3ntl_8ntl_GF2X_PyGF2X_Class
#define __pyx_ptype_7cpython_4type_type __pyx_mstate_global->__pyx_ptype_7cpython_4type_type
#define __pyx_ptype_3ntl_9ntl_GF2EX_PyGF2EX __pyx_mstate_global->__pyx_ptype_3ntl_9ntl_GF2EX_PyGF2EX
#define __pyx_ptype_3ntl_9ntl_GF2EX_PyGF2EX_Class __pyx_mstate_global->__pyx_ptype_3ntl_9ntl_GF2EX_PyGF2EX_Class
#define __pyx_ptype_3ntl_8ntl_GF2E_PyGF2E_Context __pyx_mstate_global->__pyx_ptype_3ntl_8ntl_GF2E_PyGF2E_Context
#define __pyx_type_3ntl_8ntl_GF2E_PyGF2E_Context __pyx_mstate_global->__pyx_type_3ntl_8ntl_GF2E_PyGF2E_Context
#define __pyx_ptype_3ntl_8ntl_GF2E_PyGF2E __pyx_mstate_global->__pyx_ptype_3ntl_8ntl_GF2E_PyGF2E
#define __pyx_type_3ntl_8ntl_GF2E_PyGF2E __pyx_mstate_global->__pyx_type_3ntl_8ntl_GF2E_PyGF2E
#define __pyx_n_s_AssertionError __pyx_mstate_global->__pyx_n_s_AssertionError
#define __pyx_n_s_NotImplemented __pyx_mstate_global->__pyx_n_s_NotImplemented
#define __pyx_n_s_PyGF2E __pyx_mstate_global->__pyx_n_s_PyGF2E
#define __pyx_n_s_PyGF2E_Context __pyx_mstate_global->__pyx_n_s_PyGF2E_Context
#define __pyx_n_s_PyGF2E_Context___reduce_cython __pyx_mstate_global->__pyx_n_s_PyGF2E_Context___reduce_cython
#define __pyx_n_s_PyGF2E_Context___setstate_cython __pyx_mstate_global->__pyx_n_s_PyGF2E_Context___setstate_cython
#define __pyx_n_s_PyGF2E_Context_modulus __pyx_mstate_global->__pyx_n_s_PyGF2E_Context_modulus
#define __pyx_n_s_PyGF2E_Context_random __pyx_mstate_global->__pyx_n_s_PyGF2E_Context_random
#define __pyx_n_s_PyGF2E_Ring __pyx_mstate_global->__pyx_n_s_PyGF2E_Ring
#define __pyx_n_s_PyGF2E___neq __pyx_mstate_global->__pyx_n_s_PyGF2E___neq
#define __pyx_n_s_PyGF2E___reduce_cython __pyx_mstate_global->__pyx_n_s_PyGF2E___reduce_cython
#define __pyx_n_s_PyGF2E___setstate_cython __pyx_mstate_global->__pyx_n_s_PyGF2E___setstate_cython
#define __pyx_n_s_PyGF2E__require_context __pyx_mstate_global->__pyx_n_s_PyGF2E__require_context
#define __pyx_n_s_PyGF2E_is_one __pyx_mstate_global->__pyx_n_s_PyGF2E_is_one
#define __pyx_n_s_PyGF2E_is_zero __pyx_mstate_global->__pyx_n_s_PyGF2E_is_zero
#define __pyx_n_s_PyGF2E_lift __pyx_mstate_global->__pyx_n_s_PyGF2E_lift
#define __pyx_n_s_PyGF2E_parent __pyx_mstate_global->__pyx_n_s_PyGF2E_parent
#define __pyx_n_s_Sequence __pyx_mstate_global->__pyx_n_s_Sequence
#define __pyx_n_s_TypeError __pyx_mstate_global->__pyx_n_s_TypeError
#define __pyx_n_s_ValueError __pyx_mstate_global->__pyx_n_s_ValueError
#define __pyx_n_s__30 __pyx_mstate_global->__pyx_n_s__30
#define __pyx_n_s__4 __pyx_mstate_global->__pyx_n_s__4
#define __pyx_n_s_arg __pyx_mstate_global->__pyx_n_s_arg
#define __pyx_n_s_arg_2 __pyx_mstate_global->__pyx_n_s_arg_2
#define __pyx_n_s_bytes __pyx_mstate_global->__pyx_n_s_bytes
#define __pyx_n_s_class_getitem __pyx_mstate_global->__pyx_n_s_class_getitem
#define __pyx_n_s_cline_in_traceback __pyx_mstate_global->__pyx_n_s_cline_in_traceback
#define __pyx_n_s_collections_abc __pyx_mstate_global->__pyx_n_s_collections_abc
#define __pyx_kp_u_conversion_failed __pyx_mstate_global->__pyx_kp_u_conversion_failed
#define __pyx_n_s_ctxt __pyx_mstate_global->__pyx_n_s_ctxt
#define __pyx_n_s_dict __pyx_mstate_global->__pyx_n_s_dict
#define __pyx_n_s_from_bytes __pyx_mstate_global->__pyx_n_s_from_bytes
#define __pyx_n_s_getstate __pyx_mstate_global->__pyx_n_s_getstate
#define __pyx_n_s_import __pyx_mstate_global->__pyx_n_s_import
#define __pyx_n_s_initializing __pyx_mstate_global->__pyx_n_s_initializing
#define __pyx_n_s_int __pyx_mstate_global->__pyx_n_s_int
#define __pyx_kp_u_invalid_modulus __pyx_mstate_global->__pyx_kp_u_invalid_modulus
#define __pyx_n_s_is_one __pyx_mstate_global->__pyx_n_s_is_one
#define __pyx_n_s_is_zero __pyx_mstate_global->__pyx_n_s_is_zero
#define __pyx_n_s_lift __pyx_mstate_global->__pyx_n_s_lift
#define __pyx_n_u_little __pyx_mstate_global->__pyx_n_u_little
#define __pyx_n_s_main __pyx_mstate_global->__pyx_n_s_main
#define __pyx_n_s_mod __pyx_mstate_global->__pyx_n_s_mod
#define __pyx_n_s_moduli __pyx_mstate_global->__pyx_n_s_moduli
#define __pyx_n_s_modulus __pyx_mstate_global->__pyx_n_s_modulus
#define __pyx_kp_u_modulus_does_not_match __pyx_mstate_global->__pyx_kp_u_modulus_does_not_match
#define __pyx_n_s_mul __pyx_mstate_global->__pyx_n_s_mul
#define __pyx_n_s_name __pyx_mstate_global->__pyx_n_s_name
#define __pyx_n_s_neq __pyx_mstate_global->__pyx_n_s_neq
#define __pyx_n_s_ntl_ntl_GF2E __pyx_mstate_global->__pyx_n_s_ntl_ntl_GF2E
#define __pyx_kp_s_ntl_ntl_GF2E_pyx __pyx_mstate_global->__pyx_kp_s_ntl_ntl_GF2E_pyx
#define __pyx_n_s_parent __pyx_mstate_global->__pyx_n_s_parent
#define __pyx_n_s_pyx_state __pyx_mstate_global->__pyx_n_s_pyx_state
#define __pyx_n_s_pyx_vtable __pyx_mstate_global->__pyx_n_s_pyx_vtable
#define __pyx_n_s_random __pyx_mstate_global->__pyx_n_s_random
#define __pyx_n_s_reduce __pyx_mstate_global->__pyx_n_s_reduce
#define __pyx_n_s_reduce_cython __pyx_mstate_global->__pyx_n_s_reduce_cython
#define __pyx_n_s_reduce_ex __pyx_mstate_global->__pyx_n_s_reduce_ex
#define __pyx_n_s_ref __pyx_mstate_global->__pyx_n_s_ref
#define __pyx_n_s_require_context __pyx_mstate_global->__pyx_n_s_require_context
#define __pyx_n_s_res __pyx_mstate_global->__pyx_n_s_res
#define __pyx_n_s_self __pyx_mstate_global->__pyx_n_s_self
#define __pyx_kp_s_self_ctxt_cannot_be_converted_to __pyx_mstate_global->__pyx_kp_s_self_ctxt_cannot_be_converted_to
#define __pyx_kp_s_self_val_cannot_be_converted_to __pyx_mstate_global->__pyx_kp_s_self_val_cannot_be_converted_to
#define __pyx_n_s_setstate __pyx_mstate_global->__pyx_n_s_setstate
#define __pyx_n_s_setstate_cython __pyx_mstate_global->__pyx_n_s_setstate_cython
#define __pyx_n_s_slots __pyx_mstate_global->__pyx_n_s_slots
#define __pyx_n_s_spec __pyx_mstate_global->__pyx_n_s_spec
#define __pyx_n_s_staticmethod __pyx_mstate_global->__pyx_n_s_staticmethod
#define __pyx_kp_s_stringsource __pyx_mstate_global->__pyx_kp_s_stringsource
#define __pyx_n_s_test __pyx_mstate_global->__pyx_n_s_test
#define __pyx_n_s_weakref __pyx_mstate_global->__pyx_n_s_weakref
#define __pyx_tuple_ __pyx_mstate_global->__pyx_tuple_
#define __pyx_tuple__2 __pyx_mstate_global->__pyx_tuple__2
#define __pyx_tuple__3 __pyx_mstate_global->__pyx_tuple__3
#define __pyx_tuple__5 __pyx_mstate_global->__pyx_tuple__5
#define __pyx_tuple__7 __pyx_mstate_global->__pyx_tuple__7
#define __pyx_tuple__9 __pyx_mstate_global->__pyx_tuple__9
#define __pyx_tuple__11 __pyx_mstate_global->__pyx_tuple__11
#define __pyx_tuple__13 __pyx_mstate_global->__pyx_tuple__13
#define __pyx_tuple__16 __pyx_mstate_global->__pyx_tuple__16
#define __pyx_tuple__18 __pyx_mstate_global->__pyx_tuple__18
#define __pyx_tuple__20 __pyx_mstate_global->__pyx_tuple__20
#define __pyx_tuple__22 __pyx_mstate_global->__pyx_tuple__22
#define __pyx_tuple__24 __pyx_mstate_global->__pyx_tuple__24
#define __pyx_tuple__26 __pyx_mstate_global->__pyx_tuple__26
#define __pyx_tuple__28 __pyx_mstate_global->__pyx_tuple__28
#define __pyx_codeobj__6 __pyx_mstate_global->__pyx_codeobj__6
#define __pyx_codeobj__8 __pyx_mstate_global->__pyx_codeobj__8
#define __pyx_codeobj__10 __pyx_mstate_global->__pyx_codeobj__10
#define __pyx_codeobj__12 __pyx_mstate_global->__pyx_codeobj__12
#define __pyx_codeobj__14 __pyx_mstate_global->__pyx_codeobj__14
#define __pyx_codeobj__15 __pyx_mstate_global->__pyx_codeobj__15
#define __pyx_codeobj__17 __pyx_mstate_global->__pyx_codeobj__17
#define __pyx_codeobj__19 __pyx_mstate_global->__pyx_codeobj__19
#define __pyx_codeobj__21 __pyx_mstate_global->__pyx_codeobj__21
#define __pyx_codeobj__23 __pyx_mstate_global->__pyx_codeobj__23
#define __pyx_codeobj__25 __pyx_mstate_global->__pyx_codeobj__25
#define __pyx_codeobj__27 __pyx_mstate_global->__pyx_codeobj__27
#define __pyx_codeobj__29 __pyx_mstate_global->__pyx_codeobj__29
#endif
/* #### Code section: module_code ### */

/* "ntl/ntl_GF2E.pyx":25
 * cdef class PyGF2E_Context():
 * 
 *   cdef void restore(self):             # <<<<<<<<<<<<<<
 *     #IF SUBDOUBLE (= "False")
 * 
 */

static void __pyx_f_3ntl_8ntl_GF2E_14PyGF2E_Context_restore(struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E_Context *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("restore", 0);

  /* "ntl/ntl_GF2E.pyx":28
 *     #IF SUBDOUBLE (= "False")
 * 
 *     self.ctxt.restore()             # <<<<<<<<<<<<<<
 * 
 *   _moduli = dict()
 */
  __pyx_v_self->ctxt.restore();

  /* "ntl/ntl_GF2E.pyx":25
 * cdef class PyGF2E_Context():
 * 
 *   cdef void restore(self):             # <<<<<<<<<<<<<<
 *     #IF SUBDOUBLE (= "False")
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "ntl/ntl_GF2E.pyx":33
 * 
 *   @staticmethod
 *   cdef PyGF2E_Context _get(PyGF2X m):             # <<<<<<<<<<<<<<
 *     #IF BASETYPE == "ZZ" (= "False")
 * 
 */

static struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E_Context *__pyx_f_3ntl_8ntl_GF2E_14PyGF2E_Context__get(struct __pyx_obj_3ntl_8ntl_GF2X_PyGF2X *__pyx_v_m) {
  struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E_Context *__pyx_v_ctxt = NULL;
  struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E_Context *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get", 0);

  /* "ntl/ntl_GF2E.pyx":36
 *     #IF BASETYPE == "ZZ" (= "False")
 * 
 *     if m.deg() < 1:             # <<<<<<<<<<<<<<
 *     #ENDIF <NONE> (= "False")
 *       raise ValueError("invalid modulus")
 */
  __pyx_t_1 = ((((struct __pyx_vtabstruct_3ntl_8ntl_GF2X_PyGF2X *)__pyx_v_m->__pyx_vtab)->deg(__pyx_v_m, 0) < 1) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "ntl/ntl_GF2E.pyx":38
 *     if m.deg() < 1:
 *     #ENDIF <NONE> (= "False")
 *       raise ValueError("invalid modulus")             # <<<<<<<<<<<<<<
 *     if m in PyGF2E_Context._moduli:
 *       ctxt = <PyGF2E_Context>PyGF2E_Context._moduli[m]()
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 38, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 38, __pyx_L1_error)

    /* "ntl/ntl_GF2E.pyx":36
 *     #IF BASETYPE == "ZZ" (= "False")
 * 
 *     if m.deg() < 1:             # <<<<<<<<<<<<<<
 *     #ENDIF <NONE> (= "False")
 *       raise ValueError("invalid modulus")
 */
  }

  /* "ntl/ntl_GF2E.pyx":39
 *     #ENDIF <NONE> (= "False")
 *       raise ValueError("invalid modulus")
 *     if m in PyGF2E_Context._moduli:             # <<<<<<<<<<<<<<
 *       ctxt = <PyGF2E_Context>PyGF2E_Context._moduli[m]()
 *       if ctxt is not None:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_3ntl_8ntl_GF2E_PyGF2E_Context), __pyx_n_s_moduli); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 39, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = (__Pyx_PySequence_ContainsTF(((PyObject *)__pyx_v_m), __pyx_t_2, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 39, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = (__pyx_t_1 != 0);
  if (__pyx_t_3) {

    /* "ntl/ntl_GF2E.pyx":40
 *       raise ValueError("invalid modulus")
 *     if m in PyGF2E_Context._moduli:
 *       ctxt = <PyGF2E_Context>PyGF2E_Context._moduli[m]()             # <<<<<<<<<<<<<<
 *       if ctxt is not None:
 *         return ctxt
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_3ntl_8ntl_GF2E_PyGF2E_Context), __pyx_n_s_moduli); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 40, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetItem(__pyx_t_4, ((PyObject *)__pyx_v_m)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 40, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_6 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[1] = {__pyx_t_4, };
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_6, 0+__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 40, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __pyx_t_5 = __pyx_t_2;
    __Pyx_INCREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_ctxt = ((struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E_Context *)__pyx_t_5);
    __pyx_t_5 = 0;

    /* "ntl/ntl_GF2E.pyx":41
 *     if m in PyGF2E_Context._moduli:
 *       ctxt = <PyGF2E_Context>PyGF2E_Context._moduli[m]()
 *       if ctxt is not None:             # <<<<<<<<<<<<<<
 *         return ctxt
 *     ctxt = PyGF2E_Context(m)
 */
    __pyx_t_3 = (((PyObject *)__pyx_v_ctxt) != Py_None);
    __pyx_t_1 = (__pyx_t_3 != 0);
    if (__pyx_t_1) {

      /* "ntl/ntl_GF2E.pyx":42
 *       ctxt = <PyGF2E_Context>PyGF2E_Context._moduli[m]()
 *       if ctxt is not None:
 *         return ctxt             # <<<<<<<<<<<<<<
 *     ctxt = PyGF2E_Context(m)
 *     PyGF2E_Context._moduli[m] = weakref.ref(ctxt)
 */
      __Pyx_XDECREF((PyObject *)__pyx_r);
      __Pyx_INCREF((PyObject *)__pyx_v_ctxt);
      __pyx_r = __pyx_v_ctxt;
      goto __pyx_L0;

      /* "ntl/ntl_GF2E.pyx":41
 *     if m in PyGF2E_Context._moduli:
 *       ctxt = <PyGF2E_Context>PyGF2E_Context._moduli[m]()
 *       if ctxt is not None:             # <<<<<<<<<<<<<<
 *         return ctxt
 *     ctxt = PyGF2E_Context(m)
 */
    }

    /* "ntl/ntl_GF2E.pyx":39
 *     #ENDIF <NONE> (= "False")
 *       raise ValueError("invalid modulus")
 *     if m in PyGF2E_Context._moduli:             # <<<<<<<<<<<<<<
 *       ctxt = <PyGF2E_Context>PyGF2E_Context._moduli[m]()
 *       if ctxt is not None:
 */
  }

  /* "ntl/ntl_GF2E.pyx":43
 *       if ctxt is not None:
 *         return ctxt
 *     ctxt = PyGF2E_Context(m)             # <<<<<<<<<<<<<<
 *     PyGF2E_Context._moduli[m] = weakref.ref(ctxt)
 *     return ctxt
 */
  __pyx_t_5 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_3ntl_8ntl_GF2E_PyGF2E_Context), ((PyObject *)__pyx_v_m)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 43, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_XDECREF_SET(__pyx_v_ctxt, ((struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E_Context *)__pyx_t_5));
  __pyx_t_5 = 0;

  /* "ntl/ntl_GF2E.pyx":44
 *         return ctxt
 *     ctxt = PyGF2E_Context(m)
 *     PyGF2E_Context._moduli[m] = weakref.ref(ctxt)             # <<<<<<<<<<<<<<
 *     return ctxt
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_weakref); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_ref); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_6 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, ((PyObject *)__pyx_v_ctxt)};
    __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 44, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_3ntl_8ntl_GF2E_PyGF2E_Context), __pyx_n_s_moduli); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (unlikely(PyObject_SetItem(__pyx_t_4, ((PyObject *)__pyx_v_m), __pyx_t_5) < 0)) __PYX_ERR(0, 44, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "ntl/ntl_GF2E.pyx":45
 *     ctxt = PyGF2E_Context(m)
 *     PyGF2E_Context._moduli[m] = weakref.ref(ctxt)
 *     return ctxt             # <<<<<<<<<<<<<<
 * 
 *   def __init__(self, PyGF2X mod):
 */
  __Pyx_XDECREF((PyObject *)__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_ctxt);
  __pyx_r = __pyx_v_ctxt;
  goto __pyx_L0;

  /* "ntl/ntl_GF2E.pyx":33
 * 
 *   @staticmethod
 *   cdef PyGF2E_Context _get(PyGF2X m):             # <<<<<<<<<<<<<<
 *     #IF BASETYPE == "ZZ" (= "False")
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("ntl.ntl_GF2E.PyGF2E_Context._get", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_ctxt);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ntl/ntl_GF2E.pyx":47
 *     return ctxt
 * 
 *   def __init__(self, PyGF2X mod):             # <<<<<<<<<<<<<<
 *     self.ctxt = GF2E_Context_c(mod.val)
 *     self._mod = mod
 */

/* Python wrapper */
static int __pyx_pw_3ntl_8ntl_GF2E_14PyGF2E_Context_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_3ntl_8ntl_GF2E_14PyGF2E_Context_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_3ntl_8ntl_GF2X_PyGF2X *__pyx_v_mod = 0;
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_mod,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_mod,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_mod)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 47, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__init__") < 0)) __PYX_ERR(0, 47, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
    }
    __pyx_v_mod = ((struct __pyx_obj_3ntl_8ntl_GF2X_PyGF2X *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 47, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ntl.ntl_GF2E.PyGF2E_Context.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mod), __pyx_ptype_3ntl_8ntl_GF2X_PyGF2X, 1, "mod", 0))) __PYX_ERR(0, 47, __pyx_L1_error)
  __pyx_r = __pyx_pf_3ntl_8ntl_GF2E_14PyGF2E_Context___init__(((struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E_Context *)__pyx_v_self), __pyx_v_mod);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3ntl_8ntl_GF2E_14PyGF2E_Context___init__(struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E_Context *__pyx_v_self, struct __pyx_obj_3ntl_8ntl_GF2X_PyGF2X *__pyx_v_mod) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "ntl/ntl_GF2E.pyx":48
 * 
 *   def __init__(self, PyGF2X mod):
 *     self.ctxt = GF2E_Context_c(mod.val)             # <<<<<<<<<<<<<<
 *     self._mod = mod
 * 
 */
  __pyx_v_self->ctxt = GF2EContext(__pyx_v_mod->val);

  /* "ntl/ntl_GF2E.pyx":49
 *   def __init__(self, PyGF2X mod):
 *     self.ctxt = GF2E_Context_c(mod.val)
 *     self._mod = mod             # <<<<<<<<<<<<<<
 * 
 *   cpdef PyGF2X modulus(self):
 */
  __Pyx_INCREF((PyObject *)__pyx_v_mod);
  __Pyx_GIVEREF((PyObject *)__pyx_v_mod);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->_mod);
  __Pyx_DECREF((PyObject *)__pyx_v_self->_mod);
  __pyx_v_self->_mod = __pyx_v_mod;

  /* "ntl/ntl_GF2E.pyx":47
 *     return ctxt
 * 
 *   def __init__(self, PyGF2X mod):             # <<<<<<<<<<<<<<
 *     self.ctxt = GF2E_Context_c(mod.val)
 *     self._mod = mod
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ntl/ntl_GF2E.pyx":51
 *     self._mod = mod
 * 
 *   cpdef PyGF2X modulus(self):             # <<<<<<<<<<<<<<
 *     return self._mod
 * 
 */

static PyObject *__pyx_pw_3ntl_8ntl_GF2E_14PyGF2E_Context_3modulus(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static struct __pyx_obj_3ntl_8ntl_GF2X_PyGF2X *__pyx_f_3ntl_8ntl_GF2E_14PyGF2E_Context_modulus(struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E_Context *__pyx_v_self, int __pyx_skip_dispatch) {
  struct __pyx_obj_3ntl_8ntl_GF2X_PyGF2X *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("modulus", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || __Pyx_PyType_HasFeature(Py_TYPE(((PyObject *)__pyx_v_self)), (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_modulus); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 51, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_3ntl_8ntl_GF2E_14PyGF2E_Context_3modulus)) {
        __Pyx_XDECREF((PyObject *)__pyx_r);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        __pyx_t_5 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
            __pyx_t_5 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[1] = {__pyx_t_4, };
          __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 51, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        }
        if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_3ntl_8ntl_GF2X_PyGF2X))))) __PYX_ERR(0, 51, __pyx_L1_error)
        __pyx_r = ((struct __pyx_obj_3ntl_8ntl_GF2X_PyGF2X *)__pyx_t_2);
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "ntl/ntl_GF2E.pyx":52
 * 
 *   cpdef PyGF2X modulus(self):
 *     return self._mod             # <<<<<<<<<<<<<<
 * 
 *   def __call__(PyGF2E_Context self, *args):
 */
  __Pyx_XDECREF((PyObject *)__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_self->_mod);
  __pyx_r = __pyx_v_self->_mod;
  goto __pyx_L0;

  /* "ntl/ntl_GF2E.pyx":51
 *     self._mod = mod
 * 
 *   cpdef PyGF2X modulus(self):             # <<<<<<<<<<<<<<
 *     return self._mod
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("ntl.ntl_GF2E.PyGF2E_Context.modulus", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_3ntl_8ntl_GF2E_14PyGF2E_Context_3modulus(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_3ntl_8ntl_GF2E_14PyGF2E_Context_3modulus = {"modulus", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ntl_8ntl_GF2E_14PyGF2E_Context_3modulus, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_3ntl_8ntl_GF2E_14PyGF2E_Context_3modulus(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("modulus (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("modulus", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "modulus", 0))) return NULL;
  __pyx_r = __pyx_pf_3ntl_8ntl_GF2E_14PyGF2E_Context_2modulus(((struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E_Context *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ntl_8ntl_GF2E_14PyGF2E_Context_2modulus(struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E_Context *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("modulus", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_3ntl_8ntl_GF2E_14PyGF2E_Context_modulus(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 51, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ntl.ntl_GF2E.PyGF2E_Context.modulus", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ntl/ntl_GF2E.pyx":54
 *     return self._mod
 * 
 *   def __call__(PyGF2E_Context self, *args):             # <<<<<<<<<<<<<<
 *     return PyGF2E(self, *args)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ntl_8ntl_GF2E_14PyGF2E_Context_5__call__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_3ntl_8ntl_GF2E_14PyGF2E_Context_5__call__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__call__ (wrapper)", 0);
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_VARARGS(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__call__", 0))) return NULL;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_3ntl_8ntl_GF2E_14PyGF2E_Context_4__call__(((struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E_Context *)__pyx_v_self), __pyx_v_args);

  /* function exit code */
  __Pyx_DECREF(__pyx_v_args);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ntl_8ntl_GF2E_14PyGF2E_Context_4__call__(struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E_Context *__pyx_v_self, PyObject *__pyx_v_args) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__call__", 0);

  /* "ntl/ntl_GF2E.pyx":55
 * 
 *   def __call__(PyGF2E_Context self, *args):
 *     return PyGF2E(self, *args)             # <<<<<<<<<<<<<<
 * 
 *   def __eq__(PyGF2E_Context self, PyGF2E_Context other):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_v_self);
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self));
  __pyx_t_2 = PyNumber_Add(__pyx_t_1, __pyx_v_args); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_3ntl_8ntl_GF2E_PyGF2E), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ntl/ntl_GF2E.pyx":54
 *     return self._mod
 * 
 *   def __call__(PyGF2E_Context self, *args):             # <<<<<<<<<<<<<<
 *     return PyGF2E(self, *args)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("ntl.ntl_GF2E.PyGF2E_Context.__call__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ntl/ntl_GF2E.pyx":57
 *     return PyGF2E(self, *args)
 * 
 *   def __eq__(PyGF2E_Context self, PyGF2E_Context other):             # <<<<<<<<<<<<<<
 *     return other._mod == self._mod
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ntl_8ntl_GF2E_14PyGF2E_Context_7__eq__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_3ntl_8ntl_GF2E_14PyGF2E_Context_7__eq__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__eq__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_3ntl_8ntl_GF2E_PyGF2E_Context, 1, "other", 0))) __PYX_ERR(0, 57, __pyx_L1_error)
  __pyx_r = __pyx_pf_3ntl_8ntl_GF2E_14PyGF2E_Context_6__eq__(((struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E_Context *)__pyx_v_self), ((struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E_Context *)__pyx_v_other));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ntl_8ntl_GF2E_14PyGF2E_Context_6__eq__(struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E_Context *__pyx_v_self, struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E_Context *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__eq__", 0);

  /* "ntl/ntl_GF2E.pyx":58
 * 
 *   def __eq__(PyGF2E_Context self, PyGF2E_Context other):
 *     return other._mod == self._mod             # <<<<<<<<<<<<<<
 * 
 *   def random(PyGF2E_Context self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyObject_RichCompare(((PyObject *)__pyx_v_other->_mod), ((PyObject *)__pyx_v_self->_mod), Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 58, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ntl/ntl_GF2E.pyx":57
 *     return PyGF2E(self, *args)
 * 
 *   def __eq__(PyGF2E_Context self, PyGF2E_Context other):             # <<<<<<<<<<<<<<
 *     return other._mod == self._mod
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ntl.ntl_GF2E.PyGF2E_Context.__eq__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ntl/ntl_GF2E.pyx":60
 *     return other._mod == self._mod
 * 
 *   def random(PyGF2E_Context self):             # <<<<<<<<<<<<<<
 *     #MACRO CDEF_RES(varname='self') (= "True")
 *     cdef PyGF2E res = PyGF2E.__new__(PyGF2E)
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ntl_8ntl_GF2E_14PyGF2E_Context_9random(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_3ntl_8ntl_GF2E_14PyGF2E_Context_9random = {"random", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ntl_8ntl_GF2E_14PyGF2E_Context_9random, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_3ntl_8ntl_GF2E_14PyGF2E_Context_9random(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("random (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("random", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "random", 0))) return NULL;
  __pyx_r = __pyx_pf_3ntl_8ntl_GF2E_14PyGF2E_Context_8random(((struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E_Context *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ntl_8ntl_GF2E_14PyGF2E_Context_8random(struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E_Context *__pyx_v_self) {
  struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *__pyx_v_res = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("random", 0);

  /* "ntl/ntl_GF2E.pyx":62
 *   def random(PyGF2E_Context self):
 *     #MACRO CDEF_RES(varname='self') (= "True")
 *     cdef PyGF2E res = PyGF2E.__new__(PyGF2E)             # <<<<<<<<<<<<<<
 *     res.ctxt = self
 *     self.restore()
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_3ntl_8ntl_GF2E_PyGF2E(((PyTypeObject *)__pyx_ptype_3ntl_8ntl_GF2E_PyGF2E), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 62, __pyx_L1_error)
  __Pyx_GOTREF((PyObject *)__pyx_t_1);
  __pyx_v_res = ((struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ntl/ntl_GF2E.pyx":63
 *     #MACRO CDEF_RES(varname='self') (= "True")
 *     cdef PyGF2E res = PyGF2E.__new__(PyGF2E)
 *     res.ctxt = self             # <<<<<<<<<<<<<<
 *     self.restore()
 * 
 */
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_v_self);
  __Pyx_GOTREF((PyObject *)__pyx_v_res->ctxt);
  __Pyx_DECREF((PyObject *)__pyx_v_res->ctxt);
  __pyx_v_res->ctxt = __pyx_v_self;

  /* "ntl/ntl_GF2E.pyx":64
 *     cdef PyGF2E res = PyGF2E.__new__(PyGF2E)
 *     res.ctxt = self
 *     self.restore()             # <<<<<<<<<<<<<<
 * 
 *     _ntlGF2E_random(res.val)
 */
  ((struct __pyx_vtabstruct_3ntl_8ntl_GF2E_PyGF2E_Context *)__pyx_v_self->__pyx_vtab)->restore(__pyx_v_self);

  /* "ntl/ntl_GF2E.pyx":66
 *     self.restore()
 * 
 *     _ntlGF2E_random(res.val)             # <<<<<<<<<<<<<<
 *     return res
 * 
 */
  random(__pyx_v_res->val);

  /* "ntl/ntl_GF2E.pyx":67
 * 
 *     _ntlGF2E_random(res.val)
 *     return res             # <<<<<<<<<<<<<<
 * 
 *   @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_res);
  __pyx_r = ((PyObject *)__pyx_v_res);
  goto __pyx_L0;

  /* "ntl/ntl_GF2E.pyx":60
 *     return other._mod == self._mod
 * 
 *   def random(PyGF2E_Context self):             # <<<<<<<<<<<<<<
 *     #MACRO CDEF_RES(varname='self') (= "True")
 *     cdef PyGF2E res = PyGF2E.__new__(PyGF2E)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ntl.ntl_GF2E.PyGF2E_Context.random", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_res);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ntl/ntl_GF2E.pyx":69
 *     return res
 * 
 *   @property             # <<<<<<<<<<<<<<
 *   def P(PyGF2E_Context self):
 *     return PyGF2EX_Class(self)
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ntl_8ntl_GF2E_14PyGF2E_Context_1P_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3ntl_8ntl_GF2E_14PyGF2E_Context_1P_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3ntl_8ntl_GF2E_14PyGF2E_Context_1P___get__(((struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E_Context *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ntl_8ntl_GF2E_14PyGF2E_Context_1P___get__(struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E_Context *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "ntl/ntl_GF2E.pyx":71
 *   @property
 *   def P(PyGF2E_Context self):
 *     return PyGF2EX_Class(self)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_3ntl_9ntl_GF2EX_PyGF2EX_Class), ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ntl/ntl_GF2E.pyx":69
 *     return res
 * 
 *   @property             # <<<<<<<<<<<<<<
 *   def P(PyGF2E_Context self):
 *     return PyGF2EX_Class(self)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ntl.ntl_GF2E.PyGF2E_Context.P.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.ctxt cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ntl_8ntl_GF2E_14PyGF2E_Context_11__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_3ntl_8ntl_GF2E_14PyGF2E_Context_11__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ntl_8ntl_GF2E_14PyGF2E_Context_11__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_3ntl_8ntl_GF2E_14PyGF2E_Context_11__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_3ntl_8ntl_GF2E_14PyGF2E_Context_10__reduce_cython__(((struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E_Context *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ntl_8ntl_GF2E_14PyGF2E_Context_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E_Context *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "self.ctxt cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self.ctxt cannot be converted to a Python object for pickling"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self_ctxt_cannot_be_converted_to, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.ctxt cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("ntl.ntl_GF2E.PyGF2E_Context.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.ctxt cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.ctxt cannot be converted to a Python object for pickling"
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ntl_8ntl_GF2E_14PyGF2E_Context_13__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_3ntl_8ntl_GF2E_14PyGF2E_Context_13__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ntl_8ntl_GF2E_14PyGF2E_Context_13__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_3ntl_8ntl_GF2E_14PyGF2E_Context_13__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ntl.ntl_GF2E.PyGF2E_Context.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3ntl_8ntl_GF2E_14PyGF2E_Context_12__setstate_cython__(((struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E_Context *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ntl_8ntl_GF2E_14PyGF2E_Context_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E_Context *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError, "self.ctxt cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self.ctxt cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self_ctxt_cannot_be_converted_to, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.ctxt cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.ctxt cannot be converted to a Python object for pickling"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("ntl.ntl_GF2E.PyGF2E_Context.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ntl/ntl_GF2E.pyx":74
 * 
 * 
 * cpdef PyGF2E_Ring(arg):             # <<<<<<<<<<<<<<
 *   cdef PyGF2X m = <PyGF2X>arg if isinstance(arg, PyGF2X) else PyGF2X(arg)
 *   return PyGF2E_Context._get(m)
 */

static PyObject *__pyx_pw_3ntl_8ntl_GF2E_1PyGF2E_Ring(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyObject *__pyx_f_3ntl_8ntl_GF2E_PyGF2E_Ring(PyObject *__pyx_v_arg, CYTHON_UNUSED int __pyx_skip_dispatch) {
  struct __pyx_obj_3ntl_8ntl_GF2X_PyGF2X *__pyx_v_m = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyGF2E_Ring", 0);

  /* "ntl/ntl_GF2E.pyx":75
 * 
 * cpdef PyGF2E_Ring(arg):
 *   cdef PyGF2X m = <PyGF2X>arg if isinstance(arg, PyGF2X) else PyGF2X(arg)             # <<<<<<<<<<<<<<
 *   return PyGF2E_Context._get(m)
 * 
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_arg, __pyx_ptype_3ntl_8ntl_GF2X_PyGF2X); 
  if ((__pyx_t_2 != 0)) {
    __Pyx_INCREF((PyObject *)((struct __pyx_obj_3ntl_8ntl_GF2X_PyGF2X *)__pyx_v_arg));
    __pyx_t_1 = __pyx_v_arg;
  } else {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_3ntl_8ntl_GF2X_PyGF2X), __pyx_v_arg); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 75, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;
  }
  __pyx_v_m = ((struct __pyx_obj_3ntl_8ntl_GF2X_PyGF2X *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ntl/ntl_GF2E.pyx":76
 * cpdef PyGF2E_Ring(arg):
 *   cdef PyGF2X m = <PyGF2X>arg if isinstance(arg, PyGF2X) else PyGF2X(arg)
 *   return PyGF2E_Context._get(m)             # <<<<<<<<<<<<<<
 * 
 * #ENDIF <NONE> (= "False")
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_3ntl_8ntl_GF2E_14PyGF2E_Context__get(__pyx_v_m)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 76, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ntl/ntl_GF2E.pyx":74
 * 
 * 
 * cpdef PyGF2E_Ring(arg):             # <<<<<<<<<<<<<<
 *   cdef PyGF2X m = <PyGF2X>arg if isinstance(arg, PyGF2X) else PyGF2X(arg)
 *   return PyGF2E_Context._get(m)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("ntl.ntl_GF2E.PyGF2E_Ring", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_m);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_3ntl_8ntl_GF2E_1PyGF2E_Ring(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_3ntl_8ntl_GF2E_1PyGF2E_Ring = {"PyGF2E_Ring", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ntl_8ntl_GF2E_1PyGF2E_Ring, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_3ntl_8ntl_GF2E_1PyGF2E_Ring(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_arg = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("PyGF2E_Ring (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_arg,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_arg,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_arg)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 74, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "PyGF2E_Ring") < 0)) __PYX_ERR(0, 74, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_arg = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("PyGF2E_Ring", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 74, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ntl.ntl_GF2E.PyGF2E_Ring", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3ntl_8ntl_GF2E_PyGF2E_Ring(__pyx_self, __pyx_v_arg);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ntl_8ntl_GF2E_PyGF2E_Ring(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_arg) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyGF2E_Ring", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_3ntl_8ntl_GF2E_PyGF2E_Ring(__pyx_v_arg, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 74, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ntl.ntl_GF2E.PyGF2E_Ring", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ntl/ntl_GF2E.pyx":87
 *   __slots__ = ()
 * 
 *   @staticmethod             # <<<<<<<<<<<<<<
 *   def _require_context():
 *     #IF HASCONTEXT (= "True")
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ntl_8ntl_GF2E_6PyGF2E_1_require_context(CYTHON_UNUSED PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_3ntl_8ntl_GF2E_6PyGF2E_1_require_context = {"_require_context", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ntl_8ntl_GF2E_6PyGF2E_1_require_context, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_3ntl_8ntl_GF2E_6PyGF2E_1_require_context(CYTHON_UNUSED PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_require_context (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("_require_context", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "_require_context", 0))) return NULL;
  __pyx_r = __pyx_pf_3ntl_8ntl_GF2E_6PyGF2E__require_context();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ntl_8ntl_GF2E_6PyGF2E__require_context(void) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_require_context", 0);

  /* "ntl/ntl_GF2E.pyx":90
 *   def _require_context():
 *     #IF HASCONTEXT (= "True")
 *     return True             # <<<<<<<<<<<<<<
 *     #ELSE <NONE> (= "False")
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(Py_True);
  __pyx_r = Py_True;
  goto __pyx_L0;

  /* "ntl/ntl_GF2E.pyx":87
 *   __slots__ = ()
 * 
 *   @staticmethod             # <<<<<<<<<<<<<<
 *   def _require_context():
 *     #IF HASCONTEXT (= "True")
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ntl/ntl_GF2E.pyx":95
 * 
 * 
 *   def __neg__(PyGF2E self):             # <<<<<<<<<<<<<<
 *     #MACRO CDEF_RES() (= "True")
 *     cdef PyGF2E res = PyGF2E.__new__(PyGF2E)
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ntl_8ntl_GF2E_6PyGF2E_3__neg__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3ntl_8ntl_GF2E_6PyGF2E_3__neg__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__neg__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3ntl_8ntl_GF2E_6PyGF2E_2__neg__(((struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ntl_8ntl_GF2E_6PyGF2E_2__neg__(struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *__pyx_v_self) {
  struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *__pyx_v_res = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__neg__", 0);

  /* "ntl/ntl_GF2E.pyx":97
 *   def __neg__(PyGF2E self):
 *     #MACRO CDEF_RES() (= "True")
 *     cdef PyGF2E res = PyGF2E.__new__(PyGF2E)             # <<<<<<<<<<<<<<
 *     res.ctxt = self.ctxt
 *     self.ctxt.restore()
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_3ntl_8ntl_GF2E_PyGF2E(((PyTypeObject *)__pyx_ptype_3ntl_8ntl_GF2E_PyGF2E), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 97, __pyx_L1_error)
  __Pyx_GOTREF((PyObject *)__pyx_t_1);
  __pyx_v_res = ((struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ntl/ntl_GF2E.pyx":98
 *     #MACRO CDEF_RES() (= "True")
 *     cdef PyGF2E res = PyGF2E.__new__(PyGF2E)
 *     res.ctxt = self.ctxt             # <<<<<<<<<<<<<<
 *     self.ctxt.restore()
 * 
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_self->ctxt);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF((PyObject *)__pyx_v_res->ctxt);
  __Pyx_DECREF((PyObject *)__pyx_v_res->ctxt);
  __pyx_v_res->ctxt = ((struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E_Context *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ntl/ntl_GF2E.pyx":99
 *     cdef PyGF2E res = PyGF2E.__new__(PyGF2E)
 *     res.ctxt = self.ctxt
 *     self.ctxt.restore()             # <<<<<<<<<<<<<<
 * 
 *     sig_on()
 */
  ((struct __pyx_vtabstruct_3ntl_8ntl_GF2E_PyGF2E_Context *)__pyx_v_self->ctxt->__pyx_vtab)->restore(__pyx_v_self->ctxt);

  /* "ntl/ntl_GF2E.pyx":101
 *     self.ctxt.restore()
 * 
 *     sig_on()             # <<<<<<<<<<<<<<
 *     _ntlGF2E_negate(res.val, self.val)
 *     sig_off()
 */
  __pyx_t_2 = sig_on(); if (unlikely(__pyx_t_2 == ((int)0))) __PYX_ERR(0, 101, __pyx_L1_error)

  /* "ntl/ntl_GF2E.pyx":102
 * 
 *     sig_on()
 *     _ntlGF2E_negate(res.val, self.val)             # <<<<<<<<<<<<<<
 *     sig_off()
 *     return res
 */
  negate(__pyx_v_res->val, __pyx_v_self->val);

  /* "ntl/ntl_GF2E.pyx":103
 *     sig_on()
 *     _ntlGF2E_negate(res.val, self.val)
 *     sig_off()             # <<<<<<<<<<<<<<
 *     return res
 * 
 */
  sig_off();

  /* "ntl/ntl_GF2E.pyx":104
 *     _ntlGF2E_negate(res.val, self.val)
 *     sig_off()
 *     return res             # <<<<<<<<<<<<<<
 * 
 *   def __add__(PyGF2E self, _arg):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_res);
  __pyx_r = ((PyObject *)__pyx_v_res);
  goto __pyx_L0;

  /* "ntl/ntl_GF2E.pyx":95
 * 
 * 
 *   def __neg__(PyGF2E self):             # <<<<<<<<<<<<<<
 *     #MACRO CDEF_RES() (= "True")
 *     cdef PyGF2E res = PyGF2E.__new__(PyGF2E)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ntl.ntl_GF2E.PyGF2E.__neg__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_res);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ntl/ntl_GF2E.pyx":106
 *     return res
 * 
 *   def __add__(PyGF2E self, _arg):             # <<<<<<<<<<<<<<
 *     #MACRO CONVERT_ARG() (= "True")
 *     cdef PyGF2E arg = self._convert_arg(_arg)
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ntl_8ntl_GF2E_6PyGF2E_5__add__(PyObject *__pyx_v_self, PyObject *__pyx_v__arg); /*proto*/
static PyObject *__pyx_pw_3ntl_8ntl_GF2E_6PyGF2E_5__add__(PyObject *__pyx_v_self, PyObject *__pyx_v__arg) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__add__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_self), __pyx_ptype_3ntl_8ntl_GF2E_PyGF2E, 1, "self", 0))) __PYX_ERR(0, 106, __pyx_L1_error)
  __pyx_r = __pyx_pf_3ntl_8ntl_GF2E_6PyGF2E_4__add__(((struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *)__pyx_v_self), ((PyObject *)__pyx_v__arg));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ntl_8ntl_GF2E_6PyGF2E_4__add__(struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *__pyx_v_self, PyObject *__pyx_v__arg) {
  struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *__pyx_v_arg = 0;
  struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *__pyx_v_res = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__add__", 0);

  /* "ntl/ntl_GF2E.pyx":108
 *   def __add__(PyGF2E self, _arg):
 *     #MACRO CONVERT_ARG() (= "True")
 *     cdef PyGF2E arg = self._convert_arg(_arg)             # <<<<<<<<<<<<<<
 *     if arg is None:
 *       return NotImplemented
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_3ntl_8ntl_GF2E_PyGF2E *)__pyx_v_self->__pyx_vtab)->_convert_arg(__pyx_v_self, __pyx_v__arg)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_arg = ((struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ntl/ntl_GF2E.pyx":109
 *     #MACRO CONVERT_ARG() (= "True")
 *     cdef PyGF2E arg = self._convert_arg(_arg)
 *     if arg is None:             # <<<<<<<<<<<<<<
 *       return NotImplemented
 * 
 */
  __pyx_t_2 = (((PyObject *)__pyx_v_arg) == Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "ntl/ntl_GF2E.pyx":110
 *     cdef PyGF2E arg = self._convert_arg(_arg)
 *     if arg is None:
 *       return NotImplemented             # <<<<<<<<<<<<<<
 * 
 *     #MACRO CDEF_RES() (= "True")
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_builtin_NotImplemented);
    __pyx_r = __pyx_builtin_NotImplemented;
    goto __pyx_L0;

    /* "ntl/ntl_GF2E.pyx":109
 *     #MACRO CONVERT_ARG() (= "True")
 *     cdef PyGF2E arg = self._convert_arg(_arg)
 *     if arg is None:             # <<<<<<<<<<<<<<
 *       return NotImplemented
 * 
 */
  }

  /* "ntl/ntl_GF2E.pyx":113
 * 
 *     #MACRO CDEF_RES() (= "True")
 *     cdef PyGF2E res = PyGF2E.__new__(PyGF2E)             # <<<<<<<<<<<<<<
 *     res.ctxt = self.ctxt
 *     self.ctxt.restore()
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_3ntl_8ntl_GF2E_PyGF2E(((PyTypeObject *)__pyx_ptype_3ntl_8ntl_GF2E_PyGF2E), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 113, __pyx_L1_error)
  __Pyx_GOTREF((PyObject *)__pyx_t_1);
  __pyx_v_res = ((struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ntl/ntl_GF2E.pyx":114
 *     #MACRO CDEF_RES() (= "True")
 *     cdef PyGF2E res = PyGF2E.__new__(PyGF2E)
 *     res.ctxt = self.ctxt             # <<<<<<<<<<<<<<
 *     self.ctxt.restore()
 * 
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_self->ctxt);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF((PyObject *)__pyx_v_res->ctxt);
  __Pyx_DECREF((PyObject *)__pyx_v_res->ctxt);
  __pyx_v_res->ctxt = ((struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E_Context *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ntl/ntl_GF2E.pyx":115
 *     cdef PyGF2E res = PyGF2E.__new__(PyGF2E)
 *     res.ctxt = self.ctxt
 *     self.ctxt.restore()             # <<<<<<<<<<<<<<
 * 
 *     sig_on()
 */
  ((struct __pyx_vtabstruct_3ntl_8ntl_GF2E_PyGF2E_Context *)__pyx_v_self->ctxt->__pyx_vtab)->restore(__pyx_v_self->ctxt);

  /* "ntl/ntl_GF2E.pyx":117
 *     self.ctxt.restore()
 * 
 *     sig_on()             # <<<<<<<<<<<<<<
 *     _ntlGF2E_add(res.val, self.val, arg.val)
 *     sig_off()
 */
  __pyx_t_4 = sig_on(); if (unlikely(__pyx_t_4 == ((int)0))) __PYX_ERR(0, 117, __pyx_L1_error)

  /* "ntl/ntl_GF2E.pyx":118
 * 
 *     sig_on()
 *     _ntlGF2E_add(res.val, self.val, arg.val)             # <<<<<<<<<<<<<<
 *     sig_off()
 *     return res
 */
  add(__pyx_v_res->val, __pyx_v_self->val, __pyx_v_arg->val);

  /* "ntl/ntl_GF2E.pyx":119
 *     sig_on()
 *     _ntlGF2E_add(res.val, self.val, arg.val)
 *     sig_off()             # <<<<<<<<<<<<<<
 *     return res
 * 
 */
  sig_off();

  /* "ntl/ntl_GF2E.pyx":120
 *     _ntlGF2E_add(res.val, self.val, arg.val)
 *     sig_off()
 *     return res             # <<<<<<<<<<<<<<
 * 
 *   def __radd__(PyGF2E self, _arg):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_res);
  __pyx_r = ((PyObject *)__pyx_v_res);
  goto __pyx_L0;

  /* "ntl/ntl_GF2E.pyx":106
 *     return res
 * 
 *   def __add__(PyGF2E self, _arg):             # <<<<<<<<<<<<<<
 *     #MACRO CONVERT_ARG() (= "True")
 *     cdef PyGF2E arg = self._convert_arg(_arg)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ntl.ntl_GF2E.PyGF2E.__add__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_arg);
  __Pyx_XDECREF((PyObject *)__pyx_v_res);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ntl/ntl_GF2E.pyx":122
 *     return res
 * 
 *   def __radd__(PyGF2E self, _arg):             # <<<<<<<<<<<<<<
 *     #MACRO CONVERT_ARG() (= "True")
 *     cdef PyGF2E arg = self._convert_arg(_arg)
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ntl_8ntl_GF2E_6PyGF2E_7__radd__(PyObject *__pyx_v_self, PyObject *__pyx_v__arg); /*proto*/
static PyObject *__pyx_pw_3ntl_8ntl_GF2E_6PyGF2E_7__radd__(PyObject *__pyx_v_self, PyObject *__pyx_v__arg) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__radd__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_self), __pyx_ptype_3ntl_8ntl_GF2E_PyGF2E, 1, "self", 0))) __PYX_ERR(0, 122, __pyx_L1_error)
  __pyx_r = __pyx_pf_3ntl_8ntl_GF2E_6PyGF2E_6__radd__(((struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *)__pyx_v_self), ((PyObject *)__pyx_v__arg));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ntl_8ntl_GF2E_6PyGF2E_6__radd__(struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *__pyx_v_self, PyObject *__pyx_v__arg) {
  struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *__pyx_v_arg = 0;
  struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *__pyx_v_res = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__radd__", 0);

  /* "ntl/ntl_GF2E.pyx":124
 *   def __radd__(PyGF2E self, _arg):
 *     #MACRO CONVERT_ARG() (= "True")
 *     cdef PyGF2E arg = self._convert_arg(_arg)             # <<<<<<<<<<<<<<
 *     if arg is None:
 *       return NotImplemented
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_3ntl_8ntl_GF2E_PyGF2E *)__pyx_v_self->__pyx_vtab)->_convert_arg(__pyx_v_self, __pyx_v__arg)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 124, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_arg = ((struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ntl/ntl_GF2E.pyx":125
 *     #MACRO CONVERT_ARG() (= "True")
 *     cdef PyGF2E arg = self._convert_arg(_arg)
 *     if arg is None:             # <<<<<<<<<<<<<<
 *       return NotImplemented
 * 
 */
  __pyx_t_2 = (((PyObject *)__pyx_v_arg) == Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "ntl/ntl_GF2E.pyx":126
 *     cdef PyGF2E arg = self._convert_arg(_arg)
 *     if arg is None:
 *       return NotImplemented             # <<<<<<<<<<<<<<
 * 
 *     #MACRO CDEF_RES() (= "True")
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_builtin_NotImplemented);
    __pyx_r = __pyx_builtin_NotImplemented;
    goto __pyx_L0;

    /* "ntl/ntl_GF2E.pyx":125
 *     #MACRO CONVERT_ARG() (= "True")
 *     cdef PyGF2E arg = self._convert_arg(_arg)
 *     if arg is None:             # <<<<<<<<<<<<<<
 *       return NotImplemented
 * 
 */
  }

  /* "ntl/ntl_GF2E.pyx":129
 * 
 *     #MACRO CDEF_RES() (= "True")
 *     cdef PyGF2E res = PyGF2E.__new__(PyGF2E)             # <<<<<<<<<<<<<<
 *     res.ctxt = self.ctxt
 *     self.ctxt.restore()
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_3ntl_8ntl_GF2E_PyGF2E(((PyTypeObject *)__pyx_ptype_3ntl_8ntl_GF2E_PyGF2E), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 129, __pyx_L1_error)
  __Pyx_GOTREF((PyObject *)__pyx_t_1);
  __pyx_v_res = ((struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ntl/ntl_GF2E.pyx":130
 *     #MACRO CDEF_RES() (= "True")
 *     cdef PyGF2E res = PyGF2E.__new__(PyGF2E)
 *     res.ctxt = self.ctxt             # <<<<<<<<<<<<<<
 *     self.ctxt.restore()
 * 
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_self->ctxt);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF((PyObject *)__pyx_v_res->ctxt);
  __Pyx_DECREF((PyObject *)__pyx_v_res->ctxt);
  __pyx_v_res->ctxt = ((struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E_Context *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ntl/ntl_GF2E.pyx":131
 *     cdef PyGF2E res = PyGF2E.__new__(PyGF2E)
 *     res.ctxt = self.ctxt
 *     self.ctxt.restore()             # <<<<<<<<<<<<<<
 * 
 *     sig_on()
 */
  ((struct __pyx_vtabstruct_3ntl_8ntl_GF2E_PyGF2E_Context *)__pyx_v_self->ctxt->__pyx_vtab)->restore(__pyx_v_self->ctxt);

  /* "ntl/ntl_GF2E.pyx":133
 *     self.ctxt.restore()
 * 
 *     sig_on()             # <<<<<<<<<<<<<<
 *     _ntlGF2E_add(res.val, arg.val, self.val)
 *     sig_off()
 */
  __pyx_t_4 = sig_on(); if (unlikely(__pyx_t_4 == ((int)0))) __PYX_ERR(0, 133, __pyx_L1_error)

  /* "ntl/ntl_GF2E.pyx":134
 * 
 *     sig_on()
 *     _ntlGF2E_add(res.val, arg.val, self.val)             # <<<<<<<<<<<<<<
 *     sig_off()
 *     return res
 */
  add(__pyx_v_res->val, __pyx_v_arg->val, __pyx_v_self->val);

  /* "ntl/ntl_GF2E.pyx":135
 *     sig_on()
 *     _ntlGF2E_add(res.val, arg.val, self.val)
 *     sig_off()             # <<<<<<<<<<<<<<
 *     return res
 * 
 */
  sig_off();

  /* "ntl/ntl_GF2E.pyx":136
 *     _ntlGF2E_add(res.val, arg.val, self.val)
 *     sig_off()
 *     return res             # <<<<<<<<<<<<<<
 * 
 *   def __sub__(PyGF2E self, _arg):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_res);
  __pyx_r = ((PyObject *)__pyx_v_res);
  goto __pyx_L0;

  /* "ntl/ntl_GF2E.pyx":122
 *     return res
 * 
 *   def __radd__(PyGF2E self, _arg):             # <<<<<<<<<<<<<<
 *     #MACRO CONVERT_ARG() (= "True")
 *     cdef PyGF2E arg = self._convert_arg(_arg)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ntl.ntl_GF2E.PyGF2E.__radd__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_arg);
  __Pyx_XDECREF((PyObject *)__pyx_v_res);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ntl/ntl_GF2E.pyx":138
 *     return res
 * 
 *   def __sub__(PyGF2E self, _arg):             # <<<<<<<<<<<<<<
 *     #MACRO CONVERT_ARG() (= "True")
 *     cdef PyGF2E arg = self._convert_arg(_arg)
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ntl_8ntl_GF2E_6PyGF2E_9__sub__(PyObject *__pyx_v_self, PyObject *__pyx_v__arg); /*proto*/
static PyObject *__pyx_pw_3ntl_8ntl_GF2E_6PyGF2E_9__sub__(PyObject *__pyx_v_self, PyObject *__pyx_v__arg) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__sub__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_self), __pyx_ptype_3ntl_8ntl_GF2E_PyGF2E, 1, "self", 0))) __PYX_ERR(0, 138, __pyx_L1_error)
  __pyx_r = __pyx_pf_3ntl_8ntl_GF2E_6PyGF2E_8__sub__(((struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *)__pyx_v_self), ((PyObject *)__pyx_v__arg));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ntl_8ntl_GF2E_6PyGF2E_8__sub__(struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *__pyx_v_self, PyObject *__pyx_v__arg) {
  struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *__pyx_v_arg = 0;
  struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *__pyx_v_res = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__sub__", 0);

  /* "ntl/ntl_GF2E.pyx":140
 *   def __sub__(PyGF2E self, _arg):
 *     #MACRO CONVERT_ARG() (= "True")
 *     cdef PyGF2E arg = self._convert_arg(_arg)             # <<<<<<<<<<<<<<
 *     if arg is None:
 *       return NotImplemented
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_3ntl_8ntl_GF2E_PyGF2E *)__pyx_v_self->__pyx_vtab)->_convert_arg(__pyx_v_self, __pyx_v__arg)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_arg = ((struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ntl/ntl_GF2E.pyx":141
 *     #MACRO CONVERT_ARG() (= "True")
 *     cdef PyGF2E arg = self._convert_arg(_arg)
 *     if arg is None:             # <<<<<<<<<<<<<<
 *       return NotImplemented
 * 
 */
  __pyx_t_2 = (((PyObject *)__pyx_v_arg) == Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "ntl/ntl_GF2E.pyx":142
 *     cdef PyGF2E arg = self._convert_arg(_arg)
 *     if arg is None:
 *       return NotImplemented             # <<<<<<<<<<<<<<
 * 
 *     #MACRO CDEF_RES() (= "True")
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_builtin_NotImplemented);
    __pyx_r = __pyx_builtin_NotImplemented;
    goto __pyx_L0;

    /* "ntl/ntl_GF2E.pyx":141
 *     #MACRO CONVERT_ARG() (= "True")
 *     cdef PyGF2E arg = self._convert_arg(_arg)
 *     if arg is None:             # <<<<<<<<<<<<<<
 *       return NotImplemented
 * 
 */
  }

  /* "ntl/ntl_GF2E.pyx":145
 * 
 *     #MACRO CDEF_RES() (= "True")
 *     cdef PyGF2E res = PyGF2E.__new__(PyGF2E)             # <<<<<<<<<<<<<<
 *     res.ctxt = self.ctxt
 *     self.ctxt.restore()
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_3ntl_8ntl_GF2E_PyGF2E(((PyTypeObject *)__pyx_ptype_3ntl_8ntl_GF2E_PyGF2E), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 145, __pyx_L1_error)
  __Pyx_GOTREF((PyObject *)__pyx_t_1);
  __pyx_v_res = ((struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ntl/ntl_GF2E.pyx":146
 *     #MACRO CDEF_RES() (= "True")
 *     cdef PyGF2E res = PyGF2E.__new__(PyGF2E)
 *     res.ctxt = self.ctxt             # <<<<<<<<<<<<<<
 *     self.ctxt.restore()
 * 
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_self->ctxt);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF((PyObject *)__pyx_v_res->ctxt);
  __Pyx_DECREF((PyObject *)__pyx_v_res->ctxt);
  __pyx_v_res->ctxt = ((struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E_Context *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ntl/ntl_GF2E.pyx":147
 *     cdef PyGF2E res = PyGF2E.__new__(PyGF2E)
 *     res.ctxt = self.ctxt
 *     self.ctxt.restore()             # <<<<<<<<<<<<<<
 * 
 *     sig_on()
 */
  ((struct __pyx_vtabstruct_3ntl_8ntl_GF2E_PyGF2E_Context *)__pyx_v_self->ctxt->__pyx_vtab)->restore(__pyx_v_self->ctxt);

  /* "ntl/ntl_GF2E.pyx":149
 *     self.ctxt.restore()
 * 
 *     sig_on()             # <<<<<<<<<<<<<<
 *     _ntlGF2E_sub(res.val, self.val, arg.val)
 *     sig_off()
 */
  __pyx_t_4 = sig_on(); if (unlikely(__pyx_t_4 == ((int)0))) __PYX_ERR(0, 149, __pyx_L1_error)

  /* "ntl/ntl_GF2E.pyx":150
 * 
 *     sig_on()
 *     _ntlGF2E_sub(res.val, self.val, arg.val)             # <<<<<<<<<<<<<<
 *     sig_off()
 *     return res
 */
  sub(__pyx_v_res->val, __pyx_v_self->val, __pyx_v_arg->val);

  /* "ntl/ntl_GF2E.pyx":151
 *     sig_on()
 *     _ntlGF2E_sub(res.val, self.val, arg.val)
 *     sig_off()             # <<<<<<<<<<<<<<
 *     return res
 * 
 */
  sig_off();

  /* "ntl/ntl_GF2E.pyx":152
 *     _ntlGF2E_sub(res.val, self.val, arg.val)
 *     sig_off()
 *     return res             # <<<<<<<<<<<<<<
 * 
 *   def __rsub__(PyGF2E self, _arg):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_res);
  __pyx_r = ((PyObject *)__pyx_v_res);
  goto __pyx_L0;

  /* "ntl/ntl_GF2E.pyx":138
 *     return res
 * 
 *   def __sub__(PyGF2E self, _arg):             # <<<<<<<<<<<<<<
 *     #MACRO CONVERT_ARG() (= "True")
 *     cdef PyGF2E arg = self._convert_arg(_arg)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ntl.ntl_GF2E.PyGF2E.__sub__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_arg);
  __Pyx_XDECREF((PyObject *)__pyx_v_res);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ntl/ntl_GF2E.pyx":154
 *     return res
 * 
 *   def __rsub__(PyGF2E self, _arg):             # <<<<<<<<<<<<<<
 *     #MACRO CONVERT_ARG() (= "True")
 *     cdef PyGF2E arg = self._convert_arg(_arg)
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ntl_8ntl_GF2E_6PyGF2E_11__rsub__(PyObject *__pyx_v_self, PyObject *__pyx_v__arg); /*proto*/
static PyObject *__pyx_pw_3ntl_8ntl_GF2E_6PyGF2E_11__rsub__(PyObject *__pyx_v_self, PyObject *__pyx_v__arg) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__rsub__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_self), __pyx_ptype_3ntl_8ntl_GF2E_PyGF2E, 1, "self", 0))) __PYX_ERR(0, 154, __pyx_L1_error)
  __pyx_r = __pyx_pf_3ntl_8ntl_GF2E_6PyGF2E_10__rsub__(((struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *)__pyx_v_self), ((PyObject *)__pyx_v__arg));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ntl_8ntl_GF2E_6PyGF2E_10__rsub__(struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *__pyx_v_self, PyObject *__pyx_v__arg) {
  struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *__pyx_v_arg = 0;
  struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *__pyx_v_res = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__rsub__", 0);

  /* "ntl/ntl_GF2E.pyx":156
 *   def __rsub__(PyGF2E self, _arg):
 *     #MACRO CONVERT_ARG() (= "True")
 *     cdef PyGF2E arg = self._convert_arg(_arg)             # <<<<<<<<<<<<<<
 *     if arg is None:
 *       return NotImplemented
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_3ntl_8ntl_GF2E_PyGF2E *)__pyx_v_self->__pyx_vtab)->_convert_arg(__pyx_v_self, __pyx_v__arg)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 156, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_arg = ((struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ntl/ntl_GF2E.pyx":157
 *     #MACRO CONVERT_ARG() (= "True")
 *     cdef PyGF2E arg = self._convert_arg(_arg)
 *     if arg is None:             # <<<<<<<<<<<<<<
 *       return NotImplemented
 * 
 */
  __pyx_t_2 = (((PyObject *)__pyx_v_arg) == Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "ntl/ntl_GF2E.pyx":158
 *     cdef PyGF2E arg = self._convert_arg(_arg)
 *     if arg is None:
 *       return NotImplemented             # <<<<<<<<<<<<<<
 * 
 *     #MACRO CDEF_RES() (= "True")
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_builtin_NotImplemented);
    __pyx_r = __pyx_builtin_NotImplemented;
    goto __pyx_L0;

    /* "ntl/ntl_GF2E.pyx":157
 *     #MACRO CONVERT_ARG() (= "True")
 *     cdef PyGF2E arg = self._convert_arg(_arg)
 *     if arg is None:             # <<<<<<<<<<<<<<
 *       return NotImplemented
 * 
 */
  }

  /* "ntl/ntl_GF2E.pyx":161
 * 
 *     #MACRO CDEF_RES() (= "True")
 *     cdef PyGF2E res = PyGF2E.__new__(PyGF2E)             # <<<<<<<<<<<<<<
 *     res.ctxt = self.ctxt
 *     self.ctxt.restore()
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_3ntl_8ntl_GF2E_PyGF2E(((PyTypeObject *)__pyx_ptype_3ntl_8ntl_GF2E_PyGF2E), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 161, __pyx_L1_error)
  __Pyx_GOTREF((PyObject *)__pyx_t_1);
  __pyx_v_res = ((struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ntl/ntl_GF2E.pyx":162
 *     #MACRO CDEF_RES() (= "True")
 *     cdef PyGF2E res = PyGF2E.__new__(PyGF2E)
 *     res.ctxt = self.ctxt             # <<<<<<<<<<<<<<
 *     self.ctxt.restore()
 * 
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_self->ctxt);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF((PyObject *)__pyx_v_res->ctxt);
  __Pyx_DECREF((PyObject *)__pyx_v_res->ctxt);
  __pyx_v_res->ctxt = ((struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E_Context *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ntl/ntl_GF2E.pyx":163
 *     cdef PyGF2E res = PyGF2E.__new__(PyGF2E)
 *     res.ctxt = self.ctxt
 *     self.ctxt.restore()             # <<<<<<<<<<<<<<
 * 
 *     sig_on()
 */
  ((struct __pyx_vtabstruct_3ntl_8ntl_GF2E_PyGF2E_Context *)__pyx_v_self->ctxt->__pyx_vtab)->restore(__pyx_v_self->ctxt);

  /* "ntl/ntl_GF2E.pyx":165
 *     self.ctxt.restore()
 * 
 *     sig_on()             # <<<<<<<<<<<<<<
 *     _ntlGF2E_sub(res.val, arg.val, self.val)
 *     sig_off()
 */
  __pyx_t_4 = sig_on(); if (unlikely(__pyx_t_4 == ((int)0))) __PYX_ERR(0, 165, __pyx_L1_error)

  /* "ntl/ntl_GF2E.pyx":166
 * 
 *     sig_on()
 *     _ntlGF2E_sub(res.val, arg.val, self.val)             # <<<<<<<<<<<<<<
 *     sig_off()
 *     return res
 */
  sub(__pyx_v_res->val, __pyx_v_arg->val, __pyx_v_self->val);

  /* "ntl/ntl_GF2E.pyx":167
 *     sig_on()
 *     _ntlGF2E_sub(res.val, arg.val, self.val)
 *     sig_off()             # <<<<<<<<<<<<<<
 *     return res
 * 
 */
  sig_off();

  /* "ntl/ntl_GF2E.pyx":168
 *     _ntlGF2E_sub(res.val, arg.val, self.val)
 *     sig_off()
 *     return res             # <<<<<<<<<<<<<<
 * 
 *   def __eq__(PyGF2E self, _arg):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_res);
  __pyx_r = ((PyObject *)__pyx_v_res);
  goto __pyx_L0;

  /* "ntl/ntl_GF2E.pyx":154
 *     return res
 * 
 *   def __rsub__(PyGF2E self, _arg):             # <<<<<<<<<<<<<<
 *     #MACRO CONVERT_ARG() (= "True")
 *     cdef PyGF2E arg = self._convert_arg(_arg)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ntl.ntl_GF2E.PyGF2E.__rsub__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_arg);
  __Pyx_XDECREF((PyObject *)__pyx_v_res);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ntl/ntl_GF2E.pyx":170
 *     return res
 * 
 *   def __eq__(PyGF2E self, _arg):             # <<<<<<<<<<<<<<
 *     #MACRO CONVERT_ARG() (= "True")
 *     cdef PyGF2E arg = self._convert_arg(_arg)
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ntl_8ntl_GF2E_6PyGF2E_13__eq__(PyObject *__pyx_v_self, PyObject *__pyx_v__arg); /*proto*/
static PyObject *__pyx_pw_3ntl_8ntl_GF2E_6PyGF2E_13__eq__(PyObject *__pyx_v_self, PyObject *__pyx_v__arg) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__eq__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3ntl_8ntl_GF2E_6PyGF2E_12__eq__(((struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *)__pyx_v_self), ((PyObject *)__pyx_v__arg));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ntl_8ntl_GF2E_6PyGF2E_12__eq__(struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *__pyx_v_self, PyObject *__pyx_v__arg) {
  struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *__pyx_v_arg = 0;
  struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *__pyx_v_res = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__eq__", 0);

  /* "ntl/ntl_GF2E.pyx":172
 *   def __eq__(PyGF2E self, _arg):
 *     #MACRO CONVERT_ARG() (= "True")
 *     cdef PyGF2E arg = self._convert_arg(_arg)             # <<<<<<<<<<<<<<
 *     if arg is None:
 *       return NotImplemented
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_3ntl_8ntl_GF2E_PyGF2E *)__pyx_v_self->__pyx_vtab)->_convert_arg(__pyx_v_self, __pyx_v__arg)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 172, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_arg = ((struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ntl/ntl_GF2E.pyx":173
 *     #MACRO CONVERT_ARG() (= "True")
 *     cdef PyGF2E arg = self._convert_arg(_arg)
 *     if arg is None:             # <<<<<<<<<<<<<<
 *       return NotImplemented
 * 
 */
  __pyx_t_2 = (((PyObject *)__pyx_v_arg) == Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "ntl/ntl_GF2E.pyx":174
 *     cdef PyGF2E arg = self._convert_arg(_arg)
 *     if arg is None:
 *       return NotImplemented             # <<<<<<<<<<<<<<
 * 
 *     #MACRO CDEF_RES() (= "True")
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_builtin_NotImplemented);
    __pyx_r = __pyx_builtin_NotImplemented;
    goto __pyx_L0;

    /* "ntl/ntl_GF2E.pyx":173
 *     #MACRO CONVERT_ARG() (= "True")
 *     cdef PyGF2E arg = self._convert_arg(_arg)
 *     if arg is None:             # <<<<<<<<<<<<<<
 *       return NotImplemented
 * 
 */
  }

  /* "ntl/ntl_GF2E.pyx":177
 * 
 *     #MACRO CDEF_RES() (= "True")
 *     cdef PyGF2E res = PyGF2E.__new__(PyGF2E)             # <<<<<<<<<<<<<<
 *     res.ctxt = self.ctxt
 *     self.ctxt.restore()
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_3ntl_8ntl_GF2E_PyGF2E(((PyTypeObject *)__pyx_ptype_3ntl_8ntl_GF2E_PyGF2E), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 177, __pyx_L1_error)
  __Pyx_GOTREF((PyObject *)__pyx_t_1);
  __pyx_v_res = ((struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ntl/ntl_GF2E.pyx":178
 *     #MACRO CDEF_RES() (= "True")
 *     cdef PyGF2E res = PyGF2E.__new__(PyGF2E)
 *     res.ctxt = self.ctxt             # <<<<<<<<<<<<<<
 *     self.ctxt.restore()
 * 
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_self->ctxt);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF((PyObject *)__pyx_v_res->ctxt);
  __Pyx_DECREF((PyObject *)__pyx_v_res->ctxt);
  __pyx_v_res->ctxt = ((struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E_Context *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ntl/ntl_GF2E.pyx":179
 *     cdef PyGF2E res = PyGF2E.__new__(PyGF2E)
 *     res.ctxt = self.ctxt
 *     self.ctxt.restore()             # <<<<<<<<<<<<<<
 * 
 *     return self.val == arg.val
 */
  ((struct __pyx_vtabstruct_3ntl_8ntl_GF2E_PyGF2E_Context *)__pyx_v_self->ctxt->__pyx_vtab)->restore(__pyx_v_self->ctxt);

  /* "ntl/ntl_GF2E.pyx":181
 *     self.ctxt.restore()
 * 
 *     return self.val == arg.val             # <<<<<<<<<<<<<<
 * 
 *   def __neq__(PyGF2E self, _arg):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong((__pyx_v_self->val == __pyx_v_arg->val)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 181, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ntl/ntl_GF2E.pyx":170
 *     return res
 * 
 *   def __eq__(PyGF2E self, _arg):             # <<<<<<<<<<<<<<
 *     #MACRO CONVERT_ARG() (= "True")
 *     cdef PyGF2E arg = self._convert_arg(_arg)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ntl.ntl_GF2E.PyGF2E.__eq__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_arg);
  __Pyx_XDECREF((PyObject *)__pyx_v_res);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ntl/ntl_GF2E.pyx":183
 *     return self.val == arg.val
 * 
 *   def __neq__(PyGF2E self, _arg):             # <<<<<<<<<<<<<<
 *     #MACRO CONVERT_ARG() (= "True")
 *     cdef PyGF2E arg = self._convert_arg(_arg)
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ntl_8ntl_GF2E_6PyGF2E_15__neq__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_3ntl_8ntl_GF2E_6PyGF2E_15__neq__ = {"__neq__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ntl_8ntl_GF2E_6PyGF2E_15__neq__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_3ntl_8ntl_GF2E_6PyGF2E_15__neq__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v__arg = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__neq__ (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_arg_2,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_arg_2,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_arg_2)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 183, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__neq__") < 0)) __PYX_ERR(0, 183, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v__arg = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__neq__", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 183, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ntl.ntl_GF2E.PyGF2E.__neq__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3ntl_8ntl_GF2E_6PyGF2E_14__neq__(((struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *)__pyx_v_self), __pyx_v__arg);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ntl_8ntl_GF2E_6PyGF2E_14__neq__(struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *__pyx_v_self, PyObject *__pyx_v__arg) {
  struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *__pyx_v_arg = 0;
  struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *__pyx_v_res = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__neq__", 0);

  /* "ntl/ntl_GF2E.pyx":185
 *   def __neq__(PyGF2E self, _arg):
 *     #MACRO CONVERT_ARG() (= "True")
 *     cdef PyGF2E arg = self._convert_arg(_arg)             # <<<<<<<<<<<<<<
 *     if arg is None:
 *       return NotImplemented
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_3ntl_8ntl_GF2E_PyGF2E *)__pyx_v_self->__pyx_vtab)->_convert_arg(__pyx_v_self, __pyx_v__arg)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 185, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_arg = ((struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ntl/ntl_GF2E.pyx":186
 *     #MACRO CONVERT_ARG() (= "True")
 *     cdef PyGF2E arg = self._convert_arg(_arg)
 *     if arg is None:             # <<<<<<<<<<<<<<
 *       return NotImplemented
 * 
 */
  __pyx_t_2 = (((PyObject *)__pyx_v_arg) == Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "ntl/ntl_GF2E.pyx":187
 *     cdef PyGF2E arg = self._convert_arg(_arg)
 *     if arg is None:
 *       return NotImplemented             # <<<<<<<<<<<<<<
 * 
 *     #MACRO CDEF_RES() (= "True")
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_builtin_NotImplemented);
    __pyx_r = __pyx_builtin_NotImplemented;
    goto __pyx_L0;

    /* "ntl/ntl_GF2E.pyx":186
 *     #MACRO CONVERT_ARG() (= "True")
 *     cdef PyGF2E arg = self._convert_arg(_arg)
 *     if arg is None:             # <<<<<<<<<<<<<<
 *       return NotImplemented
 * 
 */
  }

  /* "ntl/ntl_GF2E.pyx":190
 * 
 *     #MACRO CDEF_RES() (= "True")
 *     cdef PyGF2E res = PyGF2E.__new__(PyGF2E)             # <<<<<<<<<<<<<<
 *     res.ctxt = self.ctxt
 *     self.ctxt.restore()
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_3ntl_8ntl_GF2E_PyGF2E(((PyTypeObject *)__pyx_ptype_3ntl_8ntl_GF2E_PyGF2E), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 190, __pyx_L1_error)
  __Pyx_GOTREF((PyObject *)__pyx_t_1);
  __pyx_v_res = ((struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ntl/ntl_GF2E.pyx":191
 *     #MACRO CDEF_RES() (= "True")
 *     cdef PyGF2E res = PyGF2E.__new__(PyGF2E)
 *     res.ctxt = self.ctxt             # <<<<<<<<<<<<<<
 *     self.ctxt.restore()
 * 
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_self->ctxt);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF((PyObject *)__pyx_v_res->ctxt);
  __Pyx_DECREF((PyObject *)__pyx_v_res->ctxt);
  __pyx_v_res->ctxt = ((struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E_Context *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ntl/ntl_GF2E.pyx":192
 *     cdef PyGF2E res = PyGF2E.__new__(PyGF2E)
 *     res.ctxt = self.ctxt
 *     self.ctxt.restore()             # <<<<<<<<<<<<<<
 * 
 *     return self.val != arg.val
 */
  ((struct __pyx_vtabstruct_3ntl_8ntl_GF2E_PyGF2E_Context *)__pyx_v_self->ctxt->__pyx_vtab)->restore(__pyx_v_self->ctxt);

  /* "ntl/ntl_GF2E.pyx":194
 *     self.ctxt.restore()
 * 
 *     return self.val != arg.val             # <<<<<<<<<<<<<<
 * 
 *   def __bool__(PyGF2E self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong((__pyx_v_self->val != __pyx_v_arg->val)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 194, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ntl/ntl_GF2E.pyx":183
 *     return self.val == arg.val
 * 
 *   def __neq__(PyGF2E self, _arg):             # <<<<<<<<<<<<<<
 *     #MACRO CONVERT_ARG() (= "True")
 *     cdef PyGF2E arg = self._convert_arg(_arg)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ntl.ntl_GF2E.PyGF2E.__neq__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_arg);
  __Pyx_XDECREF((PyObject *)__pyx_v_res);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ntl/ntl_GF2E.pyx":196
 *     return self.val != arg.val
 * 
 *   def __bool__(PyGF2E self):             # <<<<<<<<<<<<<<
 *     return not _ntlGF2E_IsZero(self.val)
 * 
 */

/* Python wrapper */
static int __pyx_pw_3ntl_8ntl_GF2E_6PyGF2E_17__bool__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_3ntl_8ntl_GF2E_6PyGF2E_17__bool__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__bool__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3ntl_8ntl_GF2E_6PyGF2E_16__bool__(((struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3ntl_8ntl_GF2E_6PyGF2E_16__bool__(struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__bool__", 0);

  /* "ntl/ntl_GF2E.pyx":197
 * 
 *   def __bool__(PyGF2E self):
 *     return not _ntlGF2E_IsZero(self.val)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = (!(IsZero(__pyx_v_self->val) != 0));
  goto __pyx_L0;

  /* "ntl/ntl_GF2E.pyx":196
 *     return self.val != arg.val
 * 
 *   def __bool__(PyGF2E self):             # <<<<<<<<<<<<<<
 *     return not _ntlGF2E_IsZero(self.val)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ntl/ntl_GF2E.pyx":216
 * 
 * 
 *   def __str__(self):             # <<<<<<<<<<<<<<
 *     return any_to_pythonstr(self.val)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ntl_8ntl_GF2E_6PyGF2E_19__str__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3ntl_8ntl_GF2E_6PyGF2E_19__str__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3ntl_8ntl_GF2E_6PyGF2E_18__str__(((struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ntl_8ntl_GF2E_6PyGF2E_18__str__(struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__str__", 0);

  /* "ntl/ntl_GF2E.pyx":217
 * 
 *   def __str__(self):
 *     return any_to_pythonstr(self.val)             # <<<<<<<<<<<<<<
 * 
 *   def __repr__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = any_to_pythonstr<GF2E>(__pyx_v_self->val); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 217, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ntl/ntl_GF2E.pyx":216
 * 
 * 
 *   def __str__(self):             # <<<<<<<<<<<<<<
 *     return any_to_pythonstr(self.val)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ntl.ntl_GF2E.PyGF2E.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ntl/ntl_GF2E.pyx":219
 *     return any_to_pythonstr(self.val)
 * 
 *   def __repr__(self):             # <<<<<<<<<<<<<<
 *     return any_to_pythonstr(self.val)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ntl_8ntl_GF2E_6PyGF2E_21__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3ntl_8ntl_GF2E_6PyGF2E_21__repr__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3ntl_8ntl_GF2E_6PyGF2E_20__repr__(((struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ntl_8ntl_GF2E_6PyGF2E_20__repr__(struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "ntl/ntl_GF2E.pyx":220
 * 
 *   def __repr__(self):
 *     return any_to_pythonstr(self.val)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = any_to_pythonstr<GF2E>(__pyx_v_self->val); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 220, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ntl/ntl_GF2E.pyx":219
 *     return any_to_pythonstr(self.val)
 * 
 *   def __repr__(self):             # <<<<<<<<<<<<<<
 *     return any_to_pythonstr(self.val)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ntl.ntl_GF2E.PyGF2E.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ntl/ntl_GF2E.pyx":223
 * 
 * 
 *   cpdef bint is_zero(PyGF2E self):             # <<<<<<<<<<<<<<
 *     "Tests if `self` is the additive unit."
 *     return _ntlGF2E_IsZero(self.val)
 */

static PyObject *__pyx_pw_3ntl_8ntl_GF2E_6PyGF2E_23is_zero(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static int __pyx_f_3ntl_8ntl_GF2E_6PyGF2E_is_zero(struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *__pyx_v_self, int __pyx_skip_dispatch) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_zero", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || __Pyx_PyType_HasFeature(Py_TYPE(((PyObject *)__pyx_v_self)), (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_is_zero); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 223, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_3ntl_8ntl_GF2E_6PyGF2E_23is_zero)) {
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        __pyx_t_5 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
            __pyx_t_5 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[1] = {__pyx_t_4, };
          __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 223, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        }
        __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 223, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_r = __pyx_t_6;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "ntl/ntl_GF2E.pyx":225
 *   cpdef bint is_zero(PyGF2E self):
 *     "Tests if `self` is the additive unit."
 *     return _ntlGF2E_IsZero(self.val)             # <<<<<<<<<<<<<<
 * 
 *   cpdef bint is_one(PyGF2E self):
 */
  __pyx_r = IsZero(__pyx_v_self->val);
  goto __pyx_L0;

  /* "ntl/ntl_GF2E.pyx":223
 * 
 * 
 *   cpdef bint is_zero(PyGF2E self):             # <<<<<<<<<<<<<<
 *     "Tests if `self` is the additive unit."
 *     return _ntlGF2E_IsZero(self.val)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_WriteUnraisable("ntl.ntl_GF2E.PyGF2E.is_zero", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_3ntl_8ntl_GF2E_6PyGF2E_23is_zero(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_3ntl_8ntl_GF2E_6PyGF2E_22is_zero, "Tests if `self` is the additive unit.");
static PyMethodDef __pyx_mdef_3ntl_8ntl_GF2E_6PyGF2E_23is_zero = {"is_zero", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ntl_8ntl_GF2E_6PyGF2E_23is_zero, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_3ntl_8ntl_GF2E_6PyGF2E_22is_zero};
static PyObject *__pyx_pw_3ntl_8ntl_GF2E_6PyGF2E_23is_zero(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_zero (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("is_zero", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "is_zero", 0))) return NULL;
  __pyx_r = __pyx_pf_3ntl_8ntl_GF2E_6PyGF2E_22is_zero(((struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ntl_8ntl_GF2E_6PyGF2E_22is_zero(struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_zero", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_f_3ntl_8ntl_GF2E_6PyGF2E_is_zero(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 223, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ntl.ntl_GF2E.PyGF2E.is_zero", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ntl/ntl_GF2E.pyx":227
 *     return _ntlGF2E_IsZero(self.val)
 * 
 *   cpdef bint is_one(PyGF2E self):             # <<<<<<<<<<<<<<
 *     "Tests if `self` is the multiplicative unit."
 *     return _ntlGF2E_IsOne(self.val)
 */

static PyObject *__pyx_pw_3ntl_8ntl_GF2E_6PyGF2E_25is_one(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static int __pyx_f_3ntl_8ntl_GF2E_6PyGF2E_is_one(struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *__pyx_v_self, int __pyx_skip_dispatch) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_one", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || __Pyx_PyType_HasFeature(Py_TYPE(((PyObject *)__pyx_v_self)), (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_is_one); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 227, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_3ntl_8ntl_GF2E_6PyGF2E_25is_one)) {
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        __pyx_t_5 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
            __pyx_t_5 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[1] = {__pyx_t_4, };
          __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 227, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        }
        __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 227, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_r = __pyx_t_6;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "ntl/ntl_GF2E.pyx":229
 *   cpdef bint is_one(PyGF2E self):
 *     "Tests if `self` is the multiplicative unit."
 *     return _ntlGF2E_IsOne(self.val)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = IsOne(__pyx_v_self->val);
  goto __pyx_L0;

  /* "ntl/ntl_GF2E.pyx":227
 *     return _ntlGF2E_IsZero(self.val)
 * 
 *   cpdef bint is_one(PyGF2E self):             # <<<<<<<<<<<<<<
 *     "Tests if `self` is the multiplicative unit."
 *     return _ntlGF2E_IsOne(self.val)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_WriteUnraisable("ntl.ntl_GF2E.PyGF2E.is_one", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_3ntl_8ntl_GF2E_6PyGF2E_25is_one(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_3ntl_8ntl_GF2E_6PyGF2E_24is_one, "Tests if `self` is the multiplicative unit.");
static PyMethodDef __pyx_mdef_3ntl_8ntl_GF2E_6PyGF2E_25is_one = {"is_one", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ntl_8ntl_GF2E_6PyGF2E_25is_one, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_3ntl_8ntl_GF2E_6PyGF2E_24is_one};
static PyObject *__pyx_pw_3ntl_8ntl_GF2E_6PyGF2E_25is_one(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_one (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("is_one", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "is_one", 0))) return NULL;
  __pyx_r = __pyx_pf_3ntl_8ntl_GF2E_6PyGF2E_24is_one(((struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ntl_8ntl_GF2E_6PyGF2E_24is_one(struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_one", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_f_3ntl_8ntl_GF2E_6PyGF2E_is_one(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 227, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ntl.ntl_GF2E.PyGF2E.is_one", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ntl/ntl_GF2E.pyx":235
 * 
 * 
 *   def __index__(self):             # <<<<<<<<<<<<<<
 *     return self.__int__()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ntl_8ntl_GF2E_6PyGF2E_27__index__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3ntl_8ntl_GF2E_6PyGF2E_27__index__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__index__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3ntl_8ntl_GF2E_6PyGF2E_26__index__(((struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ntl_8ntl_GF2E_6PyGF2E_26__index__(struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__index__", 0);

  /* "ntl/ntl_GF2E.pyx":236
 * 
 *   def __index__(self):
 *     return self.__int__()             # <<<<<<<<<<<<<<
 * 
 *   def __int__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_int); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 236, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_3, };
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 236, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ntl/ntl_GF2E.pyx":235
 * 
 * 
 *   def __index__(self):             # <<<<<<<<<<<<<<
 *     return self.__int__()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("ntl.ntl_GF2E.PyGF2E.__index__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ntl/ntl_GF2E.pyx":238
 *     return self.__int__()
 * 
 *   def __int__(self):             # <<<<<<<<<<<<<<
 *     return int.from_bytes(self.bytes('little'), 'little')
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ntl_8ntl_GF2E_6PyGF2E_29__int__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3ntl_8ntl_GF2E_6PyGF2E_29__int__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__int__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3ntl_8ntl_GF2E_6PyGF2E_28__int__(((struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ntl_8ntl_GF2E_6PyGF2E_28__int__(struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__int__", 0);

  /* "ntl/ntl_GF2E.pyx":239
 * 
 *   def __int__(self):
 *     return int.from_bytes(self.bytes('little'), 'little')             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)(&PyInt_Type)), __pyx_n_s_from_bytes); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 239, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_bytes); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 239, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_6 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_n_u_little};
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 239, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_t_4 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_6 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_4, __pyx_t_3, __pyx_n_u_little};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_6, 2+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 239, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ntl/ntl_GF2E.pyx":238
 *     return self.__int__()
 * 
 *   def __int__(self):             # <<<<<<<<<<<<<<
 *     return int.from_bytes(self.bytes('little'), 'little')
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("ntl.ntl_GF2E.PyGF2E.__int__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ntl/ntl_GF2E.pyx":247
 *   #IF BASETYPE (= "True")
 * 
 *   cpdef PyGF2X lift(PyGF2E self):             # <<<<<<<<<<<<<<
 *     #IF SUBDOUBLE (= "False")
 * 
 */

static PyObject *__pyx_pw_3ntl_8ntl_GF2E_6PyGF2E_31lift(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static struct __pyx_obj_3ntl_8ntl_GF2X_PyGF2X *__pyx_f_3ntl_8ntl_GF2E_6PyGF2E_lift(struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *__pyx_v_self, int __pyx_skip_dispatch) {
  struct __pyx_obj_3ntl_8ntl_GF2X_PyGF2X *__pyx_v_res = 0;
  struct __pyx_obj_3ntl_8ntl_GF2X_PyGF2X *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("lift", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || __Pyx_PyType_HasFeature(Py_TYPE(((PyObject *)__pyx_v_self)), (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_lift); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 247, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_3ntl_8ntl_GF2E_6PyGF2E_31lift)) {
        __Pyx_XDECREF((PyObject *)__pyx_r);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        __pyx_t_5 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
            __pyx_t_5 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[1] = {__pyx_t_4, };
          __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 247, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        }
        if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_3ntl_8ntl_GF2X_PyGF2X))))) __PYX_ERR(0, 247, __pyx_L1_error)
        __pyx_r = ((struct __pyx_obj_3ntl_8ntl_GF2X_PyGF2X *)__pyx_t_2);
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "ntl/ntl_GF2E.pyx":252
 * 
 *     #MACRO CDEF_RES(BASETYPE) (= "True")
 *     cdef PyGF2X res = PyGF2X.__new__(PyGF2X)             # <<<<<<<<<<<<<<
 *     res.ctxt = self.ctxt
 *     self.ctxt.restore()
 */
  __pyx_t_1 = __Pyx_tp_new(((PyObject *)__pyx_ptype_3ntl_8ntl_GF2X_PyGF2X), __pyx_empty_tuple); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 252, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_3ntl_8ntl_GF2X_PyGF2X)))) __PYX_ERR(0, 252, __pyx_L1_error)
  __pyx_v_res = ((struct __pyx_obj_3ntl_8ntl_GF2X_PyGF2X *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ntl/ntl_GF2E.pyx":253
 *     #MACRO CDEF_RES(BASETYPE) (= "True")
 *     cdef PyGF2X res = PyGF2X.__new__(PyGF2X)
 *     res.ctxt = self.ctxt             # <<<<<<<<<<<<<<
 *     self.ctxt.restore()
 * 
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_self->ctxt);
  __Pyx_INCREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_res), __pyx_n_s_ctxt, __pyx_t_1) < 0) __PYX_ERR(0, 253, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ntl/ntl_GF2E.pyx":254
 *     cdef PyGF2X res = PyGF2X.__new__(PyGF2X)
 *     res.ctxt = self.ctxt
 *     self.ctxt.restore()             # <<<<<<<<<<<<<<
 * 
 *     #ENDIF <NONE> (= "False")
 */
  ((struct __pyx_vtabstruct_3ntl_8ntl_GF2E_PyGF2E_Context *)__pyx_v_self->ctxt->__pyx_vtab)->restore(__pyx_v_self->ctxt);

  /* "ntl/ntl_GF2E.pyx":257
 * 
 *     #ENDIF <NONE> (= "False")
 *     res.val = _ntlGF2E_rep(self.val)             # <<<<<<<<<<<<<<
 *     return res
 * 
 */
  __pyx_v_res->val = rep(__pyx_v_self->val);

  /* "ntl/ntl_GF2E.pyx":258
 *     #ENDIF <NONE> (= "False")
 *     res.val = _ntlGF2E_rep(self.val)
 *     return res             # <<<<<<<<<<<<<<
 * 
 *   cpdef PyGF2E_Context parent(self):
 */
  __Pyx_XDECREF((PyObject *)__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_res);
  __pyx_r = __pyx_v_res;
  goto __pyx_L0;

  /* "ntl/ntl_GF2E.pyx":247
 *   #IF BASETYPE (= "True")
 * 
 *   cpdef PyGF2X lift(PyGF2E self):             # <<<<<<<<<<<<<<
 *     #IF SUBDOUBLE (= "False")
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("ntl.ntl_GF2E.PyGF2E.lift", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_res);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_3ntl_8ntl_GF2E_6PyGF2E_31lift(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_3ntl_8ntl_GF2E_6PyGF2E_31lift = {"lift", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ntl_8ntl_GF2E_6PyGF2E_31lift, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_3ntl_8ntl_GF2E_6PyGF2E_31lift(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lift (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("lift", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "lift", 0))) return NULL;
  __pyx_r = __pyx_pf_3ntl_8ntl_GF2E_6PyGF2E_30lift(((struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ntl_8ntl_GF2E_6PyGF2E_30lift(struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("lift", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_3ntl_8ntl_GF2E_6PyGF2E_lift(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 247, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ntl.ntl_GF2E.PyGF2E.lift", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ntl/ntl_GF2E.pyx":260
 *     return res
 * 
 *   cpdef PyGF2E_Context parent(self):             # <<<<<<<<<<<<<<
 *     return self.ctxt._mod
 * 
 */

static PyObject *__pyx_pw_3ntl_8ntl_GF2E_6PyGF2E_33parent(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E_Context *__pyx_f_3ntl_8ntl_GF2E_6PyGF2E_parent(struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *__pyx_v_self, int __pyx_skip_dispatch) {
  struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E_Context *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("parent", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || __Pyx_PyType_HasFeature(Py_TYPE(((PyObject *)__pyx_v_self)), (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_parent); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 260, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_3ntl_8ntl_GF2E_6PyGF2E_33parent)) {
        __Pyx_XDECREF((PyObject *)__pyx_r);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        __pyx_t_5 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
            __pyx_t_5 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[1] = {__pyx_t_4, };
          __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 260, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        }
        if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_3ntl_8ntl_GF2E_PyGF2E_Context))))) __PYX_ERR(0, 260, __pyx_L1_error)
        __pyx_r = ((struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E_Context *)__pyx_t_2);
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "ntl/ntl_GF2E.pyx":261
 * 
 *   cpdef PyGF2E_Context parent(self):
 *     return self.ctxt._mod             # <<<<<<<<<<<<<<
 * 
 *   #ENDIF <NONE> (= "False")
 */
  __Pyx_XDECREF((PyObject *)__pyx_r);
  if (!(likely(((((PyObject *)__pyx_v_self->ctxt->_mod)) == Py_None) || likely(__Pyx_TypeTest(((PyObject *)__pyx_v_self->ctxt->_mod), __pyx_ptype_3ntl_8ntl_GF2E_PyGF2E_Context))))) __PYX_ERR(0, 261, __pyx_L1_error)
  __Pyx_INCREF((PyObject *)__pyx_v_self->ctxt->_mod);
  __pyx_r = ((struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E_Context *)__pyx_v_self->ctxt->_mod);
  goto __pyx_L0;

  /* "ntl/ntl_GF2E.pyx":260
 *     return res
 * 
 *   cpdef PyGF2E_Context parent(self):             # <<<<<<<<<<<<<<
 *     return self.ctxt._mod
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("ntl.ntl_GF2E.PyGF2E.parent", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_3ntl_8ntl_GF2E_6PyGF2E_33parent(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_3ntl_8ntl_GF2E_6PyGF2E_33parent = {"parent", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ntl_8ntl_GF2E_6PyGF2E_33parent, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_3ntl_8ntl_GF2E_6PyGF2E_33parent(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("parent (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("parent", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "parent", 0))) return NULL;
  __pyx_r = __pyx_pf_3ntl_8ntl_GF2E_6PyGF2E_32parent(((struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ntl_8ntl_GF2E_6PyGF2E_32parent(struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("parent", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_3ntl_8ntl_GF2E_6PyGF2E_parent(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 260, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ntl.ntl_GF2E.PyGF2E.parent", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ntl/ntl_GF2E.pyx":267
 * 
 * 
 *   def __mul__(PyGF2E self, _arg):             # <<<<<<<<<<<<<<
 *     #MACRO CONVERT_ARG() (= "True")
 *     cdef PyGF2E arg = self._convert_arg(_arg)
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ntl_8ntl_GF2E_6PyGF2E_35__mul__(PyObject *__pyx_v_self, PyObject *__pyx_v__arg); /*proto*/
static PyObject *__pyx_pw_3ntl_8ntl_GF2E_6PyGF2E_35__mul__(PyObject *__pyx_v_self, PyObject *__pyx_v__arg) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__mul__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_self), __pyx_ptype_3ntl_8ntl_GF2E_PyGF2E, 1, "self", 0))) __PYX_ERR(0, 267, __pyx_L1_error)
  __pyx_r = __pyx_pf_3ntl_8ntl_GF2E_6PyGF2E_34__mul__(((struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *)__pyx_v_self), ((PyObject *)__pyx_v__arg));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ntl_8ntl_GF2E_6PyGF2E_34__mul__(struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *__pyx_v_self, PyObject *__pyx_v__arg) {
  struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *__pyx_v_arg = 0;
  struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *__pyx_v_res = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__mul__", 0);

  /* "ntl/ntl_GF2E.pyx":269
 *   def __mul__(PyGF2E self, _arg):
 *     #MACRO CONVERT_ARG() (= "True")
 *     cdef PyGF2E arg = self._convert_arg(_arg)             # <<<<<<<<<<<<<<
 *     if arg is None:
 *       return NotImplemented
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_3ntl_8ntl_GF2E_PyGF2E *)__pyx_v_self->__pyx_vtab)->_convert_arg(__pyx_v_self, __pyx_v__arg)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 269, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_arg = ((struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ntl/ntl_GF2E.pyx":270
 *     #MACRO CONVERT_ARG() (= "True")
 *     cdef PyGF2E arg = self._convert_arg(_arg)
 *     if arg is None:             # <<<<<<<<<<<<<<
 *       return NotImplemented
 * 
 */
  __pyx_t_2 = (((PyObject *)__pyx_v_arg) == Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "ntl/ntl_GF2E.pyx":271
 *     cdef PyGF2E arg = self._convert_arg(_arg)
 *     if arg is None:
 *       return NotImplemented             # <<<<<<<<<<<<<<
 * 
 *     #MACRO CDEF_RES() (= "True")
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_builtin_NotImplemented);
    __pyx_r = __pyx_builtin_NotImplemented;
    goto __pyx_L0;

    /* "ntl/ntl_GF2E.pyx":270
 *     #MACRO CONVERT_ARG() (= "True")
 *     cdef PyGF2E arg = self._convert_arg(_arg)
 *     if arg is None:             # <<<<<<<<<<<<<<
 *       return NotImplemented
 * 
 */
  }

  /* "ntl/ntl_GF2E.pyx":274
 * 
 *     #MACRO CDEF_RES() (= "True")
 *     cdef PyGF2E res = PyGF2E.__new__(PyGF2E)             # <<<<<<<<<<<<<<
 *     res.ctxt = self.ctxt
 *     self.ctxt.restore()
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_3ntl_8ntl_GF2E_PyGF2E(((PyTypeObject *)__pyx_ptype_3ntl_8ntl_GF2E_PyGF2E), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 274, __pyx_L1_error)
  __Pyx_GOTREF((PyObject *)__pyx_t_1);
  __pyx_v_res = ((struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ntl/ntl_GF2E.pyx":275
 *     #MACRO CDEF_RES() (= "True")
 *     cdef PyGF2E res = PyGF2E.__new__(PyGF2E)
 *     res.ctxt = self.ctxt             # <<<<<<<<<<<<<<
 *     self.ctxt.restore()
 * 
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_self->ctxt);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF((PyObject *)__pyx_v_res->ctxt);
  __Pyx_DECREF((PyObject *)__pyx_v_res->ctxt);
  __pyx_v_res->ctxt = ((struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E_Context *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ntl/ntl_GF2E.pyx":276
 *     cdef PyGF2E res = PyGF2E.__new__(PyGF2E)
 *     res.ctxt = self.ctxt
 *     self.ctxt.restore()             # <<<<<<<<<<<<<<
 * 
 *     sig_on()
 */
  ((struct __pyx_vtabstruct_3ntl_8ntl_GF2E_PyGF2E_Context *)__pyx_v_self->ctxt->__pyx_vtab)->restore(__pyx_v_self->ctxt);

  /* "ntl/ntl_GF2E.pyx":278
 *     self.ctxt.restore()
 * 
 *     sig_on()             # <<<<<<<<<<<<<<
 *     _ntlGF2E_mul(res.val, self.val, arg.val)
 *     sig_off()
 */
  __pyx_t_4 = sig_on(); if (unlikely(__pyx_t_4 == ((int)0))) __PYX_ERR(0, 278, __pyx_L1_error)

  /* "ntl/ntl_GF2E.pyx":279
 * 
 *     sig_on()
 *     _ntlGF2E_mul(res.val, self.val, arg.val)             # <<<<<<<<<<<<<<
 *     sig_off()
 *     return res
 */
  mul(__pyx_v_res->val, __pyx_v_self->val, __pyx_v_arg->val);

  /* "ntl/ntl_GF2E.pyx":280
 *     sig_on()
 *     _ntlGF2E_mul(res.val, self.val, arg.val)
 *     sig_off()             # <<<<<<<<<<<<<<
 *     return res
 * 
 */
  sig_off();

  /* "ntl/ntl_GF2E.pyx":281
 *     _ntlGF2E_mul(res.val, self.val, arg.val)
 *     sig_off()
 *     return res             # <<<<<<<<<<<<<<
 * 
 *   def __rmul__(PyGF2E self, _arg):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_res);
  __pyx_r = ((PyObject *)__pyx_v_res);
  goto __pyx_L0;

  /* "ntl/ntl_GF2E.pyx":267
 * 
 * 
 *   def __mul__(PyGF2E self, _arg):             # <<<<<<<<<<<<<<
 *     #MACRO CONVERT_ARG() (= "True")
 *     cdef PyGF2E arg = self._convert_arg(_arg)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ntl.ntl_GF2E.PyGF2E.__mul__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_arg);
  __Pyx_XDECREF((PyObject *)__pyx_v_res);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ntl/ntl_GF2E.pyx":283
 *     return res
 * 
 *   def __rmul__(PyGF2E self, _arg):             # <<<<<<<<<<<<<<
 *     # Commutative.
 *     return self.__mul__(_arg)
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ntl_8ntl_GF2E_6PyGF2E_37__rmul__(PyObject *__pyx_v_self, PyObject *__pyx_v__arg); /*proto*/
static PyObject *__pyx_pw_3ntl_8ntl_GF2E_6PyGF2E_37__rmul__(PyObject *__pyx_v_self, PyObject *__pyx_v__arg) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__rmul__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_self), __pyx_ptype_3ntl_8ntl_GF2E_PyGF2E, 1, "self", 0))) __PYX_ERR(0, 283, __pyx_L1_error)
  __pyx_r = __pyx_pf_3ntl_8ntl_GF2E_6PyGF2E_36__rmul__(((struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *)__pyx_v_self), ((PyObject *)__pyx_v__arg));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ntl_8ntl_GF2E_6PyGF2E_36__rmul__(struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *__pyx_v_self, PyObject *__pyx_v__arg) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__rmul__", 0);

  /* "ntl/ntl_GF2E.pyx":285
 *   def __rmul__(PyGF2E self, _arg):
 *     # Commutative.
 *     return self.__mul__(_arg)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_mul); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 285, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v__arg};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 285, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ntl/ntl_GF2E.pyx":283
 *     return res
 * 
 *   def __rmul__(PyGF2E self, _arg):             # <<<<<<<<<<<<<<
 *     # Commutative.
 *     return self.__mul__(_arg)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("ntl.ntl_GF2E.PyGF2E.__rmul__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ntl/ntl_GF2E.pyx":291
 *   #IF CTYPE != "ZZ" (= "True")
 * 
 *   def __invert__(PyGF2E self):             # <<<<<<<<<<<<<<
 *     #MACRO CDEF_RES() (= "True")
 *     cdef PyGF2E res = PyGF2E.__new__(PyGF2E)
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ntl_8ntl_GF2E_6PyGF2E_39__invert__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3ntl_8ntl_GF2E_6PyGF2E_39__invert__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__invert__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3ntl_8ntl_GF2E_6PyGF2E_38__invert__(((struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ntl_8ntl_GF2E_6PyGF2E_38__invert__(struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *__pyx_v_self) {
  struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *__pyx_v_res = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__invert__", 0);

  /* "ntl/ntl_GF2E.pyx":293
 *   def __invert__(PyGF2E self):
 *     #MACRO CDEF_RES() (= "True")
 *     cdef PyGF2E res = PyGF2E.__new__(PyGF2E)             # <<<<<<<<<<<<<<
 *     res.ctxt = self.ctxt
 *     self.ctxt.restore()
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_3ntl_8ntl_GF2E_PyGF2E(((PyTypeObject *)__pyx_ptype_3ntl_8ntl_GF2E_PyGF2E), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 293, __pyx_L1_error)
  __Pyx_GOTREF((PyObject *)__pyx_t_1);
  __pyx_v_res = ((struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ntl/ntl_GF2E.pyx":294
 *     #MACRO CDEF_RES() (= "True")
 *     cdef PyGF2E res = PyGF2E.__new__(PyGF2E)
 *     res.ctxt = self.ctxt             # <<<<<<<<<<<<<<
 *     self.ctxt.restore()
 * 
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_self->ctxt);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF((PyObject *)__pyx_v_res->ctxt);
  __Pyx_DECREF((PyObject *)__pyx_v_res->ctxt);
  __pyx_v_res->ctxt = ((struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E_Context *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ntl/ntl_GF2E.pyx":295
 *     cdef PyGF2E res = PyGF2E.__new__(PyGF2E)
 *     res.ctxt = self.ctxt
 *     self.ctxt.restore()             # <<<<<<<<<<<<<<
 * 
 *     _ntlGF2E_inv(res.val, self.val)
 */
  ((struct __pyx_vtabstruct_3ntl_8ntl_GF2E_PyGF2E_Context *)__pyx_v_self->ctxt->__pyx_vtab)->restore(__pyx_v_self->ctxt);

  /* "ntl/ntl_GF2E.pyx":297
 *     self.ctxt.restore()
 * 
 *     _ntlGF2E_inv(res.val, self.val)             # <<<<<<<<<<<<<<
 *     return res
 * 
 */
  inv(__pyx_v_res->val, __pyx_v_self->val);

  /* "ntl/ntl_GF2E.pyx":298
 * 
 *     _ntlGF2E_inv(res.val, self.val)
 *     return res             # <<<<<<<<<<<<<<
 * 
 *   def __truediv__(PyGF2E self, _arg):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_res);
  __pyx_r = ((PyObject *)__pyx_v_res);
  goto __pyx_L0;

  /* "ntl/ntl_GF2E.pyx":291
 *   #IF CTYPE != "ZZ" (= "True")
 * 
 *   def __invert__(PyGF2E self):             # <<<<<<<<<<<<<<
 *     #MACRO CDEF_RES() (= "True")
 *     cdef PyGF2E res = PyGF2E.__new__(PyGF2E)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ntl.ntl_GF2E.PyGF2E.__invert__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_res);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ntl/ntl_GF2E.pyx":300
 *     return res
 * 
 *   def __truediv__(PyGF2E self, _arg):             # <<<<<<<<<<<<<<
 *     #MACRO CONVERT_ARG() (= "True")
 *     cdef PyGF2E arg = self._convert_arg(_arg)
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ntl_8ntl_GF2E_6PyGF2E_41__truediv__(PyObject *__pyx_v_self, PyObject *__pyx_v__arg); /*proto*/
static PyObject *__pyx_pw_3ntl_8ntl_GF2E_6PyGF2E_41__truediv__(PyObject *__pyx_v_self, PyObject *__pyx_v__arg) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__truediv__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_self), __pyx_ptype_3ntl_8ntl_GF2E_PyGF2E, 1, "self", 0))) __PYX_ERR(0, 300, __pyx_L1_error)
  __pyx_r = __pyx_pf_3ntl_8ntl_GF2E_6PyGF2E_40__truediv__(((struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *)__pyx_v_self), ((PyObject *)__pyx_v__arg));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ntl_8ntl_GF2E_6PyGF2E_40__truediv__(struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *__pyx_v_self, PyObject *__pyx_v__arg) {
  struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *__pyx_v_arg = 0;
  struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *__pyx_v_res = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__truediv__", 0);

  /* "ntl/ntl_GF2E.pyx":302
 *   def __truediv__(PyGF2E self, _arg):
 *     #MACRO CONVERT_ARG() (= "True")
 *     cdef PyGF2E arg = self._convert_arg(_arg)             # <<<<<<<<<<<<<<
 *     if arg is None:
 *       return NotImplemented
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_3ntl_8ntl_GF2E_PyGF2E *)__pyx_v_self->__pyx_vtab)->_convert_arg(__pyx_v_self, __pyx_v__arg)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 302, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_arg = ((struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ntl/ntl_GF2E.pyx":303
 *     #MACRO CONVERT_ARG() (= "True")
 *     cdef PyGF2E arg = self._convert_arg(_arg)
 *     if arg is None:             # <<<<<<<<<<<<<<
 *       return NotImplemented
 * 
 */
  __pyx_t_2 = (((PyObject *)__pyx_v_arg) == Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "ntl/ntl_GF2E.pyx":304
 *     cdef PyGF2E arg = self._convert_arg(_arg)
 *     if arg is None:
 *       return NotImplemented             # <<<<<<<<<<<<<<
 * 
 *     #MACRO CDEF_RES() (= "True")
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_builtin_NotImplemented);
    __pyx_r = __pyx_builtin_NotImplemented;
    goto __pyx_L0;

    /* "ntl/ntl_GF2E.pyx":303
 *     #MACRO CONVERT_ARG() (= "True")
 *     cdef PyGF2E arg = self._convert_arg(_arg)
 *     if arg is None:             # <<<<<<<<<<<<<<
 *       return NotImplemented
 * 
 */
  }

  /* "ntl/ntl_GF2E.pyx":307
 * 
 *     #MACRO CDEF_RES() (= "True")
 *     cdef PyGF2E res = PyGF2E.__new__(PyGF2E)             # <<<<<<<<<<<<<<
 *     res.ctxt = self.ctxt
 *     self.ctxt.restore()
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_3ntl_8ntl_GF2E_PyGF2E(((PyTypeObject *)__pyx_ptype_3ntl_8ntl_GF2E_PyGF2E), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 307, __pyx_L1_error)
  __Pyx_GOTREF((PyObject *)__pyx_t_1);
  __pyx_v_res = ((struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ntl/ntl_GF2E.pyx":308
 *     #MACRO CDEF_RES() (= "True")
 *     cdef PyGF2E res = PyGF2E.__new__(PyGF2E)
 *     res.ctxt = self.ctxt             # <<<<<<<<<<<<<<
 *     self.ctxt.restore()
 * 
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_self->ctxt);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF((PyObject *)__pyx_v_res->ctxt);
  __Pyx_DECREF((PyObject *)__pyx_v_res->ctxt);
  __pyx_v_res->ctxt = ((struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E_Context *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ntl/ntl_GF2E.pyx":309
 *     cdef PyGF2E res = PyGF2E.__new__(PyGF2E)
 *     res.ctxt = self.ctxt
 *     self.ctxt.restore()             # <<<<<<<<<<<<<<
 * 
 *     sig_on()
 */
  ((struct __pyx_vtabstruct_3ntl_8ntl_GF2E_PyGF2E_Context *)__pyx_v_self->ctxt->__pyx_vtab)->restore(__pyx_v_self->ctxt);

  /* "ntl/ntl_GF2E.pyx":311
 *     self.ctxt.restore()
 * 
 *     sig_on()             # <<<<<<<<<<<<<<
 *     _ntlGF2E_div(res.val, self.val, arg.val)
 *     sig_off()
 */
  __pyx_t_4 = sig_on(); if (unlikely(__pyx_t_4 == ((int)0))) __PYX_ERR(0, 311, __pyx_L1_error)

  /* "ntl/ntl_GF2E.pyx":312
 * 
 *     sig_on()
 *     _ntlGF2E_div(res.val, self.val, arg.val)             # <<<<<<<<<<<<<<
 *     sig_off()
 *     return res
 */
  div(__pyx_v_res->val, __pyx_v_self->val, __pyx_v_arg->val);

  /* "ntl/ntl_GF2E.pyx":313
 *     sig_on()
 *     _ntlGF2E_div(res.val, self.val, arg.val)
 *     sig_off()             # <<<<<<<<<<<<<<
 *     return res
 * 
 */
  sig_off();

  /* "ntl/ntl_GF2E.pyx":314
 *     _ntlGF2E_div(res.val, self.val, arg.val)
 *     sig_off()
 *     return res             # <<<<<<<<<<<<<<
 * 
 *   def __rtruediv__(PyGF2E self, _arg):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_res);
  __pyx_r = ((PyObject *)__pyx_v_res);
  goto __pyx_L0;

  /* "ntl/ntl_GF2E.pyx":300
 *     return res
 * 
 *   def __truediv__(PyGF2E self, _arg):             # <<<<<<<<<<<<<<
 *     #MACRO CONVERT_ARG() (= "True")
 *     cdef PyGF2E arg = self._convert_arg(_arg)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ntl.ntl_GF2E.PyGF2E.__truediv__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_arg);
  __Pyx_XDECREF((PyObject *)__pyx_v_res);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ntl/ntl_GF2E.pyx":316
 *     return res
 * 
 *   def __rtruediv__(PyGF2E self, _arg):             # <<<<<<<<<<<<<<
 *     return (~self) * _arg
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ntl_8ntl_GF2E_6PyGF2E_43__rtruediv__(PyObject *__pyx_v_self, PyObject *__pyx_v__arg); /*proto*/
static PyObject *__pyx_pw_3ntl_8ntl_GF2E_6PyGF2E_43__rtruediv__(PyObject *__pyx_v_self, PyObject *__pyx_v__arg) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__rtruediv__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_self), __pyx_ptype_3ntl_8ntl_GF2E_PyGF2E, 1, "self", 0))) __PYX_ERR(0, 316, __pyx_L1_error)
  __pyx_r = __pyx_pf_3ntl_8ntl_GF2E_6PyGF2E_42__rtruediv__(((struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *)__pyx_v_self), ((PyObject *)__pyx_v__arg));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ntl_8ntl_GF2E_6PyGF2E_42__rtruediv__(struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *__pyx_v_self, PyObject *__pyx_v__arg) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__rtruediv__", 0);

  /* "ntl/ntl_GF2E.pyx":317
 * 
 *   def __rtruediv__(PyGF2E self, _arg):
 *     return (~self) * _arg             # <<<<<<<<<<<<<<
 * 
 *   #IF CTYPE != "GF2" (= "True")
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyNumber_Invert(((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 317, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_1, __pyx_v__arg); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 317, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "ntl/ntl_GF2E.pyx":316
 *     return res
 * 
 *   def __rtruediv__(PyGF2E self, _arg):             # <<<<<<<<<<<<<<
 *     return (~self) * _arg
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("ntl.ntl_GF2E.PyGF2E.__rtruediv__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ntl/ntl_GF2E.pyx":320
 * 
 *   #IF CTYPE != "GF2" (= "True")
 *   def __pow__(PyGF2E self, _exp, _mod):             # <<<<<<<<<<<<<<
 *     if _mod is not None:
 *       return NotImplemented
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ntl_8ntl_GF2E_6PyGF2E_45__pow__(PyObject *__pyx_v_self, PyObject *__pyx_v__exp, PyObject *__pyx_v__mod); /*proto*/
static PyObject *__pyx_pw_3ntl_8ntl_GF2E_6PyGF2E_45__pow__(PyObject *__pyx_v_self, PyObject *__pyx_v__exp, PyObject *__pyx_v__mod) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pow__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_self), __pyx_ptype_3ntl_8ntl_GF2E_PyGF2E, 1, "self", 0))) __PYX_ERR(0, 320, __pyx_L1_error)
  __pyx_r = __pyx_pf_3ntl_8ntl_GF2E_6PyGF2E_44__pow__(((struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *)__pyx_v_self), ((PyObject *)__pyx_v__exp), ((PyObject *)__pyx_v__mod));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ntl_8ntl_GF2E_6PyGF2E_44__pow__(struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *__pyx_v_self, PyObject *__pyx_v__exp, PyObject *__pyx_v__mod) {
  struct __pyx_obj_3ntl_6ntl_ZZ_PyZZ *__pyx_v_exp = 0;
  struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *__pyx_v_res = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pow__", 0);

  /* "ntl/ntl_GF2E.pyx":321
 *   #IF CTYPE != "GF2" (= "True")
 *   def __pow__(PyGF2E self, _exp, _mod):
 *     if _mod is not None:             # <<<<<<<<<<<<<<
 *       return NotImplemented
 *     cdef PyZZ exp = PyZZ._convert_arg_zz(_exp)
 */
  __pyx_t_1 = (__pyx_v__mod != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "ntl/ntl_GF2E.pyx":322
 *   def __pow__(PyGF2E self, _exp, _mod):
 *     if _mod is not None:
 *       return NotImplemented             # <<<<<<<<<<<<<<
 *     cdef PyZZ exp = PyZZ._convert_arg_zz(_exp)
 *     #MACRO CDEF_RES() (= "True")
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_builtin_NotImplemented);
    __pyx_r = __pyx_builtin_NotImplemented;
    goto __pyx_L0;

    /* "ntl/ntl_GF2E.pyx":321
 *   #IF CTYPE != "GF2" (= "True")
 *   def __pow__(PyGF2E self, _exp, _mod):
 *     if _mod is not None:             # <<<<<<<<<<<<<<
 *       return NotImplemented
 *     cdef PyZZ exp = PyZZ._convert_arg_zz(_exp)
 */
  }

  /* "ntl/ntl_GF2E.pyx":323
 *     if _mod is not None:
 *       return NotImplemented
 *     cdef PyZZ exp = PyZZ._convert_arg_zz(_exp)             # <<<<<<<<<<<<<<
 *     #MACRO CDEF_RES() (= "True")
 *     cdef PyGF2E res = PyGF2E.__new__(PyGF2E)
 */
  __pyx_t_3 = ((PyObject *)__pyx_vtabptr_3ntl_6ntl_ZZ_PyZZ->_convert_arg_zz(__pyx_v__exp)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 323, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_exp = ((struct __pyx_obj_3ntl_6ntl_ZZ_PyZZ *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "ntl/ntl_GF2E.pyx":325
 *     cdef PyZZ exp = PyZZ._convert_arg_zz(_exp)
 *     #MACRO CDEF_RES() (= "True")
 *     cdef PyGF2E res = PyGF2E.__new__(PyGF2E)             # <<<<<<<<<<<<<<
 *     res.ctxt = self.ctxt
 *     self.ctxt.restore()
 */
  __pyx_t_3 = ((PyObject *)__pyx_tp_new_3ntl_8ntl_GF2E_PyGF2E(((PyTypeObject *)__pyx_ptype_3ntl_8ntl_GF2E_PyGF2E), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 325, __pyx_L1_error)
  __Pyx_GOTREF((PyObject *)__pyx_t_3);
  __pyx_v_res = ((struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "ntl/ntl_GF2E.pyx":326
 *     #MACRO CDEF_RES() (= "True")
 *     cdef PyGF2E res = PyGF2E.__new__(PyGF2E)
 *     res.ctxt = self.ctxt             # <<<<<<<<<<<<<<
 *     self.ctxt.restore()
 * 
 */
  __pyx_t_3 = ((PyObject *)__pyx_v_self->ctxt);
  __Pyx_INCREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF((PyObject *)__pyx_v_res->ctxt);
  __Pyx_DECREF((PyObject *)__pyx_v_res->ctxt);
  __pyx_v_res->ctxt = ((struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E_Context *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "ntl/ntl_GF2E.pyx":327
 *     cdef PyGF2E res = PyGF2E.__new__(PyGF2E)
 *     res.ctxt = self.ctxt
 *     self.ctxt.restore()             # <<<<<<<<<<<<<<
 * 
 *     sig_on()
 */
  ((struct __pyx_vtabstruct_3ntl_8ntl_GF2E_PyGF2E_Context *)__pyx_v_self->ctxt->__pyx_vtab)->restore(__pyx_v_self->ctxt);

  /* "ntl/ntl_GF2E.pyx":329
 *     self.ctxt.restore()
 * 
 *     sig_on()             # <<<<<<<<<<<<<<
 *     _ntlGF2E_power(res.val, self.val, exp.val)
 *     sig_off()
 */
  __pyx_t_4 = sig_on(); if (unlikely(__pyx_t_4 == ((int)0))) __PYX_ERR(0, 329, __pyx_L1_error)

  /* "ntl/ntl_GF2E.pyx":330
 * 
 *     sig_on()
 *     _ntlGF2E_power(res.val, self.val, exp.val)             # <<<<<<<<<<<<<<
 *     sig_off()
 *     return res
 */
  power(__pyx_v_res->val, __pyx_v_self->val, __pyx_v_exp->val);

  /* "ntl/ntl_GF2E.pyx":331
 *     sig_on()
 *     _ntlGF2E_power(res.val, self.val, exp.val)
 *     sig_off()             # <<<<<<<<<<<<<<
 *     return res
 *   #ENDIF <NONE> (= "False")
 */
  sig_off();

  /* "ntl/ntl_GF2E.pyx":332
 *     _ntlGF2E_power(res.val, self.val, exp.val)
 *     sig_off()
 *     return res             # <<<<<<<<<<<<<<
 *   #ENDIF <NONE> (= "False")
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_res);
  __pyx_r = ((PyObject *)__pyx_v_res);
  goto __pyx_L0;

  /* "ntl/ntl_GF2E.pyx":320
 * 
 *   #IF CTYPE != "GF2" (= "True")
 *   def __pow__(PyGF2E self, _exp, _mod):             # <<<<<<<<<<<<<<
 *     if _mod is not None:
 *       return NotImplemented
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("ntl.ntl_GF2E.PyGF2E.__pow__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_exp);
  __Pyx_XDECREF((PyObject *)__pyx_v_res);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ntl/ntl_GF2E.pyx":356
 *   #IF CTYPE == "ZZ" (= "False")
 * 
 *   def __hash__(self):             # <<<<<<<<<<<<<<
 *     return hash(self.lift())
 *   #ENDIF <NONE> (= "False")
 */

/* Python wrapper */
static Py_hash_t __pyx_pw_3ntl_8ntl_GF2E_6PyGF2E_47__hash__(PyObject *__pyx_v_self); /*proto*/
static Py_hash_t __pyx_pw_3ntl_8ntl_GF2E_6PyGF2E_47__hash__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  Py_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__hash__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3ntl_8ntl_GF2E_6PyGF2E_46__hash__(((struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_hash_t __pyx_pf_3ntl_8ntl_GF2E_6PyGF2E_46__hash__(struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *__pyx_v_self) {
  Py_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_hash_t __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__hash__", 0);

  /* "ntl/ntl_GF2E.pyx":357
 * 
 *   def __hash__(self):
 *     return hash(self.lift())             # <<<<<<<<<<<<<<
 *   #ENDIF <NONE> (= "False")
 * 
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_3ntl_8ntl_GF2E_PyGF2E *)__pyx_v_self->__pyx_vtab)->lift(__pyx_v_self, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 357, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Hash(__pyx_t_1); if (unlikely(__pyx_t_2 == ((Py_hash_t)-1))) __PYX_ERR(0, 357, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  goto __pyx_L0;

  /* "ntl/ntl_GF2E.pyx":356
 *   #IF CTYPE == "ZZ" (= "False")
 * 
 *   def __hash__(self):             # <<<<<<<<<<<<<<
 *     return hash(self.lift())
 *   #ENDIF <NONE> (= "False")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ntl.ntl_GF2E.PyGF2E.__hash__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  if (unlikely(__pyx_r == -1) && !PyErr_Occurred()) __pyx_r = -2;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ntl/ntl_GF2E.pyx":370
 * 
 * 
 *   cdef bint _init_lift(PyGF2E self, object arg):             # <<<<<<<<<<<<<<
 *     assert False
 * 
 */

static int __pyx_f_3ntl_8ntl_GF2E_6PyGF2E__init_lift(CYTHON_UNUSED struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_arg) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_init_lift", 0);

  /* "ntl/ntl_GF2E.pyx":371
 * 
 *   cdef bint _init_lift(PyGF2E self, object arg):
 *     assert False             # <<<<<<<<<<<<<<
 * 
 *   # projected init: restricted <-- general
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!0)) {
      __Pyx_Raise(__pyx_builtin_AssertionError, 0, 0, 0);
      __PYX_ERR(0, 371, __pyx_L1_error)
    }
  }
  #else
  if ((1)); else __PYX_ERR(0, 371, __pyx_L1_error)
  #endif

  /* "ntl/ntl_GF2E.pyx":370
 * 
 * 
 *   cdef bint _init_lift(PyGF2E self, object arg):             # <<<<<<<<<<<<<<
 *     assert False
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("ntl.ntl_GF2E.PyGF2E._init_lift", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ntl/ntl_GF2E.pyx":379
 *   # GF2 <-- int, ZZ
 *   # GF2E <-- int(->GF2X), ZZ(->GF2X), GF2X
 *   cdef bint _init_proj(PyGF2E self, object arg):             # <<<<<<<<<<<<<<
 *     #IF CTYPE == "ZZ" (= "False")
 * 
 */

static int __pyx_f_3ntl_8ntl_GF2E_6PyGF2E__init_proj(struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *__pyx_v_self, PyObject *__pyx_v_arg) {
  ZZ __pyx_v_tmp;
  GF2X __pyx_v_tmp2;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("_init_proj", 0);

  /* "ntl/ntl_GF2E.pyx":387
 * 
 *     cdef GF2X_c tmp2
 *     if isinstance(arg, int):             # <<<<<<<<<<<<<<
 *       if not ZZ_from_PyLong(tmp, arg):
 *         return False
 */
  __pyx_t_1 = PyInt_Check(__pyx_v_arg); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "ntl/ntl_GF2E.pyx":388
 *     cdef GF2X_c tmp2
 *     if isinstance(arg, int):
 *       if not ZZ_from_PyLong(tmp, arg):             # <<<<<<<<<<<<<<
 *         return False
 *       _ntlGF2X_conv(tmp2, tmp)
 */
    __pyx_t_2 = ((!(ZZ_from_PyLong(__pyx_v_tmp, __pyx_v_arg) != 0)) != 0);
    if (__pyx_t_2) {

      /* "ntl/ntl_GF2E.pyx":389
 *     if isinstance(arg, int):
 *       if not ZZ_from_PyLong(tmp, arg):
 *         return False             # <<<<<<<<<<<<<<
 *       _ntlGF2X_conv(tmp2, tmp)
 *       _ntlGF2E_conv(self.val, tmp2)
 */
      __pyx_r = 0;
      goto __pyx_L0;

      /* "ntl/ntl_GF2E.pyx":388
 *     cdef GF2X_c tmp2
 *     if isinstance(arg, int):
 *       if not ZZ_from_PyLong(tmp, arg):             # <<<<<<<<<<<<<<
 *         return False
 *       _ntlGF2X_conv(tmp2, tmp)
 */
    }

    /* "ntl/ntl_GF2E.pyx":390
 *       if not ZZ_from_PyLong(tmp, arg):
 *         return False
 *       _ntlGF2X_conv(tmp2, tmp)             # <<<<<<<<<<<<<<
 *       _ntlGF2E_conv(self.val, tmp2)
 *       return True
 */
    GF2X_from_ZZ(__pyx_v_tmp2, __pyx_v_tmp);

    /* "ntl/ntl_GF2E.pyx":391
 *         return False
 *       _ntlGF2X_conv(tmp2, tmp)
 *       _ntlGF2E_conv(self.val, tmp2)             # <<<<<<<<<<<<<<
 *       return True
 *     if isinstance(arg, PyZZ):
 */
    conv(__pyx_v_self->val, __pyx_v_tmp2);

    /* "ntl/ntl_GF2E.pyx":392
 *       _ntlGF2X_conv(tmp2, tmp)
 *       _ntlGF2E_conv(self.val, tmp2)
 *       return True             # <<<<<<<<<<<<<<
 *     if isinstance(arg, PyZZ):
 *       _ntlGF2X_conv(tmp2, (<PyZZ>arg).val)
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "ntl/ntl_GF2E.pyx":387
 * 
 *     cdef GF2X_c tmp2
 *     if isinstance(arg, int):             # <<<<<<<<<<<<<<
 *       if not ZZ_from_PyLong(tmp, arg):
 *         return False
 */
  }

  /* "ntl/ntl_GF2E.pyx":393
 *       _ntlGF2E_conv(self.val, tmp2)
 *       return True
 *     if isinstance(arg, PyZZ):             # <<<<<<<<<<<<<<
 *       _ntlGF2X_conv(tmp2, (<PyZZ>arg).val)
 *       _ntlGF2E_conv(self.val, tmp2)
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_arg, __pyx_ptype_3ntl_6ntl_ZZ_PyZZ); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "ntl/ntl_GF2E.pyx":394
 *       return True
 *     if isinstance(arg, PyZZ):
 *       _ntlGF2X_conv(tmp2, (<PyZZ>arg).val)             # <<<<<<<<<<<<<<
 *       _ntlGF2E_conv(self.val, tmp2)
 *       return True
 */
    GF2X_from_ZZ(__pyx_v_tmp2, ((struct __pyx_obj_3ntl_6ntl_ZZ_PyZZ *)__pyx_v_arg)->val);

    /* "ntl/ntl_GF2E.pyx":395
 *     if isinstance(arg, PyZZ):
 *       _ntlGF2X_conv(tmp2, (<PyZZ>arg).val)
 *       _ntlGF2E_conv(self.val, tmp2)             # <<<<<<<<<<<<<<
 *       return True
 *     #ENDIF <NONE> (= "False")
 */
    conv(__pyx_v_self->val, __pyx_v_tmp2);

    /* "ntl/ntl_GF2E.pyx":396
 *       _ntlGF2X_conv(tmp2, (<PyZZ>arg).val)
 *       _ntlGF2E_conv(self.val, tmp2)
 *       return True             # <<<<<<<<<<<<<<
 *     #ENDIF <NONE> (= "False")
 * 
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "ntl/ntl_GF2E.pyx":393
 *       _ntlGF2E_conv(self.val, tmp2)
 *       return True
 *     if isinstance(arg, PyZZ):             # <<<<<<<<<<<<<<
 *       _ntlGF2X_conv(tmp2, (<PyZZ>arg).val)
 *       _ntlGF2E_conv(self.val, tmp2)
 */
  }

  /* "ntl/ntl_GF2E.pyx":400
 * 
 *     #IF CTYPE == "GF2E" (= "True")
 *     if isinstance(arg, PyGF2X):             # <<<<<<<<<<<<<<
 *       _ntlGF2E_conv(self.val, (<PyGF2X>arg).val)
 *       return True
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_arg, __pyx_ptype_3ntl_8ntl_GF2X_PyGF2X); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "ntl/ntl_GF2E.pyx":401
 *     #IF CTYPE == "GF2E" (= "True")
 *     if isinstance(arg, PyGF2X):
 *       _ntlGF2E_conv(self.val, (<PyGF2X>arg).val)             # <<<<<<<<<<<<<<
 *       return True
 *     #ELIF CTYPE == "ZZ_pE" (= "False")
 */
    conv(__pyx_v_self->val, ((struct __pyx_obj_3ntl_8ntl_GF2X_PyGF2X *)__pyx_v_arg)->val);

    /* "ntl/ntl_GF2E.pyx":402
 *     if isinstance(arg, PyGF2X):
 *       _ntlGF2E_conv(self.val, (<PyGF2X>arg).val)
 *       return True             # <<<<<<<<<<<<<<
 *     #ELIF CTYPE == "ZZ_pE" (= "False")
 * 
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "ntl/ntl_GF2E.pyx":400
 * 
 *     #IF CTYPE == "GF2E" (= "True")
 *     if isinstance(arg, PyGF2X):             # <<<<<<<<<<<<<<
 *       _ntlGF2E_conv(self.val, (<PyGF2X>arg).val)
 *       return True
 */
  }

  /* "ntl/ntl_GF2E.pyx":406
 * 
 *     #ENDIF <NONE> (= "False")
 *     return False             # <<<<<<<<<<<<<<
 * 
 *   cdef PyGF2E _convert_arg(PyGF2E self, object arg):
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "ntl/ntl_GF2E.pyx":379
 *   # GF2 <-- int, ZZ
 *   # GF2E <-- int(->GF2X), ZZ(->GF2X), GF2X
 *   cdef bint _init_proj(PyGF2E self, object arg):             # <<<<<<<<<<<<<<
 *     #IF CTYPE == "ZZ" (= "False")
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ntl/ntl_GF2E.pyx":408
 *     return False
 * 
 *   cdef PyGF2E _convert_arg(PyGF2E self, object arg):             # <<<<<<<<<<<<<<
 *     if isinstance(arg, PyGF2E):
 *       #IF HASCONTEXT (= "True")
 */

static struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *__pyx_f_3ntl_8ntl_GF2E_6PyGF2E__convert_arg(struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *__pyx_v_self, PyObject *__pyx_v_arg) {
  struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *__pyx_v_res = 0;
  struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_convert_arg", 0);

  /* "ntl/ntl_GF2E.pyx":409
 * 
 *   cdef PyGF2E _convert_arg(PyGF2E self, object arg):
 *     if isinstance(arg, PyGF2E):             # <<<<<<<<<<<<<<
 *       #IF HASCONTEXT (= "True")
 *       if (<PyGF2E>arg).ctxt is not self.ctxt:
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_arg, __pyx_ptype_3ntl_8ntl_GF2E_PyGF2E); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "ntl/ntl_GF2E.pyx":411
 *     if isinstance(arg, PyGF2E):
 *       #IF HASCONTEXT (= "True")
 *       if (<PyGF2E>arg).ctxt is not self.ctxt:             # <<<<<<<<<<<<<<
 *         raise TypeError("modulus does not match")
 *       #ENDIF <NONE> (= "False")
 */
    __pyx_t_2 = (((struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *)__pyx_v_arg)->ctxt != __pyx_v_self->ctxt);
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (unlikely(__pyx_t_1)) {

      /* "ntl/ntl_GF2E.pyx":412
 *       #IF HASCONTEXT (= "True")
 *       if (<PyGF2E>arg).ctxt is not self.ctxt:
 *         raise TypeError("modulus does not match")             # <<<<<<<<<<<<<<
 *       #ENDIF <NONE> (= "False")
 *       return arg
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 412, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(0, 412, __pyx_L1_error)

      /* "ntl/ntl_GF2E.pyx":411
 *     if isinstance(arg, PyGF2E):
 *       #IF HASCONTEXT (= "True")
 *       if (<PyGF2E>arg).ctxt is not self.ctxt:             # <<<<<<<<<<<<<<
 *         raise TypeError("modulus does not match")
 *       #ENDIF <NONE> (= "False")
 */
    }

    /* "ntl/ntl_GF2E.pyx":414
 *         raise TypeError("modulus does not match")
 *       #ENDIF <NONE> (= "False")
 *       return arg             # <<<<<<<<<<<<<<
 *     #MACRO CDEF_RES() (= "True")
 *     cdef PyGF2E res = PyGF2E.__new__(PyGF2E)
 */
    __Pyx_XDECREF((PyObject *)__pyx_r);
    if (!(likely(((__pyx_v_arg) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_arg, __pyx_ptype_3ntl_8ntl_GF2E_PyGF2E))))) __PYX_ERR(0, 414, __pyx_L1_error)
    __Pyx_INCREF(__pyx_v_arg);
    __pyx_r = ((struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *)__pyx_v_arg);
    goto __pyx_L0;

    /* "ntl/ntl_GF2E.pyx":409
 * 
 *   cdef PyGF2E _convert_arg(PyGF2E self, object arg):
 *     if isinstance(arg, PyGF2E):             # <<<<<<<<<<<<<<
 *       #IF HASCONTEXT (= "True")
 *       if (<PyGF2E>arg).ctxt is not self.ctxt:
 */
  }

  /* "ntl/ntl_GF2E.pyx":416
 *       return arg
 *     #MACRO CDEF_RES() (= "True")
 *     cdef PyGF2E res = PyGF2E.__new__(PyGF2E)             # <<<<<<<<<<<<<<
 *     res.ctxt = self.ctxt
 *     self.ctxt.restore()
 */
  __pyx_t_3 = ((PyObject *)__pyx_tp_new_3ntl_8ntl_GF2E_PyGF2E(((PyTypeObject *)__pyx_ptype_3ntl_8ntl_GF2E_PyGF2E), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 416, __pyx_L1_error)
  __Pyx_GOTREF((PyObject *)__pyx_t_3);
  __pyx_v_res = ((struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "ntl/ntl_GF2E.pyx":417
 *     #MACRO CDEF_RES() (= "True")
 *     cdef PyGF2E res = PyGF2E.__new__(PyGF2E)
 *     res.ctxt = self.ctxt             # <<<<<<<<<<<<<<
 *     self.ctxt.restore()
 * 
 */
  __pyx_t_3 = ((PyObject *)__pyx_v_self->ctxt);
  __Pyx_INCREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF((PyObject *)__pyx_v_res->ctxt);
  __Pyx_DECREF((PyObject *)__pyx_v_res->ctxt);
  __pyx_v_res->ctxt = ((struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E_Context *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "ntl/ntl_GF2E.pyx":418
 *     cdef PyGF2E res = PyGF2E.__new__(PyGF2E)
 *     res.ctxt = self.ctxt
 *     self.ctxt.restore()             # <<<<<<<<<<<<<<
 * 
 *     if res._init_proj(arg):
 */
  ((struct __pyx_vtabstruct_3ntl_8ntl_GF2E_PyGF2E_Context *)__pyx_v_self->ctxt->__pyx_vtab)->restore(__pyx_v_self->ctxt);

  /* "ntl/ntl_GF2E.pyx":420
 *     self.ctxt.restore()
 * 
 *     if res._init_proj(arg):             # <<<<<<<<<<<<<<
 *       return res
 *     return None
 */
  __pyx_t_1 = (((struct __pyx_vtabstruct_3ntl_8ntl_GF2E_PyGF2E *)__pyx_v_res->__pyx_vtab)->_init_proj(__pyx_v_res, __pyx_v_arg) != 0);
  if (__pyx_t_1) {

    /* "ntl/ntl_GF2E.pyx":421
 * 
 *     if res._init_proj(arg):
 *       return res             # <<<<<<<<<<<<<<
 *     return None
 * 
 */
    __Pyx_XDECREF((PyObject *)__pyx_r);
    __Pyx_INCREF((PyObject *)__pyx_v_res);
    __pyx_r = __pyx_v_res;
    goto __pyx_L0;

    /* "ntl/ntl_GF2E.pyx":420
 *     self.ctxt.restore()
 * 
 *     if res._init_proj(arg):             # <<<<<<<<<<<<<<
 *       return res
 *     return None
 */
  }

  /* "ntl/ntl_GF2E.pyx":422
 *     if res._init_proj(arg):
 *       return res
 *     return None             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF((PyObject *)__pyx_r);
  __pyx_r = ((struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *)Py_None); __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "ntl/ntl_GF2E.pyx":408
 *     return False
 * 
 *   cdef PyGF2E _convert_arg(PyGF2E self, object arg):             # <<<<<<<<<<<<<<
 *     if isinstance(arg, PyGF2E):
 *       #IF HASCONTEXT (= "True")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("ntl.ntl_GF2E.PyGF2E._convert_arg", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_res);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ntl/ntl_GF2E.pyx":425
 * 
 * 
 *   def __init__(PyGF2E self, PyGF2E_Context ctxt, arg=None):             # <<<<<<<<<<<<<<
 *     #MACRO SELF_INIT (= "True")
 *     self.ctxt = ctxt
 */

/* Python wrapper */
static int __pyx_pw_3ntl_8ntl_GF2E_6PyGF2E_49__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_3ntl_8ntl_GF2E_6PyGF2E_49__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E_Context *__pyx_v_ctxt = 0;
  PyObject *__pyx_v_arg = 0;
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_ctxt,&__pyx_n_s_arg,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_ctxt,&__pyx_n_s_arg,0};
    #endif
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_ctxt)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 425, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_arg);
          if (value) { values[1] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 425, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__init__") < 0)) __PYX_ERR(0, 425, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_ctxt = ((struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E_Context *)values[0]);
    __pyx_v_arg = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 1, 2, __pyx_nargs); __PYX_ERR(0, 425, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ntl.ntl_GF2E.PyGF2E.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ctxt), __pyx_ptype_3ntl_8ntl_GF2E_PyGF2E_Context, 1, "ctxt", 0))) __PYX_ERR(0, 425, __pyx_L1_error)
  __pyx_r = __pyx_pf_3ntl_8ntl_GF2E_6PyGF2E_48__init__(((struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *)__pyx_v_self), __pyx_v_ctxt, __pyx_v_arg);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3ntl_8ntl_GF2E_6PyGF2E_48__init__(struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *__pyx_v_self, struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E_Context *__pyx_v_ctxt, PyObject *__pyx_v_arg) {
  struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *__pyx_v_tmp = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  GF2E __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "ntl/ntl_GF2E.pyx":427
 *   def __init__(PyGF2E self, PyGF2E_Context ctxt, arg=None):
 *     #MACRO SELF_INIT (= "True")
 *     self.ctxt = ctxt             # <<<<<<<<<<<<<<
 *     ctxt.restore()
 * 
 */
  __Pyx_INCREF((PyObject *)__pyx_v_ctxt);
  __Pyx_GIVEREF((PyObject *)__pyx_v_ctxt);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->ctxt);
  __Pyx_DECREF((PyObject *)__pyx_v_self->ctxt);
  __pyx_v_self->ctxt = __pyx_v_ctxt;

  /* "ntl/ntl_GF2E.pyx":428
 *     #MACRO SELF_INIT (= "True")
 *     self.ctxt = ctxt
 *     ctxt.restore()             # <<<<<<<<<<<<<<
 * 
 *     if arg is None:
 */
  ((struct __pyx_vtabstruct_3ntl_8ntl_GF2E_PyGF2E_Context *)__pyx_v_ctxt->__pyx_vtab)->restore(__pyx_v_ctxt);

  /* "ntl/ntl_GF2E.pyx":430
 *     ctxt.restore()
 * 
 *     if arg is None:             # <<<<<<<<<<<<<<
 *       return
 *     if isinstance(arg, PyGF2E):
 */
  __pyx_t_1 = (__pyx_v_arg == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "ntl/ntl_GF2E.pyx":431
 * 
 *     if arg is None:
 *       return             # <<<<<<<<<<<<<<
 *     if isinstance(arg, PyGF2E):
 *       return
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "ntl/ntl_GF2E.pyx":430
 *     ctxt.restore()
 * 
 *     if arg is None:             # <<<<<<<<<<<<<<
 *       return
 *     if isinstance(arg, PyGF2E):
 */
  }

  /* "ntl/ntl_GF2E.pyx":432
 *     if arg is None:
 *       return
 *     if isinstance(arg, PyGF2E):             # <<<<<<<<<<<<<<
 *       return
 *     cdef PyGF2E tmp = self._convert_arg(arg)
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_arg, __pyx_ptype_3ntl_8ntl_GF2E_PyGF2E); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "ntl/ntl_GF2E.pyx":433
 *       return
 *     if isinstance(arg, PyGF2E):
 *       return             # <<<<<<<<<<<<<<
 *     cdef PyGF2E tmp = self._convert_arg(arg)
 *     if tmp is None:
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "ntl/ntl_GF2E.pyx":432
 *     if arg is None:
 *       return
 *     if isinstance(arg, PyGF2E):             # <<<<<<<<<<<<<<
 *       return
 *     cdef PyGF2E tmp = self._convert_arg(arg)
 */
  }

  /* "ntl/ntl_GF2E.pyx":434
 *     if isinstance(arg, PyGF2E):
 *       return
 *     cdef PyGF2E tmp = self._convert_arg(arg)             # <<<<<<<<<<<<<<
 *     if tmp is None:
 *       raise TypeError("conversion failed")
 */
  __pyx_t_3 = ((PyObject *)((struct __pyx_vtabstruct_3ntl_8ntl_GF2E_PyGF2E *)__pyx_v_self->__pyx_vtab)->_convert_arg(__pyx_v_self, __pyx_v_arg)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 434, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_tmp = ((struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "ntl/ntl_GF2E.pyx":435
 *       return
 *     cdef PyGF2E tmp = self._convert_arg(arg)
 *     if tmp is None:             # <<<<<<<<<<<<<<
 *       raise TypeError("conversion failed")
 *     self.val = tmp.val
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_tmp) == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (unlikely(__pyx_t_2)) {

    /* "ntl/ntl_GF2E.pyx":436
 *     cdef PyGF2E tmp = self._convert_arg(arg)
 *     if tmp is None:
 *       raise TypeError("conversion failed")             # <<<<<<<<<<<<<<
 *     self.val = tmp.val
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 436, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 436, __pyx_L1_error)

    /* "ntl/ntl_GF2E.pyx":435
 *       return
 *     cdef PyGF2E tmp = self._convert_arg(arg)
 *     if tmp is None:             # <<<<<<<<<<<<<<
 *       raise TypeError("conversion failed")
 *     self.val = tmp.val
 */
  }

  /* "ntl/ntl_GF2E.pyx":437
 *     if tmp is None:
 *       raise TypeError("conversion failed")
 *     self.val = tmp.val             # <<<<<<<<<<<<<<
 * 
 */
  __pyx_t_4 = __pyx_v_tmp->val;
  __pyx_v_self->val = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_4);

  /* "ntl/ntl_GF2E.pyx":425
 * 
 * 
 *   def __init__(PyGF2E self, PyGF2E_Context ctxt, arg=None):             # <<<<<<<<<<<<<<
 *     #MACRO SELF_INIT (= "True")
 *     self.ctxt = ctxt
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("ntl.ntl_GF2E.PyGF2E.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_tmp);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.val cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ntl_8ntl_GF2E_6PyGF2E_51__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_3ntl_8ntl_GF2E_6PyGF2E_51__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ntl_8ntl_GF2E_6PyGF2E_51__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_3ntl_8ntl_GF2E_6PyGF2E_51__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_3ntl_8ntl_GF2E_6PyGF2E_50__reduce_cython__(((struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ntl_8ntl_GF2E_6PyGF2E_50__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "self.val cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self.val cannot be converted to a Python object for pickling"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self_val_cannot_be_converted_to, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.val cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("ntl.ntl_GF2E.PyGF2E.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.val cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.val cannot be converted to a Python object for pickling"
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ntl_8ntl_GF2E_6PyGF2E_53__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_3ntl_8ntl_GF2E_6PyGF2E_53__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ntl_8ntl_GF2E_6PyGF2E_53__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_3ntl_8ntl_GF2E_6PyGF2E_53__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ntl.ntl_GF2E.PyGF2E.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3ntl_8ntl_GF2E_6PyGF2E_52__setstate_cython__(((struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ntl_8ntl_GF2E_6PyGF2E_52__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError, "self.val cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self.val cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self_val_cannot_be_converted_to, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.val cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.val cannot be converted to a Python object for pickling"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("ntl.ntl_GF2E.PyGF2E.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cysignals/signals.pxd":57
 * # (PyErr_Occurred() is non-NULL). To Cython, it will look like
 * # cython_check_exception() actually raised the exception.
 * cdef inline void cython_check_exception() nogil except *:             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

static CYTHON_INLINE void __pyx_f_9cysignals_7signals_cython_check_exception(void) {

  /* function exit code */
}

/* "cysignals/signals.pxd":63
 * cdef void verify_exc_value()
 * 
 * cdef inline PyObject* sig_occurred():             # <<<<<<<<<<<<<<
 *     """
 *     Borrowed reference to the exception which is currently being
 */

static CYTHON_INLINE PyObject *__pyx_f_9cysignals_7signals_sig_occurred(void) {
  PyObject *__pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("sig_occurred", 0);

  /* "cysignals/signals.pxd":77
 *     exception is stored somewhere.
 *     """
 *     if unlikely(cysigs.exc_value is not NULL):             # <<<<<<<<<<<<<<
 *         verify_exc_value()
 *     return cysigs.exc_value
 */
  __pyx_t_1 = (unlikely((cysigs.exc_value != NULL)) != 0);
  if (__pyx_t_1) {

    /* "cysignals/signals.pxd":78
 *     """
 *     if unlikely(cysigs.exc_value is not NULL):
 *         verify_exc_value()             # <<<<<<<<<<<<<<
 *     return cysigs.exc_value
 * 
 */
    __pyx_f_9cysignals_7signals_verify_exc_value();

    /* "cysignals/signals.pxd":77
 *     exception is stored somewhere.
 *     """
 *     if unlikely(cysigs.exc_value is not NULL):             # <<<<<<<<<<<<<<
 *         verify_exc_value()
 *     return cysigs.exc_value
 */
  }

  /* "cysignals/signals.pxd":79
 *     if unlikely(cysigs.exc_value is not NULL):
 *         verify_exc_value()
 *     return cysigs.exc_value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = cysigs.exc_value;
  goto __pyx_L0;

  /* "cysignals/signals.pxd":63
 * cdef void verify_exc_value()
 * 
 * cdef inline PyObject* sig_occurred():             # <<<<<<<<<<<<<<
 *     """
 *     Borrowed reference to the exception which is currently being
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cysignals/signals.pxd":93
 * 
 * 
 * cdef inline void __generate_declarations():             # <<<<<<<<<<<<<<
 *     cysigs
 *     _sig_on_interrupt_received
 */

static CYTHON_INLINE void __pyx_f_9cysignals_7signals___generate_declarations(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__generate_declarations", 0);

  /* "cysignals/signals.pxd":94
 * 
 * cdef inline void __generate_declarations():
 *     cysigs             # <<<<<<<<<<<<<<
 *     _sig_on_interrupt_received
 *     _sig_on_recover
 */
  (void)(cysigs);

  /* "cysignals/signals.pxd":95
 * cdef inline void __generate_declarations():
 *     cysigs
 *     _sig_on_interrupt_received             # <<<<<<<<<<<<<<
 *     _sig_on_recover
 *     _sig_off_warning
 */
  (void)(_sig_on_interrupt_received);

  /* "cysignals/signals.pxd":96
 *     cysigs
 *     _sig_on_interrupt_received
 *     _sig_on_recover             # <<<<<<<<<<<<<<
 *     _sig_off_warning
 *     print_backtrace
 */
  (void)(_sig_on_recover);

  /* "cysignals/signals.pxd":97
 *     _sig_on_interrupt_received
 *     _sig_on_recover
 *     _sig_off_warning             # <<<<<<<<<<<<<<
 *     print_backtrace
 */
  (void)(_sig_off_warning);

  /* "cysignals/signals.pxd":98
 *     _sig_on_recover
 *     _sig_off_warning
 *     print_backtrace             # <<<<<<<<<<<<<<
 */
  (void)(print_backtrace);

  /* "cysignals/signals.pxd":93
 * 
 * 
 * cdef inline void __generate_declarations():             # <<<<<<<<<<<<<<
 *     cysigs
 *     _sig_on_interrupt_received
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}
static struct __pyx_vtabstruct_3ntl_8ntl_GF2E_PyGF2E_Context __pyx_vtable_3ntl_8ntl_GF2E_PyGF2E_Context;

static PyObject *__pyx_tp_new_3ntl_8ntl_GF2E_PyGF2E_Context(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E_Context *p;
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  p = ((struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E_Context *)o);
  p->__pyx_vtab = __pyx_vtabptr_3ntl_8ntl_GF2E_PyGF2E_Context;
  new((void*)&(p->ctxt)) GF2EContext();
  p->_mod = ((struct __pyx_obj_3ntl_8ntl_GF2X_PyGF2X *)Py_None); Py_INCREF(Py_None);
  return o;
}

#if !CYTHON_COMPILING_IN_LIMITED_API
static void __pyx_tp_dealloc_3ntl_8ntl_GF2E_PyGF2E_Context(PyObject *o) {
  struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E_Context *p = (struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E_Context *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  if (p->__weakref__) PyObject_ClearWeakRefs(o);
  __Pyx_call_destructor(p->ctxt);
  Py_CLEAR(p->_mod);
  (*Py_TYPE(o)->tp_free)(o);
}
#endif

static int __pyx_tp_traverse_3ntl_8ntl_GF2E_PyGF2E_Context(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E_Context *p = (struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E_Context *)o;
  if (p->_mod) {
    e = (*v)(((PyObject *)p->_mod), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_3ntl_8ntl_GF2E_PyGF2E_Context(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E_Context *p = (struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E_Context *)o;
  tmp = ((PyObject*)p->_mod);
  p->_mod = ((struct __pyx_obj_3ntl_8ntl_GF2X_PyGF2X *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_tp_richcompare_3ntl_8ntl_GF2E_PyGF2E_Context(PyObject *o1, PyObject *o2, int op) {
  switch (op) {
    case Py_EQ: {
      return __pyx_pw_3ntl_8ntl_GF2E_14PyGF2E_Context_7__eq__(o1, o2);
    }
    case Py_NE: {
      PyObject *ret;
      ret = __pyx_pw_3ntl_8ntl_GF2E_14PyGF2E_Context_7__eq__(o1, o2);
      if (likely(ret && ret != Py_NotImplemented)) {
        int b = __Pyx_PyObject_IsTrue(ret); Py_DECREF(ret);
        if (unlikely(b < 0)) return NULL;
        ret = (b) ? Py_False : Py_True;
        Py_INCREF(ret);
      }
      return ret;
    }
    default: {
      return __Pyx_NewRef(Py_NotImplemented);
    }
  }
}

static PyObject *__pyx_getprop_3ntl_8ntl_GF2E_14PyGF2E_Context_P(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3ntl_8ntl_GF2E_14PyGF2E_Context_1P_1__get__(o);
}

static PyMethodDef __pyx_methods_3ntl_8ntl_GF2E_PyGF2E_Context[] = {
  {"random", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ntl_8ntl_GF2E_14PyGF2E_Context_9random, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ntl_8ntl_GF2E_14PyGF2E_Context_11__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ntl_8ntl_GF2E_14PyGF2E_Context_13__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_3ntl_8ntl_GF2E_PyGF2E_Context[] = {
  {(char *)"P", __pyx_getprop_3ntl_8ntl_GF2E_14PyGF2E_Context_P, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};
#if CYTHON_COMPILING_IN_LIMITED_API
static PyType_Slot __pyx_type_3ntl_8ntl_GF2E_PyGF2E_Context_slots[] = {
  {Py_tp_call, (void *)__pyx_pw_3ntl_8ntl_GF2E_14PyGF2E_Context_5__call__},
  {Py_tp_getattro, (void *)PyObject_GenericGetAttr},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_3ntl_8ntl_GF2E_PyGF2E_Context},
  {Py_tp_clear, (void *)__pyx_tp_clear_3ntl_8ntl_GF2E_PyGF2E_Context},
  {Py_tp_richcompare, (void *)__pyx_tp_richcompare_3ntl_8ntl_GF2E_PyGF2E_Context},
  {Py_tp_methods, (void *)__pyx_methods_3ntl_8ntl_GF2E_PyGF2E_Context},
  {Py_tp_getset, (void *)__pyx_getsets_3ntl_8ntl_GF2E_PyGF2E_Context},
  {Py_tp_init, (void *)__pyx_pw_3ntl_8ntl_GF2E_14PyGF2E_Context_1__init__},
  {Py_tp_new, (void *)__pyx_tp_new_3ntl_8ntl_GF2E_PyGF2E_Context},
  {0, 0},
};
static PyType_Spec __pyx_type_3ntl_8ntl_GF2E_PyGF2E_Context_spec = {
  "ntl.ntl_GF2E.PyGF2E_Context",
  sizeof(struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E_Context),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_3ntl_8ntl_GF2E_PyGF2E_Context_slots,
};
#else

static PyTypeObject __pyx_type_3ntl_8ntl_GF2E_PyGF2E_Context = {
  PyVarObject_HEAD_INIT(0, 0)
  "ntl.ntl_GF2E.""PyGF2E_Context", /*tp_name*/
  sizeof(struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E_Context), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_3ntl_8ntl_GF2E_PyGF2E_Context, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  __pyx_pw_3ntl_8ntl_GF2E_14PyGF2E_Context_5__call__, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_3ntl_8ntl_GF2E_PyGF2E_Context, /*tp_traverse*/
  __pyx_tp_clear_3ntl_8ntl_GF2E_PyGF2E_Context, /*tp_clear*/
  __pyx_tp_richcompare_3ntl_8ntl_GF2E_PyGF2E_Context, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_3ntl_8ntl_GF2E_PyGF2E_Context, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_3ntl_8ntl_GF2E_PyGF2E_Context, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_3ntl_8ntl_GF2E_14PyGF2E_Context_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_3ntl_8ntl_GF2E_PyGF2E_Context, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};
#endif
static struct __pyx_vtabstruct_3ntl_8ntl_GF2E_PyGF2E __pyx_vtable_3ntl_8ntl_GF2E_PyGF2E;

static PyObject *__pyx_tp_new_3ntl_8ntl_GF2E_PyGF2E(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *p;
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  p = ((struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *)o);
  p->__pyx_vtab = __pyx_vtabptr_3ntl_8ntl_GF2E_PyGF2E;
  new((void*)&(p->val)) GF2E();
  p->ctxt = ((struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E_Context *)Py_None); Py_INCREF(Py_None);
  return o;
}

#if !CYTHON_COMPILING_IN_LIMITED_API
static void __pyx_tp_dealloc_3ntl_8ntl_GF2E_PyGF2E(PyObject *o) {
  struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *p = (struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->val);
  Py_CLEAR(p->ctxt);
  (*Py_TYPE(o)->tp_free)(o);
}
#endif

static int __pyx_tp_traverse_3ntl_8ntl_GF2E_PyGF2E(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *p = (struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *)o;
  if (p->ctxt) {
    e = (*v)(((PyObject *)p->ctxt), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_3ntl_8ntl_GF2E_PyGF2E(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *p = (struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *)o;
  tmp = ((PyObject*)p->ctxt);
  p->ctxt = ((struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E_Context *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_tp_richcompare_3ntl_8ntl_GF2E_PyGF2E(PyObject *o1, PyObject *o2, int op) {
  switch (op) {
    case Py_EQ: {
      return __pyx_pw_3ntl_8ntl_GF2E_6PyGF2E_13__eq__(o1, o2);
    }
    case Py_NE: {
      PyObject *ret;
      ret = __pyx_pw_3ntl_8ntl_GF2E_6PyGF2E_13__eq__(o1, o2);
      if (likely(ret && ret != Py_NotImplemented)) {
        int b = __Pyx_PyObject_IsTrue(ret); Py_DECREF(ret);
        if (unlikely(b < 0)) return NULL;
        ret = (b) ? Py_False : Py_True;
        Py_INCREF(ret);
      }
      return ret;
    }
    default: {
      return __Pyx_NewRef(Py_NotImplemented);
    }
  }
}

static CYTHON_INLINE PyObject *__pyx_nb_add_3ntl_8ntl_GF2E_PyGF2E_maybe_call_slot(PyTypeObject* type, PyObject *left, PyObject *right ) {
    binaryfunc slot;
#if CYTHON_USE_TYPE_SLOTS || PY_MAJOR_VERSION < 3 || CYTHON_COMPILING_IN_PYPY
    slot = type->tp_as_number ? type->tp_as_number->nb_add : NULL;
#else
    slot = (binaryfunc) PyType_GetSlot(type, Py_nb_add);
#endif
    return slot ? slot(left, right ) : __Pyx_NewRef(Py_NotImplemented);
}
static PyObject *__pyx_nb_add_3ntl_8ntl_GF2E_PyGF2E(PyObject *left, PyObject *right ) {
    int maybe_self_is_left, maybe_self_is_right = 0;
    maybe_self_is_left = Py_TYPE(left) == Py_TYPE(right)
#if CYTHON_USE_TYPE_SLOTS
            || (Py_TYPE(left)->tp_as_number && Py_TYPE(left)->tp_as_number->nb_add == &__pyx_nb_add_3ntl_8ntl_GF2E_PyGF2E)
#endif
            || __Pyx_TypeCheck(left, __pyx_ptype_3ntl_8ntl_GF2E_PyGF2E);
    if (!(1)) {
        maybe_self_is_right = Py_TYPE(left) == Py_TYPE(right)
#if CYTHON_USE_TYPE_SLOTS
                || (Py_TYPE(right)->tp_as_number && Py_TYPE(right)->tp_as_number->nb_add == &__pyx_nb_add_3ntl_8ntl_GF2E_PyGF2E)
#endif
                || __Pyx_TypeCheck(right, __pyx_ptype_3ntl_8ntl_GF2E_PyGF2E);
    }
    if (maybe_self_is_left) {
        PyObject *res;
        if (maybe_self_is_right && !1) {
            res = __pyx_pw_3ntl_8ntl_GF2E_6PyGF2E_7__radd__(right, left);
            if (res != Py_NotImplemented) return res;
            Py_DECREF(res);
            maybe_self_is_right = 0;
        }
        res = __pyx_pw_3ntl_8ntl_GF2E_6PyGF2E_5__add__(left, right);
        if (res != Py_NotImplemented) return res;
        Py_DECREF(res);
    }
    if (1) {
        maybe_self_is_right = Py_TYPE(left) == Py_TYPE(right)
#if CYTHON_USE_TYPE_SLOTS
                || (Py_TYPE(right)->tp_as_number && Py_TYPE(right)->tp_as_number->nb_add == &__pyx_nb_add_3ntl_8ntl_GF2E_PyGF2E)
#endif
                || PyType_IsSubtype(Py_TYPE(right), __pyx_ptype_3ntl_8ntl_GF2E_PyGF2E);
    }
    if (maybe_self_is_right) {
        return __pyx_pw_3ntl_8ntl_GF2E_6PyGF2E_7__radd__(right, left);
    }
    return __Pyx_NewRef(Py_NotImplemented);
}



static CYTHON_INLINE PyObject *__pyx_nb_subtract_3ntl_8ntl_GF2E_PyGF2E_maybe_call_slot(PyTypeObject* type, PyObject *left, PyObject *right ) {
    binaryfunc slot;
#if CYTHON_USE_TYPE_SLOTS || PY_MAJOR_VERSION < 3 || CYTHON_COMPILING_IN_PYPY
    slot = type->tp_as_number ? type->tp_as_number->nb_subtract : NULL;
#else
    slot = (binaryfunc) PyType_GetSlot(type, Py_nb_subtract);
#endif
    return slot ? slot(left, right ) : __Pyx_NewRef(Py_NotImplemented);
}
static PyObject *__pyx_nb_subtract_3ntl_8ntl_GF2E_PyGF2E(PyObject *left, PyObject *right ) {
    int maybe_self_is_left, maybe_self_is_right = 0;
    maybe_self_is_left = Py_TYPE(left) == Py_TYPE(right)
#if CYTHON_USE_TYPE_SLOTS
            || (Py_TYPE(left)->tp_as_number && Py_TYPE(left)->tp_as_number->nb_subtract == &__pyx_nb_subtract_3ntl_8ntl_GF2E_PyGF2E)
#endif
            || __Pyx_TypeCheck(left, __pyx_ptype_3ntl_8ntl_GF2E_PyGF2E);
    if (!(1)) {
        maybe_self_is_right = Py_TYPE(left) == Py_TYPE(right)
#if CYTHON_USE_TYPE_SLOTS
                || (Py_TYPE(right)->tp_as_number && Py_TYPE(right)->tp_as_number->nb_subtract == &__pyx_nb_subtract_3ntl_8ntl_GF2E_PyGF2E)
#endif
                || __Pyx_TypeCheck(right, __pyx_ptype_3ntl_8ntl_GF2E_PyGF2E);
    }
    if (maybe_self_is_left) {
        PyObject *res;
        if (maybe_self_is_right && !1) {
            res = __pyx_pw_3ntl_8ntl_GF2E_6PyGF2E_11__rsub__(right, left);
            if (res != Py_NotImplemented) return res;
            Py_DECREF(res);
            maybe_self_is_right = 0;
        }
        res = __pyx_pw_3ntl_8ntl_GF2E_6PyGF2E_9__sub__(left, right);
        if (res != Py_NotImplemented) return res;
        Py_DECREF(res);
    }
    if (1) {
        maybe_self_is_right = Py_TYPE(left) == Py_TYPE(right)
#if CYTHON_USE_TYPE_SLOTS
                || (Py_TYPE(right)->tp_as_number && Py_TYPE(right)->tp_as_number->nb_subtract == &__pyx_nb_subtract_3ntl_8ntl_GF2E_PyGF2E)
#endif
                || PyType_IsSubtype(Py_TYPE(right), __pyx_ptype_3ntl_8ntl_GF2E_PyGF2E);
    }
    if (maybe_self_is_right) {
        return __pyx_pw_3ntl_8ntl_GF2E_6PyGF2E_11__rsub__(right, left);
    }
    return __Pyx_NewRef(Py_NotImplemented);
}



static CYTHON_INLINE PyObject *__pyx_nb_multiply_3ntl_8ntl_GF2E_PyGF2E_maybe_call_slot(PyTypeObject* type, PyObject *left, PyObject *right ) {
    binaryfunc slot;
#if CYTHON_USE_TYPE_SLOTS || PY_MAJOR_VERSION < 3 || CYTHON_COMPILING_IN_PYPY
    slot = type->tp_as_number ? type->tp_as_number->nb_multiply : NULL;
#else
    slot = (binaryfunc) PyType_GetSlot(type, Py_nb_multiply);
#endif
    return slot ? slot(left, right ) : __Pyx_NewRef(Py_NotImplemented);
}
static PyObject *__pyx_nb_multiply_3ntl_8ntl_GF2E_PyGF2E(PyObject *left, PyObject *right ) {
    int maybe_self_is_left, maybe_self_is_right = 0;
    maybe_self_is_left = Py_TYPE(left) == Py_TYPE(right)
#if CYTHON_USE_TYPE_SLOTS
            || (Py_TYPE(left)->tp_as_number && Py_TYPE(left)->tp_as_number->nb_multiply == &__pyx_nb_multiply_3ntl_8ntl_GF2E_PyGF2E)
#endif
            || __Pyx_TypeCheck(left, __pyx_ptype_3ntl_8ntl_GF2E_PyGF2E);
    if (!(1)) {
        maybe_self_is_right = Py_TYPE(left) == Py_TYPE(right)
#if CYTHON_USE_TYPE_SLOTS
                || (Py_TYPE(right)->tp_as_number && Py_TYPE(right)->tp_as_number->nb_multiply == &__pyx_nb_multiply_3ntl_8ntl_GF2E_PyGF2E)
#endif
                || __Pyx_TypeCheck(right, __pyx_ptype_3ntl_8ntl_GF2E_PyGF2E);
    }
    if (maybe_self_is_left) {
        PyObject *res;
        if (maybe_self_is_right && !1) {
            res = __pyx_pw_3ntl_8ntl_GF2E_6PyGF2E_37__rmul__(right, left);
            if (res != Py_NotImplemented) return res;
            Py_DECREF(res);
            maybe_self_is_right = 0;
        }
        res = __pyx_pw_3ntl_8ntl_GF2E_6PyGF2E_35__mul__(left, right);
        if (res != Py_NotImplemented) return res;
        Py_DECREF(res);
    }
    if (1) {
        maybe_self_is_right = Py_TYPE(left) == Py_TYPE(right)
#if CYTHON_USE_TYPE_SLOTS
                || (Py_TYPE(right)->tp_as_number && Py_TYPE(right)->tp_as_number->nb_multiply == &__pyx_nb_multiply_3ntl_8ntl_GF2E_PyGF2E)
#endif
                || PyType_IsSubtype(Py_TYPE(right), __pyx_ptype_3ntl_8ntl_GF2E_PyGF2E);
    }
    if (maybe_self_is_right) {
        return __pyx_pw_3ntl_8ntl_GF2E_6PyGF2E_37__rmul__(right, left);
    }
    return __Pyx_NewRef(Py_NotImplemented);
}



static CYTHON_INLINE PyObject *__pyx_nb_power_3ntl_8ntl_GF2E_PyGF2E_maybe_call_slot(PyTypeObject* type, PyObject *left, PyObject *right , PyObject* extra_arg) {
    ternaryfunc slot;
#if CYTHON_USE_TYPE_SLOTS || PY_MAJOR_VERSION < 3 || CYTHON_COMPILING_IN_PYPY
    slot = type->tp_as_number ? type->tp_as_number->nb_power : NULL;
#else
    slot = (ternaryfunc) PyType_GetSlot(type, Py_nb_power);
#endif
    return slot ? slot(left, right , extra_arg) : __Pyx_NewRef(Py_NotImplemented);
}
static PyObject *__pyx_nb_power_3ntl_8ntl_GF2E_PyGF2E(PyObject *left, PyObject *right , PyObject* extra_arg) {
    int maybe_self_is_left, maybe_self_is_right = 0;
    maybe_self_is_left = Py_TYPE(left) == Py_TYPE(right)
#if CYTHON_USE_TYPE_SLOTS
            || (Py_TYPE(left)->tp_as_number && Py_TYPE(left)->tp_as_number->nb_power == &__pyx_nb_power_3ntl_8ntl_GF2E_PyGF2E)
#endif
            || __Pyx_TypeCheck(left, __pyx_ptype_3ntl_8ntl_GF2E_PyGF2E);
    if (!(1)) {
        maybe_self_is_right = Py_TYPE(left) == Py_TYPE(right)
#if CYTHON_USE_TYPE_SLOTS
                || (Py_TYPE(right)->tp_as_number && Py_TYPE(right)->tp_as_number->nb_power == &__pyx_nb_power_3ntl_8ntl_GF2E_PyGF2E)
#endif
                || __Pyx_TypeCheck(right, __pyx_ptype_3ntl_8ntl_GF2E_PyGF2E);
    }
    if (maybe_self_is_left) {
        PyObject *res;
        if (maybe_self_is_right && !1) {
            res = __pyx_nb_power_3ntl_8ntl_GF2E_PyGF2E_maybe_call_slot(Py_TYPE(right)->tp_base, left, right , extra_arg);
            if (res != Py_NotImplemented) return res;
            Py_DECREF(res);
            maybe_self_is_right = 0;
        }
        res = __pyx_pw_3ntl_8ntl_GF2E_6PyGF2E_45__pow__(left, right, extra_arg);
        if (res != Py_NotImplemented) return res;
        Py_DECREF(res);
    }
    if (1) {
        maybe_self_is_right = Py_TYPE(left) == Py_TYPE(right)
#if CYTHON_USE_TYPE_SLOTS
                || (Py_TYPE(right)->tp_as_number && Py_TYPE(right)->tp_as_number->nb_power == &__pyx_nb_power_3ntl_8ntl_GF2E_PyGF2E)
#endif
                || PyType_IsSubtype(Py_TYPE(right), __pyx_ptype_3ntl_8ntl_GF2E_PyGF2E);
    }
    if (maybe_self_is_right) {
        return __pyx_nb_power_3ntl_8ntl_GF2E_PyGF2E_maybe_call_slot(Py_TYPE(right)->tp_base, left, right , extra_arg);
    }
    return __Pyx_NewRef(Py_NotImplemented);
}



static CYTHON_INLINE PyObject *__pyx_nb_true_divide_3ntl_8ntl_GF2E_PyGF2E_maybe_call_slot(PyTypeObject* type, PyObject *left, PyObject *right ) {
    binaryfunc slot;
#if CYTHON_USE_TYPE_SLOTS || PY_MAJOR_VERSION < 3 || CYTHON_COMPILING_IN_PYPY
    slot = type->tp_as_number ? type->tp_as_number->nb_true_divide : NULL;
#else
    slot = (binaryfunc) PyType_GetSlot(type, Py_nb_true_divide);
#endif
    return slot ? slot(left, right ) : __Pyx_NewRef(Py_NotImplemented);
}
static PyObject *__pyx_nb_true_divide_3ntl_8ntl_GF2E_PyGF2E(PyObject *left, PyObject *right ) {
    int maybe_self_is_left, maybe_self_is_right = 0;
    maybe_self_is_left = Py_TYPE(left) == Py_TYPE(right)
#if CYTHON_USE_TYPE_SLOTS
            || (Py_TYPE(left)->tp_as_number && Py_TYPE(left)->tp_as_number->nb_true_divide == &__pyx_nb_true_divide_3ntl_8ntl_GF2E_PyGF2E)
#endif
            || __Pyx_TypeCheck(left, __pyx_ptype_3ntl_8ntl_GF2E_PyGF2E);
    if (!(1)) {
        maybe_self_is_right = Py_TYPE(left) == Py_TYPE(right)
#if CYTHON_USE_TYPE_SLOTS
                || (Py_TYPE(right)->tp_as_number && Py_TYPE(right)->tp_as_number->nb_true_divide == &__pyx_nb_true_divide_3ntl_8ntl_GF2E_PyGF2E)
#endif
                || __Pyx_TypeCheck(right, __pyx_ptype_3ntl_8ntl_GF2E_PyGF2E);
    }
    if (maybe_self_is_left) {
        PyObject *res;
        if (maybe_self_is_right && !1) {
            res = __pyx_pw_3ntl_8ntl_GF2E_6PyGF2E_43__rtruediv__(right, left);
            if (res != Py_NotImplemented) return res;
            Py_DECREF(res);
            maybe_self_is_right = 0;
        }
        res = __pyx_pw_3ntl_8ntl_GF2E_6PyGF2E_41__truediv__(left, right);
        if (res != Py_NotImplemented) return res;
        Py_DECREF(res);
    }
    if (1) {
        maybe_self_is_right = Py_TYPE(left) == Py_TYPE(right)
#if CYTHON_USE_TYPE_SLOTS
                || (Py_TYPE(right)->tp_as_number && Py_TYPE(right)->tp_as_number->nb_true_divide == &__pyx_nb_true_divide_3ntl_8ntl_GF2E_PyGF2E)
#endif
                || PyType_IsSubtype(Py_TYPE(right), __pyx_ptype_3ntl_8ntl_GF2E_PyGF2E);
    }
    if (maybe_self_is_right) {
        return __pyx_pw_3ntl_8ntl_GF2E_6PyGF2E_43__rtruediv__(right, left);
    }
    return __Pyx_NewRef(Py_NotImplemented);
}



static PyMethodDef __pyx_methods_3ntl_8ntl_GF2E_PyGF2E[] = {
  {"_require_context", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ntl_8ntl_GF2E_6PyGF2E_1_require_context, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__neq__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ntl_8ntl_GF2E_6PyGF2E_15__neq__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ntl_8ntl_GF2E_6PyGF2E_51__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ntl_8ntl_GF2E_6PyGF2E_53__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_COMPILING_IN_LIMITED_API
static PyType_Slot __pyx_type_3ntl_8ntl_GF2E_PyGF2E_slots[] = {
  {Py_tp_repr, (void *)__pyx_pw_3ntl_8ntl_GF2E_6PyGF2E_21__repr__},
  {Py_nb_add, (void *)__pyx_nb_add_3ntl_8ntl_GF2E_PyGF2E},
  {Py_nb_subtract, (void *)__pyx_nb_subtract_3ntl_8ntl_GF2E_PyGF2E},
  {Py_nb_multiply, (void *)__pyx_nb_multiply_3ntl_8ntl_GF2E_PyGF2E},
  {Py_nb_power, (void *)__pyx_nb_power_3ntl_8ntl_GF2E_PyGF2E},
  {Py_nb_negative, (void *)__pyx_pw_3ntl_8ntl_GF2E_6PyGF2E_3__neg__},
  {Py_nb_nonzero, (void *)__pyx_pw_3ntl_8ntl_GF2E_6PyGF2E_17__bool__},
  {Py_nb_invert, (void *)__pyx_pw_3ntl_8ntl_GF2E_6PyGF2E_39__invert__},
  {Py_nb_int, (void *)__pyx_pw_3ntl_8ntl_GF2E_6PyGF2E_29__int__},
  #if PY_MAJOR_VERSION < 3
  {Py_nb_long, (void *)__pyx_pw_3ntl_8ntl_GF2E_6PyGF2E_29__int__},
  #endif
  {Py_nb_true_divide, (void *)__pyx_nb_true_divide_3ntl_8ntl_GF2E_PyGF2E},
  {Py_nb_index, (void *)__pyx_pw_3ntl_8ntl_GF2E_6PyGF2E_27__index__},
  {Py_tp_hash, (void *)__pyx_pw_3ntl_8ntl_GF2E_6PyGF2E_47__hash__},
  {Py_tp_str, (void *)__pyx_pw_3ntl_8ntl_GF2E_6PyGF2E_19__str__},
  {Py_tp_getattro, (void *)PyObject_GenericGetAttr},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_3ntl_8ntl_GF2E_PyGF2E},
  {Py_tp_clear, (void *)__pyx_tp_clear_3ntl_8ntl_GF2E_PyGF2E},
  {Py_tp_richcompare, (void *)__pyx_tp_richcompare_3ntl_8ntl_GF2E_PyGF2E},
  {Py_tp_methods, (void *)__pyx_methods_3ntl_8ntl_GF2E_PyGF2E},
  {Py_tp_init, (void *)__pyx_pw_3ntl_8ntl_GF2E_6PyGF2E_49__init__},
  {Py_tp_new, (void *)__pyx_tp_new_3ntl_8ntl_GF2E_PyGF2E},
  {0, 0},
};
static PyType_Spec __pyx_type_3ntl_8ntl_GF2E_PyGF2E_spec = {
  "ntl.ntl_GF2E.PyGF2E",
  sizeof(struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_3ntl_8ntl_GF2E_PyGF2E_slots,
};
#else

static PyNumberMethods __pyx_tp_as_number_PyGF2E = {
  __pyx_nb_add_3ntl_8ntl_GF2E_PyGF2E, /*nb_add*/
  __pyx_nb_subtract_3ntl_8ntl_GF2E_PyGF2E, /*nb_subtract*/
  __pyx_nb_multiply_3ntl_8ntl_GF2E_PyGF2E, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  __pyx_nb_power_3ntl_8ntl_GF2E_PyGF2E, /*nb_power*/
  __pyx_pw_3ntl_8ntl_GF2E_6PyGF2E_3__neg__, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  __pyx_pw_3ntl_8ntl_GF2E_6PyGF2E_17__bool__, /*nb_nonzero*/
  __pyx_pw_3ntl_8ntl_GF2E_6PyGF2E_39__invert__, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_coerce*/
  #endif
  __pyx_pw_3ntl_8ntl_GF2E_6PyGF2E_29__int__, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  __pyx_pw_3ntl_8ntl_GF2E_6PyGF2E_29__int__, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  __pyx_nb_true_divide_3ntl_8ntl_GF2E_PyGF2E, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  __pyx_pw_3ntl_8ntl_GF2E_6PyGF2E_27__index__, /*nb_index*/
  #if PY_VERSION_HEX >= 0x03050000
  0, /*nb_matrix_multiply*/
  #endif
  #if PY_VERSION_HEX >= 0x03050000
  0, /*nb_inplace_matrix_multiply*/
  #endif
};

static PyTypeObject __pyx_type_3ntl_8ntl_GF2E_PyGF2E = {
  PyVarObject_HEAD_INIT(0, 0)
  "ntl.ntl_GF2E.""PyGF2E", /*tp_name*/
  sizeof(struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_3ntl_8ntl_GF2E_PyGF2E, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_3ntl_8ntl_GF2E_6PyGF2E_21__repr__, /*tp_repr*/
  &__pyx_tp_as_number_PyGF2E, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  __pyx_pw_3ntl_8ntl_GF2E_6PyGF2E_47__hash__, /*tp_hash*/
  0, /*tp_call*/
  __pyx_pw_3ntl_8ntl_GF2E_6PyGF2E_19__str__, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_3ntl_8ntl_GF2E_PyGF2E, /*tp_traverse*/
  __pyx_tp_clear_3ntl_8ntl_GF2E_PyGF2E, /*tp_clear*/
  __pyx_tp_richcompare_3ntl_8ntl_GF2E_PyGF2E, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_3ntl_8ntl_GF2E_PyGF2E, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_3ntl_8ntl_GF2E_6PyGF2E_49__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_3ntl_8ntl_GF2E_PyGF2E, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif
/* #### Code section: pystring_table ### */

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  #if CYTHON_COMPILING_IN_LIMITED_API
  {0, __pyx_k_AssertionError, sizeof(__pyx_k_AssertionError), 0, 0, 1, 1},
  {0, __pyx_k_NotImplemented, sizeof(__pyx_k_NotImplemented), 0, 0, 1, 1},
  {0, __pyx_k_PyGF2E, sizeof(__pyx_k_PyGF2E), 0, 0, 1, 1},
  {0, __pyx_k_PyGF2E_Context, sizeof(__pyx_k_PyGF2E_Context), 0, 0, 1, 1},
  {0, __pyx_k_PyGF2E_Context___reduce_cython, sizeof(__pyx_k_PyGF2E_Context___reduce_cython), 0, 0, 1, 1},
  {0, __pyx_k_PyGF2E_Context___setstate_cython, sizeof(__pyx_k_PyGF2E_Context___setstate_cython), 0, 0, 1, 1},
  {0, __pyx_k_PyGF2E_Context_modulus, sizeof(__pyx_k_PyGF2E_Context_modulus), 0, 0, 1, 1},
  {0, __pyx_k_PyGF2E_Context_random, sizeof(__pyx_k_PyGF2E_Context_random), 0, 0, 1, 1},
  {0, __pyx_k_PyGF2E_Ring, sizeof(__pyx_k_PyGF2E_Ring), 0, 0, 1, 1},
  {0, __pyx_k_PyGF2E___neq, sizeof(__pyx_k_PyGF2E___neq), 0, 0, 1, 1},
  {0, __pyx_k_PyGF2E___reduce_cython, sizeof(__pyx_k_PyGF2E___reduce_cython), 0, 0, 1, 1},
  {0, __pyx_k_PyGF2E___setstate_cython, sizeof(__pyx_k_PyGF2E___setstate_cython), 0, 0, 1, 1},
  {0, __pyx_k_PyGF2E__require_context, sizeof(__pyx_k_PyGF2E__require_context), 0, 0, 1, 1},
  {0, __pyx_k_PyGF2E_is_one, sizeof(__pyx_k_PyGF2E_is_one), 0, 0, 1, 1},
  {0, __pyx_k_PyGF2E_is_zero, sizeof(__pyx_k_PyGF2E_is_zero), 0, 0, 1, 1},
  {0, __pyx_k_PyGF2E_lift, sizeof(__pyx_k_PyGF2E_lift), 0, 0, 1, 1},
  {0, __pyx_k_PyGF2E_parent, sizeof(__pyx_k_PyGF2E_parent), 0, 0, 1, 1},
  {0, __pyx_k_Sequence, sizeof(__pyx_k_Sequence), 0, 0, 1, 1},
  {0, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {0, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {0, __pyx_k__30, sizeof(__pyx_k__30), 0, 0, 1, 1},
  {0, __pyx_k__4, sizeof(__pyx_k__4), 0, 0, 1, 1},
  {0, __pyx_k_arg, sizeof(__pyx_k_arg), 0, 0, 1, 1},
  {0, __pyx_k_arg_2, sizeof(__pyx_k_arg_2), 0, 0, 1, 1},
  {0, __pyx_k_bytes, sizeof(__pyx_k_bytes), 0, 0, 1, 1},
  {0, __pyx_k_class_getitem, sizeof(__pyx_k_class_getitem), 0, 0, 1, 1},
  {0, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {0, __pyx_k_collections_abc, sizeof(__pyx_k_collections_abc), 0, 0, 1, 1},
  {0, __pyx_k_conversion_failed, sizeof(__pyx_k_conversion_failed), 0, 1, 0, 0},
  {0, __pyx_k_ctxt, sizeof(__pyx_k_ctxt), 0, 0, 1, 1},
  {0, __pyx_k_dict, sizeof(__pyx_k_dict), 0, 0, 1, 1},
  {0, __pyx_k_from_bytes, sizeof(__pyx_k_from_bytes), 0, 0, 1, 1},
  {0, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {0, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {0, __pyx_k_initializing, sizeof(__pyx_k_initializing), 0, 0, 1, 1},
  {0, __pyx_k_int, sizeof(__pyx_k_int), 0, 0, 1, 1},
  {0, __pyx_k_invalid_modulus, sizeof(__pyx_k_invalid_modulus), 0, 1, 0, 0},
  {0, __pyx_k_is_one, sizeof(__pyx_k_is_one), 0, 0, 1, 1},
  {0, __pyx_k_is_zero, sizeof(__pyx_k_is_zero), 0, 0, 1, 1},
  {0, __pyx_k_lift, sizeof(__pyx_k_lift), 0, 0, 1, 1},
  {0, __pyx_k_little, sizeof(__pyx_k_little), 0, 1, 0, 1},
  {0, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {0, __pyx_k_mod, sizeof(__pyx_k_mod), 0, 0, 1, 1},
  {0, __pyx_k_moduli, sizeof(__pyx_k_moduli), 0, 0, 1, 1},
  {0, __pyx_k_modulus, sizeof(__pyx_k_modulus), 0, 0, 1, 1},
  {0, __pyx_k_modulus_does_not_match, sizeof(__pyx_k_modulus_does_not_match), 0, 1, 0, 0},
  {0, __pyx_k_mul, sizeof(__pyx_k_mul), 0, 0, 1, 1},
  {0, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {0, __pyx_k_neq, sizeof(__pyx_k_neq), 0, 0, 1, 1},
  {0, __pyx_k_ntl_ntl_GF2E, sizeof(__pyx_k_ntl_ntl_GF2E), 0, 0, 1, 1},
  {0, __pyx_k_ntl_ntl_GF2E_pyx, sizeof(__pyx_k_ntl_ntl_GF2E_pyx), 0, 0, 1, 0},
  {0, __pyx_k_parent, sizeof(__pyx_k_parent), 0, 0, 1, 1},
  {0, __pyx_k_pyx_state, sizeof(__pyx_k_pyx_state), 0, 0, 1, 1},
  {0, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {0, __pyx_k_random, sizeof(__pyx_k_random), 0, 0, 1, 1},
  {0, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {0, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {0, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {0, __pyx_k_ref, sizeof(__pyx_k_ref), 0, 0, 1, 1},
  {0, __pyx_k_require_context, sizeof(__pyx_k_require_context), 0, 0, 1, 1},
  {0, __pyx_k_res, sizeof(__pyx_k_res), 0, 0, 1, 1},
  {0, __pyx_k_self, sizeof(__pyx_k_self), 0, 0, 1, 1},
  {0, __pyx_k_self_ctxt_cannot_be_converted_to, sizeof(__pyx_k_self_ctxt_cannot_be_converted_to), 0, 0, 1, 0},
  {0, __pyx_k_self_val_cannot_be_converted_to, sizeof(__pyx_k_self_val_cannot_be_converted_to), 0, 0, 1, 0},
  {0, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {0, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {0, __pyx_k_slots, sizeof(__pyx_k_slots), 0, 0, 1, 1},
  {0, __pyx_k_spec, sizeof(__pyx_k_spec), 0, 0, 1, 1},
  {0, __pyx_k_staticmethod, sizeof(__pyx_k_staticmethod), 0, 0, 1, 1},
  {0, __pyx_k_stringsource, sizeof(__pyx_k_stringsource), 0, 0, 1, 0},
  {0, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {0, __pyx_k_weakref, sizeof(__pyx_k_weakref), 0, 0, 1, 1},
  #else
  {&__pyx_n_s_AssertionError, __pyx_k_AssertionError, sizeof(__pyx_k_AssertionError), 0, 0, 1, 1},
  {&__pyx_n_s_NotImplemented, __pyx_k_NotImplemented, sizeof(__pyx_k_NotImplemented), 0, 0, 1, 1},
  {&__pyx_n_s_PyGF2E, __pyx_k_PyGF2E, sizeof(__pyx_k_PyGF2E), 0, 0, 1, 1},
  {&__pyx_n_s_PyGF2E_Context, __pyx_k_PyGF2E_Context, sizeof(__pyx_k_PyGF2E_Context), 0, 0, 1, 1},
  {&__pyx_n_s_PyGF2E_Context___reduce_cython, __pyx_k_PyGF2E_Context___reduce_cython, sizeof(__pyx_k_PyGF2E_Context___reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_PyGF2E_Context___setstate_cython, __pyx_k_PyGF2E_Context___setstate_cython, sizeof(__pyx_k_PyGF2E_Context___setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_PyGF2E_Context_modulus, __pyx_k_PyGF2E_Context_modulus, sizeof(__pyx_k_PyGF2E_Context_modulus), 0, 0, 1, 1},
  {&__pyx_n_s_PyGF2E_Context_random, __pyx_k_PyGF2E_Context_random, sizeof(__pyx_k_PyGF2E_Context_random), 0, 0, 1, 1},
  {&__pyx_n_s_PyGF2E_Ring, __pyx_k_PyGF2E_Ring, sizeof(__pyx_k_PyGF2E_Ring), 0, 0, 1, 1},
  {&__pyx_n_s_PyGF2E___neq, __pyx_k_PyGF2E___neq, sizeof(__pyx_k_PyGF2E___neq), 0, 0, 1, 1},
  {&__pyx_n_s_PyGF2E___reduce_cython, __pyx_k_PyGF2E___reduce_cython, sizeof(__pyx_k_PyGF2E___reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_PyGF2E___setstate_cython, __pyx_k_PyGF2E___setstate_cython, sizeof(__pyx_k_PyGF2E___setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_PyGF2E__require_context, __pyx_k_PyGF2E__require_context, sizeof(__pyx_k_PyGF2E__require_context), 0, 0, 1, 1},
  {&__pyx_n_s_PyGF2E_is_one, __pyx_k_PyGF2E_is_one, sizeof(__pyx_k_PyGF2E_is_one), 0, 0, 1, 1},
  {&__pyx_n_s_PyGF2E_is_zero, __pyx_k_PyGF2E_is_zero, sizeof(__pyx_k_PyGF2E_is_zero), 0, 0, 1, 1},
  {&__pyx_n_s_PyGF2E_lift, __pyx_k_PyGF2E_lift, sizeof(__pyx_k_PyGF2E_lift), 0, 0, 1, 1},
  {&__pyx_n_s_PyGF2E_parent, __pyx_k_PyGF2E_parent, sizeof(__pyx_k_PyGF2E_parent), 0, 0, 1, 1},
  {&__pyx_n_s_Sequence, __pyx_k_Sequence, sizeof(__pyx_k_Sequence), 0, 0, 1, 1},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_n_s__30, __pyx_k__30, sizeof(__pyx_k__30), 0, 0, 1, 1},
  {&__pyx_n_s__4, __pyx_k__4, sizeof(__pyx_k__4), 0, 0, 1, 1},
  {&__pyx_n_s_arg, __pyx_k_arg, sizeof(__pyx_k_arg), 0, 0, 1, 1},
  {&__pyx_n_s_arg_2, __pyx_k_arg_2, sizeof(__pyx_k_arg_2), 0, 0, 1, 1},
  {&__pyx_n_s_bytes, __pyx_k_bytes, sizeof(__pyx_k_bytes), 0, 0, 1, 1},
  {&__pyx_n_s_class_getitem, __pyx_k_class_getitem, sizeof(__pyx_k_class_getitem), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_collections_abc, __pyx_k_collections_abc, sizeof(__pyx_k_collections_abc), 0, 0, 1, 1},
  {&__pyx_kp_u_conversion_failed, __pyx_k_conversion_failed, sizeof(__pyx_k_conversion_failed), 0, 1, 0, 0},
  {&__pyx_n_s_ctxt, __pyx_k_ctxt, sizeof(__pyx_k_ctxt), 0, 0, 1, 1},
  {&__pyx_n_s_dict, __pyx_k_dict, sizeof(__pyx_k_dict), 0, 0, 1, 1},
  {&__pyx_n_s_from_bytes, __pyx_k_from_bytes, sizeof(__pyx_k_from_bytes), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_initializing, __pyx_k_initializing, sizeof(__pyx_k_initializing), 0, 0, 1, 1},
  {&__pyx_n_s_int, __pyx_k_int, sizeof(__pyx_k_int), 0, 0, 1, 1},
  {&__pyx_kp_u_invalid_modulus, __pyx_k_invalid_modulus, sizeof(__pyx_k_invalid_modulus), 0, 1, 0, 0},
  {&__pyx_n_s_is_one, __pyx_k_is_one, sizeof(__pyx_k_is_one), 0, 0, 1, 1},
  {&__pyx_n_s_is_zero, __pyx_k_is_zero, sizeof(__pyx_k_is_zero), 0, 0, 1, 1},
  {&__pyx_n_s_lift, __pyx_k_lift, sizeof(__pyx_k_lift), 0, 0, 1, 1},
  {&__pyx_n_u_little, __pyx_k_little, sizeof(__pyx_k_little), 0, 1, 0, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_mod, __pyx_k_mod, sizeof(__pyx_k_mod), 0, 0, 1, 1},
  {&__pyx_n_s_moduli, __pyx_k_moduli, sizeof(__pyx_k_moduli), 0, 0, 1, 1},
  {&__pyx_n_s_modulus, __pyx_k_modulus, sizeof(__pyx_k_modulus), 0, 0, 1, 1},
  {&__pyx_kp_u_modulus_does_not_match, __pyx_k_modulus_does_not_match, sizeof(__pyx_k_modulus_does_not_match), 0, 1, 0, 0},
  {&__pyx_n_s_mul, __pyx_k_mul, sizeof(__pyx_k_mul), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_neq, __pyx_k_neq, sizeof(__pyx_k_neq), 0, 0, 1, 1},
  {&__pyx_n_s_ntl_ntl_GF2E, __pyx_k_ntl_ntl_GF2E, sizeof(__pyx_k_ntl_ntl_GF2E), 0, 0, 1, 1},
  {&__pyx_kp_s_ntl_ntl_GF2E_pyx, __pyx_k_ntl_ntl_GF2E_pyx, sizeof(__pyx_k_ntl_ntl_GF2E_pyx), 0, 0, 1, 0},
  {&__pyx_n_s_parent, __pyx_k_parent, sizeof(__pyx_k_parent), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_state, __pyx_k_pyx_state, sizeof(__pyx_k_pyx_state), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_random, __pyx_k_random, sizeof(__pyx_k_random), 0, 0, 1, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_s_ref, __pyx_k_ref, sizeof(__pyx_k_ref), 0, 0, 1, 1},
  {&__pyx_n_s_require_context, __pyx_k_require_context, sizeof(__pyx_k_require_context), 0, 0, 1, 1},
  {&__pyx_n_s_res, __pyx_k_res, sizeof(__pyx_k_res), 0, 0, 1, 1},
  {&__pyx_n_s_self, __pyx_k_self, sizeof(__pyx_k_self), 0, 0, 1, 1},
  {&__pyx_kp_s_self_ctxt_cannot_be_converted_to, __pyx_k_self_ctxt_cannot_be_converted_to, sizeof(__pyx_k_self_ctxt_cannot_be_converted_to), 0, 0, 1, 0},
  {&__pyx_kp_s_self_val_cannot_be_converted_to, __pyx_k_self_val_cannot_be_converted_to, sizeof(__pyx_k_self_val_cannot_be_converted_to), 0, 0, 1, 0},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_slots, __pyx_k_slots, sizeof(__pyx_k_slots), 0, 0, 1, 1},
  {&__pyx_n_s_spec, __pyx_k_spec, sizeof(__pyx_k_spec), 0, 0, 1, 1},
  {&__pyx_n_s_staticmethod, __pyx_k_staticmethod, sizeof(__pyx_k_staticmethod), 0, 0, 1, 1},
  {&__pyx_kp_s_stringsource, __pyx_k_stringsource, sizeof(__pyx_k_stringsource), 0, 0, 1, 0},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_weakref, __pyx_k_weakref, sizeof(__pyx_k_weakref), 0, 0, 1, 1},
  #endif
  {0, 0, 0, 0, 0, 0, 0}
};
/* #### Code section: cached_builtins ### */
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_staticmethod = __Pyx_GetBuiltinName(__pyx_n_s_staticmethod); if (!__pyx_builtin_staticmethod) __PYX_ERR(0, 87, __pyx_L1_error)
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(0, 38, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(1, 2, __pyx_L1_error)
  __pyx_builtin_NotImplemented = __Pyx_GetBuiltinName(__pyx_n_s_NotImplemented); if (!__pyx_builtin_NotImplemented) __PYX_ERR(0, 110, __pyx_L1_error)
  __pyx_builtin_AssertionError = __Pyx_GetBuiltinName(__pyx_n_s_AssertionError); if (!__pyx_builtin_AssertionError) __PYX_ERR(0, 371, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: cached_constants ### */

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "ntl/ntl_GF2E.pyx":38
 *     if m.deg() < 1:
 *     #ENDIF <NONE> (= "False")
 *       raise ValueError("invalid modulus")             # <<<<<<<<<<<<<<
 *     if m in PyGF2E_Context._moduli:
 *       ctxt = <PyGF2E_Context>PyGF2E_Context._moduli[m]()
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_u_invalid_modulus); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "ntl/ntl_GF2E.pyx":412
 *       #IF HASCONTEXT (= "True")
 *       if (<PyGF2E>arg).ctxt is not self.ctxt:
 *         raise TypeError("modulus does not match")             # <<<<<<<<<<<<<<
 *       #ENDIF <NONE> (= "False")
 *       return arg
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_u_modulus_does_not_match); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(0, 412, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "ntl/ntl_GF2E.pyx":436
 *     cdef PyGF2E tmp = self._convert_arg(arg)
 *     if tmp is None:
 *       raise TypeError("conversion failed")             # <<<<<<<<<<<<<<
 *     self.val = tmp.val
 * 
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_u_conversion_failed); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(0, 436, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "ntl/ntl_GF2E.pyx":51
 *     self._mod = mod
 * 
 *   cpdef PyGF2X modulus(self):             # <<<<<<<<<<<<<<
 *     return self._mod
 * 
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(0, 51, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);
  __pyx_codeobj__6 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__5, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ntl_ntl_GF2E_pyx, __pyx_n_s_modulus, 51, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__6)) __PYX_ERR(0, 51, __pyx_L1_error)

  /* "ntl/ntl_GF2E.pyx":60
 *     return other._mod == self._mod
 * 
 *   def random(PyGF2E_Context self):             # <<<<<<<<<<<<<<
 *     #MACRO CDEF_RES(varname='self') (= "True")
 *     cdef PyGF2E res = PyGF2E.__new__(PyGF2E)
 */
  __pyx_tuple__7 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_res); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);
  __pyx_codeobj__8 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__7, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ntl_ntl_GF2E_pyx, __pyx_n_s_random, 60, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__8)) __PYX_ERR(0, 60, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.ctxt cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);
  __pyx_codeobj__10 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__9, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__10)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.ctxt cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.ctxt cannot be converted to a Python object for pickling"
 */
  __pyx_tuple__11 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_pyx_state); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);
  __pyx_codeobj__12 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__11, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__12)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "ntl/ntl_GF2E.pyx":74
 * 
 * 
 * cpdef PyGF2E_Ring(arg):             # <<<<<<<<<<<<<<
 *   cdef PyGF2X m = <PyGF2X>arg if isinstance(arg, PyGF2X) else PyGF2X(arg)
 *   return PyGF2E_Context._get(m)
 */
  __pyx_tuple__13 = PyTuple_Pack(1, __pyx_n_s_arg); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(0, 74, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);
  __pyx_codeobj__14 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__13, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ntl_ntl_GF2E_pyx, __pyx_n_s_PyGF2E_Ring, 74, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__14)) __PYX_ERR(0, 74, __pyx_L1_error)

  /* "ntl/ntl_GF2E.pyx":87
 *   __slots__ = ()
 * 
 *   @staticmethod             # <<<<<<<<<<<<<<
 *   def _require_context():
 *     #IF HASCONTEXT (= "True")
 */
  __pyx_codeobj__15 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ntl_ntl_GF2E_pyx, __pyx_n_s_require_context, 87, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__15)) __PYX_ERR(0, 87, __pyx_L1_error)

  /* "ntl/ntl_GF2E.pyx":183
 *     return self.val == arg.val
 * 
 *   def __neq__(PyGF2E self, _arg):             # <<<<<<<<<<<<<<
 *     #MACRO CONVERT_ARG() (= "True")
 *     cdef PyGF2E arg = self._convert_arg(_arg)
 */
  __pyx_tuple__16 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_arg_2, __pyx_n_s_arg, __pyx_n_s_res); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(0, 183, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);
  __pyx_codeobj__17 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__16, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ntl_ntl_GF2E_pyx, __pyx_n_s_neq, 183, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__17)) __PYX_ERR(0, 183, __pyx_L1_error)

  /* "ntl/ntl_GF2E.pyx":223
 * 
 * 
 *   cpdef bint is_zero(PyGF2E self):             # <<<<<<<<<<<<<<
 *     "Tests if `self` is the additive unit."
 *     return _ntlGF2E_IsZero(self.val)
 */
  __pyx_tuple__18 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(0, 223, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);
  __pyx_codeobj__19 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__18, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ntl_ntl_GF2E_pyx, __pyx_n_s_is_zero, 223, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__19)) __PYX_ERR(0, 223, __pyx_L1_error)

  /* "ntl/ntl_GF2E.pyx":227
 *     return _ntlGF2E_IsZero(self.val)
 * 
 *   cpdef bint is_one(PyGF2E self):             # <<<<<<<<<<<<<<
 *     "Tests if `self` is the multiplicative unit."
 *     return _ntlGF2E_IsOne(self.val)
 */
  __pyx_tuple__20 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__20)) __PYX_ERR(0, 227, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);
  __pyx_codeobj__21 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__20, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ntl_ntl_GF2E_pyx, __pyx_n_s_is_one, 227, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__21)) __PYX_ERR(0, 227, __pyx_L1_error)

  /* "ntl/ntl_GF2E.pyx":247
 *   #IF BASETYPE (= "True")
 * 
 *   cpdef PyGF2X lift(PyGF2E self):             # <<<<<<<<<<<<<<
 *     #IF SUBDOUBLE (= "False")
 * 
 */
  __pyx_tuple__22 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__22)) __PYX_ERR(0, 247, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);
  __pyx_codeobj__23 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__22, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ntl_ntl_GF2E_pyx, __pyx_n_s_lift, 247, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__23)) __PYX_ERR(0, 247, __pyx_L1_error)

  /* "ntl/ntl_GF2E.pyx":260
 *     return res
 * 
 *   cpdef PyGF2E_Context parent(self):             # <<<<<<<<<<<<<<
 *     return self.ctxt._mod
 * 
 */
  __pyx_tuple__24 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__24)) __PYX_ERR(0, 260, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__24);
  __Pyx_GIVEREF(__pyx_tuple__24);
  __pyx_codeobj__25 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__24, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ntl_ntl_GF2E_pyx, __pyx_n_s_parent, 260, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__25)) __PYX_ERR(0, 260, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.val cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_tuple__26 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__26)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__26);
  __Pyx_GIVEREF(__pyx_tuple__26);
  __pyx_codeobj__27 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__26, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__27)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.val cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.val cannot be converted to a Python object for pickling"
 */
  __pyx_tuple__28 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_pyx_state); if (unlikely(!__pyx_tuple__28)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__28);
  __Pyx_GIVEREF(__pyx_tuple__28);
  __pyx_codeobj__29 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__28, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__29)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}
/* #### Code section: init_globals ### */

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  #if CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_InitString(__pyx_string_tab[0], &__pyx_n_s_AssertionError) < 0) __PYX_ERR(0, 4, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[1], &__pyx_n_s_NotImplemented) < 0) __PYX_ERR(0, 4, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[2], &__pyx_n_s_PyGF2E) < 0) __PYX_ERR(0, 4, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[3], &__pyx_n_s_PyGF2E_Context) < 0) __PYX_ERR(0, 4, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[4], &__pyx_n_s_PyGF2E_Context___reduce_cython) < 0) __PYX_ERR(0, 4, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[5], &__pyx_n_s_PyGF2E_Context___setstate_cython) < 0) __PYX_ERR(0, 4, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[6], &__pyx_n_s_PyGF2E_Context_modulus) < 0) __PYX_ERR(0, 4, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[7], &__pyx_n_s_PyGF2E_Context_random) < 0) __PYX_ERR(0, 4, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[8], &__pyx_n_s_PyGF2E_Ring) < 0) __PYX_ERR(0, 4, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[9], &__pyx_n_s_PyGF2E___neq) < 0) __PYX_ERR(0, 4, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[10], &__pyx_n_s_PyGF2E___reduce_cython) < 0) __PYX_ERR(0, 4, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[11], &__pyx_n_s_PyGF2E___setstate_cython) < 0) __PYX_ERR(0, 4, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[12], &__pyx_n_s_PyGF2E__require_context) < 0) __PYX_ERR(0, 4, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[13], &__pyx_n_s_PyGF2E_is_one) < 0) __PYX_ERR(0, 4, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[14], &__pyx_n_s_PyGF2E_is_zero) < 0) __PYX_ERR(0, 4, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[15], &__pyx_n_s_PyGF2E_lift) < 0) __PYX_ERR(0, 4, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[16], &__pyx_n_s_PyGF2E_parent) < 0) __PYX_ERR(0, 4, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[17], &__pyx_n_s_Sequence) < 0) __PYX_ERR(0, 4, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[18], &__pyx_n_s_TypeError) < 0) __PYX_ERR(0, 4, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[19], &__pyx_n_s_ValueError) < 0) __PYX_ERR(0, 4, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[20], &__pyx_n_s__30) < 0) __PYX_ERR(0, 4, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[21], &__pyx_n_s__4) < 0) __PYX_ERR(0, 4, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[22], &__pyx_n_s_arg) < 0) __PYX_ERR(0, 4, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[23], &__pyx_n_s_arg_2) < 0) __PYX_ERR(0, 4, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[24], &__pyx_n_s_bytes) < 0) __PYX_ERR(0, 4, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[25], &__pyx_n_s_class_getitem) < 0) __PYX_ERR(0, 4, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[26], &__pyx_n_s_cline_in_traceback) < 0) __PYX_ERR(0, 4, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[27], &__pyx_n_s_collections_abc) < 0) __PYX_ERR(0, 4, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[28], &__pyx_kp_u_conversion_failed) < 0) __PYX_ERR(0, 4, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[29], &__pyx_n_s_ctxt) < 0) __PYX_ERR(0, 4, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[30], &__pyx_n_s_dict) < 0) __PYX_ERR(0, 4, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[31], &__pyx_n_s_from_bytes) < 0) __PYX_ERR(0, 4, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[32], &__pyx_n_s_getstate) < 0) __PYX_ERR(0, 4, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[33], &__pyx_n_s_import) < 0) __PYX_ERR(0, 4, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[34], &__pyx_n_s_initializing) < 0) __PYX_ERR(0, 4, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[35], &__pyx_n_s_int) < 0) __PYX_ERR(0, 4, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[36], &__pyx_kp_u_invalid_modulus) < 0) __PYX_ERR(0, 4, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[37], &__pyx_n_s_is_one) < 0) __PYX_ERR(0, 4, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[38], &__pyx_n_s_is_zero) < 0) __PYX_ERR(0, 4, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[39], &__pyx_n_s_lift) < 0) __PYX_ERR(0, 4, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[40], &__pyx_n_u_little) < 0) __PYX_ERR(0, 4, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[41], &__pyx_n_s_main) < 0) __PYX_ERR(0, 4, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[42], &__pyx_n_s_mod) < 0) __PYX_ERR(0, 4, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[43], &__pyx_n_s_moduli) < 0) __PYX_ERR(0, 4, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[44], &__pyx_n_s_modulus) < 0) __PYX_ERR(0, 4, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[45], &__pyx_kp_u_modulus_does_not_match) < 0) __PYX_ERR(0, 4, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[46], &__pyx_n_s_mul) < 0) __PYX_ERR(0, 4, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[47], &__pyx_n_s_name) < 0) __PYX_ERR(0, 4, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[48], &__pyx_n_s_neq) < 0) __PYX_ERR(0, 4, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[49], &__pyx_n_s_ntl_ntl_GF2E) < 0) __PYX_ERR(0, 4, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[50], &__pyx_kp_s_ntl_ntl_GF2E_pyx) < 0) __PYX_ERR(0, 4, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[51], &__pyx_n_s_parent) < 0) __PYX_ERR(0, 4, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[52], &__pyx_n_s_pyx_state) < 0) __PYX_ERR(0, 4, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[53], &__pyx_n_s_pyx_vtable) < 0) __PYX_ERR(0, 4, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[54], &__pyx_n_s_random) < 0) __PYX_ERR(0, 4, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[55], &__pyx_n_s_reduce) < 0) __PYX_ERR(0, 4, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[56], &__pyx_n_s_reduce_cython) < 0) __PYX_ERR(0, 4, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[57], &__pyx_n_s_reduce_ex) < 0) __PYX_ERR(0, 4, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[58], &__pyx_n_s_ref) < 0) __PYX_ERR(0, 4, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[59], &__pyx_n_s_require_context) < 0) __PYX_ERR(0, 4, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[60], &__pyx_n_s_res) < 0) __PYX_ERR(0, 4, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[61], &__pyx_n_s_self) < 0) __PYX_ERR(0, 4, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[62], &__pyx_kp_s_self_ctxt_cannot_be_converted_to) < 0) __PYX_ERR(0, 4, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[63], &__pyx_kp_s_self_val_cannot_be_converted_to) < 0) __PYX_ERR(0, 4, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[64], &__pyx_n_s_setstate) < 0) __PYX_ERR(0, 4, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[65], &__pyx_n_s_setstate_cython) < 0) __PYX_ERR(0, 4, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[66], &__pyx_n_s_slots) < 0) __PYX_ERR(0, 4, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[67], &__pyx_n_s_spec) < 0) __PYX_ERR(0, 4, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[68], &__pyx_n_s_staticmethod) < 0) __PYX_ERR(0, 4, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[69], &__pyx_kp_s_stringsource) < 0) __PYX_ERR(0, 4, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[70], &__pyx_n_s_test) < 0) __PYX_ERR(0, 4, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[71], &__pyx_n_s_weakref) < 0) __PYX_ERR(0, 4, __pyx_L1_error);
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 4, __pyx_L1_error);
  #endif
  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: init_module ### */

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  if (__Pyx_ExportFunction("PyGF2E_Ring", (void (*)(void))__pyx_f_3ntl_8ntl_GF2E_PyGF2E_Ring, "PyObject *(PyObject *, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __pyx_vtabptr_3ntl_8ntl_GF2E_PyGF2E_Context = &__pyx_vtable_3ntl_8ntl_GF2E_PyGF2E_Context;
  __pyx_vtable_3ntl_8ntl_GF2E_PyGF2E_Context.restore = (void (*)(struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E_Context *))__pyx_f_3ntl_8ntl_GF2E_14PyGF2E_Context_restore;
  __pyx_vtable_3ntl_8ntl_GF2E_PyGF2E_Context._get = (struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E_Context *(*)(struct __pyx_obj_3ntl_8ntl_GF2X_PyGF2X *))__pyx_f_3ntl_8ntl_GF2E_14PyGF2E_Context__get;
  __pyx_vtable_3ntl_8ntl_GF2E_PyGF2E_Context.modulus = (struct __pyx_obj_3ntl_8ntl_GF2X_PyGF2X *(*)(struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E_Context *, int __pyx_skip_dispatch))__pyx_f_3ntl_8ntl_GF2E_14PyGF2E_Context_modulus;
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_type_3ntl_8ntl_GF2E_PyGF2E_Context = PyType_FromSpec(&__pyx_type_3ntl_8ntl_GF2E_PyGF2E_Context_spec); if (unlikely(!__pyx_type_3ntl_8ntl_GF2E_PyGF2E_Context)) __PYX_ERR(0, 23, __pyx_L1_error)
  #else
  if (PyType_Ready(&__pyx_type_3ntl_8ntl_GF2E_PyGF2E_Context) < 0) __PYX_ERR(0, 23, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3
  __pyx_type_3ntl_8ntl_GF2E_PyGF2E_Context.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_3ntl_8ntl_GF2E_PyGF2E_Context.tp_dictoffset && __pyx_type_3ntl_8ntl_GF2E_PyGF2E_Context.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_3ntl_8ntl_GF2E_PyGF2E_Context.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_SetVtable(__pyx_type_3ntl_8ntl_GF2E_PyGF2E_Context, __pyx_vtabptr_3ntl_8ntl_GF2E_PyGF2E_Context) < 0) __PYX_ERR(0, 23, __pyx_L1_error)
  #else
  if (__Pyx_SetVtable(__pyx_type_3ntl_8ntl_GF2E_PyGF2E_Context.tp_dict, __pyx_vtabptr_3ntl_8ntl_GF2E_PyGF2E_Context) < 0) __PYX_ERR(0, 23, __pyx_L1_error)
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_PyGF2E_Context, __pyx_type_3ntl_8ntl_GF2E_PyGF2E_Context) < 0) __PYX_ERR(0, 23, __pyx_L1_error)
  #else
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_PyGF2E_Context, (PyObject *)&__pyx_type_3ntl_8ntl_GF2E_PyGF2E_Context) < 0) __PYX_ERR(0, 23, __pyx_L1_error)
  #endif
  if (__pyx_type_3ntl_8ntl_GF2E_PyGF2E_Context.tp_weaklistoffset == 0) __pyx_type_3ntl_8ntl_GF2E_PyGF2E_Context.tp_weaklistoffset = offsetof(struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E_Context, __weakref__);
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_3ntl_8ntl_GF2E_PyGF2E_Context) < 0) __PYX_ERR(0, 23, __pyx_L1_error)
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_3ntl_8ntl_GF2E_PyGF2E_Context = (PyTypeObject *)__pyx_type_3ntl_8ntl_GF2E_PyGF2E_Context;
  #else
  __pyx_ptype_3ntl_8ntl_GF2E_PyGF2E_Context = &__pyx_type_3ntl_8ntl_GF2E_PyGF2E_Context;
  #endif
  __pyx_vtabptr_3ntl_8ntl_GF2E_PyGF2E = &__pyx_vtable_3ntl_8ntl_GF2E_PyGF2E;
  __pyx_vtable_3ntl_8ntl_GF2E_PyGF2E._convert_arg = (struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *(*)(struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *, PyObject *))__pyx_f_3ntl_8ntl_GF2E_6PyGF2E__convert_arg;
  __pyx_vtable_3ntl_8ntl_GF2E_PyGF2E.is_zero = (int (*)(struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *, int __pyx_skip_dispatch))__pyx_f_3ntl_8ntl_GF2E_6PyGF2E_is_zero;
  __pyx_vtable_3ntl_8ntl_GF2E_PyGF2E.is_one = (int (*)(struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *, int __pyx_skip_dispatch))__pyx_f_3ntl_8ntl_GF2E_6PyGF2E_is_one;
  __pyx_vtable_3ntl_8ntl_GF2E_PyGF2E.lift = (struct __pyx_obj_3ntl_8ntl_GF2X_PyGF2X *(*)(struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *, int __pyx_skip_dispatch))__pyx_f_3ntl_8ntl_GF2E_6PyGF2E_lift;
  __pyx_vtable_3ntl_8ntl_GF2E_PyGF2E.parent = (struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E_Context *(*)(struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *, int __pyx_skip_dispatch))__pyx_f_3ntl_8ntl_GF2E_6PyGF2E_parent;
  __pyx_vtable_3ntl_8ntl_GF2E_PyGF2E._init_lift = (int (*)(struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *, PyObject *))__pyx_f_3ntl_8ntl_GF2E_6PyGF2E__init_lift;
  __pyx_vtable_3ntl_8ntl_GF2E_PyGF2E._init_proj = (int (*)(struct __pyx_obj_3ntl_8ntl_GF2E_PyGF2E *, PyObject *))__pyx_f_3ntl_8ntl_GF2E_6PyGF2E__init_proj;
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_type_3ntl_8ntl_GF2E_PyGF2E = PyType_FromSpec(&__pyx_type_3ntl_8ntl_GF2E_PyGF2E_spec); if (unlikely(!__pyx_type_3ntl_8ntl_GF2E_PyGF2E)) __PYX_ERR(0, 83, __pyx_L1_error)
  #else
  if (PyType_Ready(&__pyx_type_3ntl_8ntl_GF2E_PyGF2E) < 0) __PYX_ERR(0, 83, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3
  __pyx_type_3ntl_8ntl_GF2E_PyGF2E.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_3ntl_8ntl_GF2E_PyGF2E.tp_dictoffset && __pyx_type_3ntl_8ntl_GF2E_PyGF2E.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_3ntl_8ntl_GF2E_PyGF2E.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_SetVtable(__pyx_type_3ntl_8ntl_GF2E_PyGF2E, __pyx_vtabptr_3ntl_8ntl_GF2E_PyGF2E) < 0) __PYX_ERR(0, 83, __pyx_L1_error)
  #else
  if (__Pyx_SetVtable(__pyx_type_3ntl_8ntl_GF2E_PyGF2E.tp_dict, __pyx_vtabptr_3ntl_8ntl_GF2E_PyGF2E) < 0) __PYX_ERR(0, 83, __pyx_L1_error)
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_PyGF2E, __pyx_type_3ntl_8ntl_GF2E_PyGF2E) < 0) __PYX_ERR(0, 83, __pyx_L1_error)
  #else
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_PyGF2E, (PyObject *)&__pyx_type_3ntl_8ntl_GF2E_PyGF2E) < 0) __PYX_ERR(0, 83, __pyx_L1_error)
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_3ntl_8ntl_GF2E_PyGF2E) < 0) __PYX_ERR(0, 83, __pyx_L1_error)
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_3ntl_8ntl_GF2E_PyGF2E = (PyTypeObject *)__pyx_type_3ntl_8ntl_GF2E_PyGF2E;
  #else
  __pyx_ptype_3ntl_8ntl_GF2E_PyGF2E = &__pyx_type_3ntl_8ntl_GF2E_PyGF2E;
  #endif
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule("ntl.ntl_ZZ"); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 70, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_3ntl_6ntl_ZZ_PyZZ = __Pyx_ImportType(__pyx_t_1, "ntl.ntl_ZZ", "PyZZ", sizeof(struct __pyx_obj_3ntl_6ntl_ZZ_PyZZ), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_3ntl_6ntl_ZZ_PyZZ) __PYX_ERR(2, 70, __pyx_L1_error)
  __pyx_vtabptr_3ntl_6ntl_ZZ_PyZZ = (struct __pyx_vtabstruct_3ntl_6ntl_ZZ_PyZZ*)__Pyx_GetVtable(__pyx_ptype_3ntl_6ntl_ZZ_PyZZ); if (unlikely(!__pyx_vtabptr_3ntl_6ntl_ZZ_PyZZ)) __PYX_ERR(2, 70, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("ntl.ntl_GF2"); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 62, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_3ntl_7ntl_GF2_PyGF2 = __Pyx_ImportType(__pyx_t_1, "ntl.ntl_GF2", "PyGF2", sizeof(struct __pyx_obj_3ntl_7ntl_GF2_PyGF2), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_3ntl_7ntl_GF2_PyGF2) __PYX_ERR(3, 62, __pyx_L1_error)
  __pyx_vtabptr_3ntl_7ntl_GF2_PyGF2 = (struct __pyx_vtabstruct_3ntl_7ntl_GF2_PyGF2*)__Pyx_GetVtable(__pyx_ptype_3ntl_7ntl_GF2_PyGF2); if (unlikely(!__pyx_vtabptr_3ntl_7ntl_GF2_PyGF2)) __PYX_ERR(3, 62, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("ntl.ntl_ZZX"); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 84, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_3ntl_7ntl_ZZX_PyZZX = __Pyx_ImportType(__pyx_t_1, "ntl.ntl_ZZX", "PyZZX", sizeof(struct __pyx_obj_3ntl_7ntl_ZZX_PyZZX), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_3ntl_7ntl_ZZX_PyZZX) __PYX_ERR(4, 84, __pyx_L1_error)
  __pyx_vtabptr_3ntl_7ntl_ZZX_PyZZX = (struct __pyx_vtabstruct_3ntl_7ntl_ZZX_PyZZX*)__Pyx_GetVtable(__pyx_ptype_3ntl_7ntl_ZZX_PyZZX); if (unlikely(!__pyx_vtabptr_3ntl_7ntl_ZZX_PyZZX)) __PYX_ERR(4, 84, __pyx_L1_error)
  __pyx_ptype_3ntl_7ntl_ZZX_PyZZX_Class = __Pyx_ImportType(__pyx_t_1, "ntl.ntl_ZZX", "PyZZX_Class", sizeof(struct __pyx_obj_3ntl_7ntl_ZZX_PyZZX_Class), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_3ntl_7ntl_ZZX_PyZZX_Class) __PYX_ERR(4, 107, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("ntl.ntl_GF2X"); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 90, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_3ntl_8ntl_GF2X_PyGF2X = __Pyx_ImportType(__pyx_t_1, "ntl.ntl_GF2X", "PyGF2X", sizeof(struct __pyx_obj_3ntl_8ntl_GF2X_PyGF2X), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_3ntl_8ntl_GF2X_PyGF2X) __PYX_ERR(5, 90, __pyx_L1_error)
  __pyx_vtabptr_3ntl_8ntl_GF2X_PyGF2X = (struct __pyx_vtabstruct_3ntl_8ntl_GF2X_PyGF2X*)__Pyx_GetVtable(__pyx_ptype_3ntl_8ntl_GF2X_PyGF2X); if (unlikely(!__pyx_vtabptr_3ntl_8ntl_GF2X_PyGF2X)) __PYX_ERR(5, 90, __pyx_L1_error)
  __pyx_ptype_3ntl_8ntl_GF2X_PyGF2X_Class = __Pyx_ImportType(__pyx_t_1, "ntl.ntl_GF2X", "PyGF2X_Class", sizeof(struct __pyx_obj_3ntl_8ntl_GF2X_PyGF2X_Class), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_3ntl_8ntl_GF2X_PyGF2X_Class) __PYX_ERR(5, 113, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "type", 
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyTypeObject),
  #elif CYTHON_COMPILING_IN_LIMITED_API
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7cpython_4type_type) __PYX_ERR(6, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("ntl.ntl_GF2EX"); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 88, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_3ntl_9ntl_GF2EX_PyGF2EX = __Pyx_ImportType(__pyx_t_1, "ntl.ntl_GF2EX", "PyGF2EX", sizeof(struct __pyx_obj_3ntl_9ntl_GF2EX_PyGF2EX), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_3ntl_9ntl_GF2EX_PyGF2EX) __PYX_ERR(7, 88, __pyx_L1_error)
  __pyx_vtabptr_3ntl_9ntl_GF2EX_PyGF2EX = (struct __pyx_vtabstruct_3ntl_9ntl_GF2EX_PyGF2EX*)__Pyx_GetVtable(__pyx_ptype_3ntl_9ntl_GF2EX_PyGF2EX); if (unlikely(!__pyx_vtabptr_3ntl_9ntl_GF2EX_PyGF2EX)) __PYX_ERR(7, 88, __pyx_L1_error)
  __pyx_ptype_3ntl_9ntl_GF2EX_PyGF2EX_Class = __Pyx_ImportType(__pyx_t_1, "ntl.ntl_GF2EX", "PyGF2EX_Class", sizeof(struct __pyx_obj_3ntl_9ntl_GF2EX_PyGF2EX_Class), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_3ntl_9ntl_GF2EX_PyGF2EX_Class) __PYX_ERR(7, 111, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __pyx_t_1 = PyImport_ImportModule("cysignals.signals"); if (!__pyx_t_1) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_ImportVoidPtr(__pyx_t_1, "cysigs", (void **)&__pyx_vp_9cysignals_7signals_cysigs, "cysigs_t") < 0) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __pyx_t_1 = PyImport_ImportModule("cysignals.signals"); if (!__pyx_t_1) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_ImportFunction(__pyx_t_1, "verify_exc_value", (void (**)(void))&__pyx_f_9cysignals_7signals_verify_exc_value, "void (void)") < 0) __PYX_ERR(0, 4, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_sig_on_interrupt_received", (void (**)(void))&_sig_on_interrupt_received, "void (void)") < 0) __PYX_ERR(0, 4, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_sig_on_recover", (void (**)(void))&_sig_on_recover, "void (void)") < 0) __PYX_ERR(0, 4, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_sig_off_warning", (void (**)(void))&_sig_off_warning, "void (char const *, int)") < 0) __PYX_ERR(0, 4, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "print_backtrace", (void (**)(void))&print_backtrace, "void (void)") < 0) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}


#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_ntl_GF2E(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_ntl_GF2E},
  {0, NULL}
};
#endif

#ifdef __cplusplus
namespace {
  struct PyModuleDef __pyx_moduledef =
  #else
  static struct PyModuleDef __pyx_moduledef =
  #endif
  {
      PyModuleDef_HEAD_INIT,
      "ntl_GF2E",
      0, /* m_doc */
    #if CYTHON_PEP489_MULTI_PHASE_INIT
      0, /* m_size */
    #elif CYTHON_COMPILING_IN_LIMITED_API
      sizeof(__pyx_mstate), /* m_size */
    #else
      -1, /* m_size */
    #endif
      __pyx_methods /* m_methods */,
    #if CYTHON_PEP489_MULTI_PHASE_INIT
      __pyx_moduledef_slots, /* m_slots */
    #else
      NULL, /* m_reload */
    #endif
    #if CYTHON_COMPILING_IN_LIMITED_API
      __pyx_m_traverse, /* m_traverse */
      __pyx_m_clear, /* m_clear */
      NULL /* m_free */
    #else
      NULL, /* m_traverse */
      NULL, /* m_clear */
      NULL /* m_free */
    #endif
  };
  #ifdef __cplusplus
} /* anonymous namespace */
#endif
#endif

#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initntl_GF2E(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initntl_GF2E(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_ntl_GF2E(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_ntl_GF2E(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *module, const char* from_name, const char* to_name, int allow_none)
#else
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none)
#endif
{
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
#if CYTHON_COMPILING_IN_LIMITED_API
            result = PyModule_AddObject(module, to_name, value);
#else
            result = PyDict_SetItemString(moddict, to_name, value);
#endif
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
#if CYTHON_COMPILING_IN_LIMITED_API
    moddict = module;
#else
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
#endif
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_ntl_GF2E(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'ntl_GF2E' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("ntl_GF2E", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 4, __pyx_L1_error)
  #elif CYTHON_COMPILING_IN_LIMITED_API
  __pyx_t_1 = PyModule_Create(&__pyx_moduledef); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyState_AddModule(__pyx_t_1, &__pyx_moduledef) < 0)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 4, __pyx_L1_error)
  #endif
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 4, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 4, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 4, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 4, __pyx_L1_error);
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_ntl_GF2E(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 4, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 4, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 4, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 4, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 4, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 4, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 4, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 4, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 4, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 4, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(WITH_THREAD) && PY_VERSION_HEX < 0x030700F0 && defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  PyEval_InitThreads();
  #endif
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 4, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 4, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_ntl__ntl_GF2E) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(0, 4, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 4, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "ntl.ntl_GF2E")) {
      if (unlikely(PyDict_SetItemString(modules, "ntl.ntl_GF2E", __pyx_m) < 0)) __PYX_ERR(0, 4, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 4, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 4, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  if (unlikely(__Pyx_modinit_function_export_code() < 0)) __PYX_ERR(0, 4, __pyx_L1_error)
  if (unlikely(__Pyx_modinit_type_init_code() < 0)) __PYX_ERR(0, 4, __pyx_L1_error)
  if (unlikely(__Pyx_modinit_type_import_code() < 0)) __PYX_ERR(0, 4, __pyx_L1_error)
  if (unlikely(__Pyx_modinit_variable_import_code() < 0)) __PYX_ERR(0, 4, __pyx_L1_error)
  if (unlikely(__Pyx_modinit_function_import_code() < 0)) __PYX_ERR(0, 4, __pyx_L1_error)
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 4, __pyx_L1_error)
  #endif

  /* "ntl/ntl_GF2E.pyx":6
 * from .ntl_GF2E cimport *
 * from .ccore cimport *
 * import weakref             # <<<<<<<<<<<<<<
 * from collections.abc import Sequence
 * 
 */
  __pyx_t_1 = __Pyx_ImportDottedModule(__pyx_n_s_weakref, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_weakref, __pyx_t_1) < 0) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ntl/ntl_GF2E.pyx":7
 * from .ccore cimport *
 * import weakref
 * from collections.abc import Sequence             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_Sequence);
  __Pyx_GIVEREF(__pyx_n_s_Sequence);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_Sequence);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_collections_abc, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_Sequence); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Sequence, __pyx_t_1) < 0) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ntl/ntl_GF2E.pyx":30
 *     self.ctxt.restore()
 * 
 *   _moduli = dict()             # <<<<<<<<<<<<<<
 * 
 *   @staticmethod
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_3ntl_8ntl_GF2E_PyGF2E_Context->tp_dict, __pyx_n_s_moduli, __pyx_t_2) < 0) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_3ntl_8ntl_GF2E_PyGF2E_Context);

  /* "ntl/ntl_GF2E.pyx":51
 *     self._mod = mod
 * 
 *   cpdef PyGF2X modulus(self):             # <<<<<<<<<<<<<<
 *     return self._mod
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_3ntl_8ntl_GF2E_14PyGF2E_Context_3modulus, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PyGF2E_Context_modulus, NULL, __pyx_n_s_ntl_ntl_GF2E, __pyx_d, ((PyObject *)__pyx_codeobj__6)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 51, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_3ntl_8ntl_GF2E_PyGF2E_Context->tp_dict, __pyx_n_s_modulus, __pyx_t_2) < 0) __PYX_ERR(0, 51, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_3ntl_8ntl_GF2E_PyGF2E_Context);

  /* "ntl/ntl_GF2E.pyx":60
 *     return other._mod == self._mod
 * 
 *   def random(PyGF2E_Context self):             # <<<<<<<<<<<<<<
 *     #MACRO CDEF_RES(varname='self') (= "True")
 *     cdef PyGF2E res = PyGF2E.__new__(PyGF2E)
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_3ntl_8ntl_GF2E_14PyGF2E_Context_9random, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PyGF2E_Context_random, NULL, __pyx_n_s_ntl_ntl_GF2E, __pyx_d, ((PyObject *)__pyx_codeobj__8)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_3ntl_8ntl_GF2E_PyGF2E_Context->tp_dict, __pyx_n_s_random, __pyx_t_2) < 0) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_3ntl_8ntl_GF2E_PyGF2E_Context);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.ctxt cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_3ntl_8ntl_GF2E_14PyGF2E_Context_11__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PyGF2E_Context___reduce_cython, NULL, __pyx_n_s_ntl_ntl_GF2E, __pyx_d, ((PyObject *)__pyx_codeobj__10)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.ctxt cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.ctxt cannot be converted to a Python object for pickling"
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_3ntl_8ntl_GF2E_14PyGF2E_Context_13__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PyGF2E_Context___setstate_cython, NULL, __pyx_n_s_ntl_ntl_GF2E, __pyx_d, ((PyObject *)__pyx_codeobj__12)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_2) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ntl/ntl_GF2E.pyx":74
 * 
 * 
 * cpdef PyGF2E_Ring(arg):             # <<<<<<<<<<<<<<
 *   cdef PyGF2X m = <PyGF2X>arg if isinstance(arg, PyGF2X) else PyGF2X(arg)
 *   return PyGF2E_Context._get(m)
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_3ntl_8ntl_GF2E_1PyGF2E_Ring, 0, __pyx_n_s_PyGF2E_Ring, NULL, __pyx_n_s_ntl_ntl_GF2E, __pyx_d, ((PyObject *)__pyx_codeobj__14)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 74, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PyGF2E_Ring, __pyx_t_2) < 0) __PYX_ERR(0, 74, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ntl/ntl_GF2E.pyx":85
 * cdef class PyGF2E(object):
 * 
 *   __slots__ = ()             # <<<<<<<<<<<<<<
 * 
 *   @staticmethod
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_3ntl_8ntl_GF2E_PyGF2E->tp_dict, __pyx_n_s_slots, __pyx_empty_tuple) < 0) __PYX_ERR(0, 85, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_3ntl_8ntl_GF2E_PyGF2E);

  /* "ntl/ntl_GF2E.pyx":87
 *   __slots__ = ()
 * 
 *   @staticmethod             # <<<<<<<<<<<<<<
 *   def _require_context():
 *     #IF HASCONTEXT (= "True")
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_3ntl_8ntl_GF2E_6PyGF2E_1_require_context, __Pyx_CYFUNCTION_STATICMETHOD | __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PyGF2E__require_context, NULL, __pyx_n_s_ntl_ntl_GF2E, __pyx_d, ((PyObject *)__pyx_codeobj__15)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 87, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_3ntl_8ntl_GF2E_PyGF2E->tp_dict, __pyx_n_s_require_context, __pyx_t_2) < 0) __PYX_ERR(0, 87, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_3ntl_8ntl_GF2E_PyGF2E);
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_3ntl_8ntl_GF2E_PyGF2E, __pyx_n_s_require_context); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 87, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 87, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_3ntl_8ntl_GF2E_PyGF2E->tp_dict, __pyx_n_s_require_context, __pyx_t_1) < 0) __PYX_ERR(0, 87, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_3ntl_8ntl_GF2E_PyGF2E);

  /* "ntl/ntl_GF2E.pyx":183
 *     return self.val == arg.val
 * 
 *   def __neq__(PyGF2E self, _arg):             # <<<<<<<<<<<<<<
 *     #MACRO CONVERT_ARG() (= "True")
 *     cdef PyGF2E arg = self._convert_arg(_arg)
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_3ntl_8ntl_GF2E_6PyGF2E_15__neq__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PyGF2E___neq, NULL, __pyx_n_s_ntl_ntl_GF2E, __pyx_d, ((PyObject *)__pyx_codeobj__17)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 183, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_3ntl_8ntl_GF2E_PyGF2E->tp_dict, __pyx_n_s_neq, __pyx_t_1) < 0) __PYX_ERR(0, 183, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_3ntl_8ntl_GF2E_PyGF2E);

  /* "ntl/ntl_GF2E.pyx":223
 * 
 * 
 *   cpdef bint is_zero(PyGF2E self):             # <<<<<<<<<<<<<<
 *     "Tests if `self` is the additive unit."
 *     return _ntlGF2E_IsZero(self.val)
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_3ntl_8ntl_GF2E_6PyGF2E_23is_zero, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PyGF2E_is_zero, NULL, __pyx_n_s_ntl_ntl_GF2E, __pyx_d, ((PyObject *)__pyx_codeobj__19)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 223, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_3ntl_8ntl_GF2E_PyGF2E->tp_dict, __pyx_n_s_is_zero, __pyx_t_1) < 0) __PYX_ERR(0, 223, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_3ntl_8ntl_GF2E_PyGF2E);

  /* "ntl/ntl_GF2E.pyx":227
 *     return _ntlGF2E_IsZero(self.val)
 * 
 *   cpdef bint is_one(PyGF2E self):             # <<<<<<<<<<<<<<
 *     "Tests if `self` is the multiplicative unit."
 *     return _ntlGF2E_IsOne(self.val)
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_3ntl_8ntl_GF2E_6PyGF2E_25is_one, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PyGF2E_is_one, NULL, __pyx_n_s_ntl_ntl_GF2E, __pyx_d, ((PyObject *)__pyx_codeobj__21)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 227, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_3ntl_8ntl_GF2E_PyGF2E->tp_dict, __pyx_n_s_is_one, __pyx_t_1) < 0) __PYX_ERR(0, 227, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_3ntl_8ntl_GF2E_PyGF2E);

  /* "ntl/ntl_GF2E.pyx":247
 *   #IF BASETYPE (= "True")
 * 
 *   cpdef PyGF2X lift(PyGF2E self):             # <<<<<<<<<<<<<<
 *     #IF SUBDOUBLE (= "False")
 * 
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_3ntl_8ntl_GF2E_6PyGF2E_31lift, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PyGF2E_lift, NULL, __pyx_n_s_ntl_ntl_GF2E, __pyx_d, ((PyObject *)__pyx_codeobj__23)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 247, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_3ntl_8ntl_GF2E_PyGF2E->tp_dict, __pyx_n_s_lift, __pyx_t_1) < 0) __PYX_ERR(0, 247, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_3ntl_8ntl_GF2E_PyGF2E);

  /* "ntl/ntl_GF2E.pyx":260
 *     return res
 * 
 *   cpdef PyGF2E_Context parent(self):             # <<<<<<<<<<<<<<
 *     return self.ctxt._mod
 * 
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_3ntl_8ntl_GF2E_6PyGF2E_33parent, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PyGF2E_parent, NULL, __pyx_n_s_ntl_ntl_GF2E, __pyx_d, ((PyObject *)__pyx_codeobj__25)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 260, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_3ntl_8ntl_GF2E_PyGF2E->tp_dict, __pyx_n_s_parent, __pyx_t_1) < 0) __PYX_ERR(0, 260, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_3ntl_8ntl_GF2E_PyGF2E);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.val cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_3ntl_8ntl_GF2E_6PyGF2E_51__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PyGF2E___reduce_cython, NULL, __pyx_n_s_ntl_ntl_GF2E, __pyx_d, ((PyObject *)__pyx_codeobj__27)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_1) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.val cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.val cannot be converted to a Python object for pickling"
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_3ntl_8ntl_GF2E_6PyGF2E_53__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PyGF2E___setstate_cython, NULL, __pyx_n_s_ntl_ntl_GF2E, __pyx_d, ((PyObject *)__pyx_codeobj__29)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_1) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ntl/ntl_GF2E.pyx":4
 * 
 * 
 * from .ntl_GF2E cimport *             # <<<<<<<<<<<<<<
 * from .ccore cimport *
 * import weakref
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cysignals/signals.pxd":93
 * 
 * 
 * cdef inline void __generate_declarations():             # <<<<<<<<<<<<<<
 *     cysigs
 *     _sig_on_interrupt_received
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init ntl.ntl_GF2E", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    #if !CYTHON_COMPILING_IN_LIMITED_API
    Py_CLEAR(__pyx_m);
    #endif
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init ntl.ntl_GF2E");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}
/* #### Code section: cleanup_globals ### */
/* #### Code section: cleanup_module ### */
/* #### Code section: main_method ### */
/* #### Code section: utility_code_def ### */

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* PyObjectGetAttrStrNoError */
static void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (likely(__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        __Pyx_PyErr_Clear();
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS && PY_VERSION_HEX >= 0x030700B1
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro == PyObject_GenericGetAttr)) {
        return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);
    }
#endif
    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);
    if (unlikely(!result)) {
        __Pyx_PyObject_GetAttrStr_ClearAttributeError();
    }
    return result;
}

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStrNoError(__pyx_b, name);
    if (unlikely(!result) && !PyErr_Occurred()) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY ||  CYTHON_COMPILING_IN_LIMITED_API
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (unlikely(!j)) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PyMappingMethods *mm = Py_TYPE(o)->tp_as_mapping;
        PySequenceMethods *sm = Py_TYPE(o)->tp_as_sequence;
        if (mm && mm->mp_subscript) {
            PyObject *r, *key = PyInt_FromSsize_t(i);
            if (unlikely(!key)) return NULL;
            r = mm->mp_subscript(o, key);
            Py_DECREF(key);
            return r;
        }
        if (likely(sm && sm->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(sm->sq_length)) {
                Py_ssize_t l = sm->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return sm->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL && !CYTHON_VECTORCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object"))) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectFastCall */
static PyObject* __Pyx_PyObject_FastCall_fallback(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyObject *argstuple;
    PyObject *result;
    Py_ssize_t i;
    argstuple = PyTuple_New(nargs);
    if (unlikely(!argstuple)) return NULL;
    for (i = 0; i < nargs; i++) {
        Py_INCREF(args[i]);
        PyTuple_SET_ITEM(argstuple, i, args[i]);
    }
    result = __Pyx_PyObject_Call(func, argstuple, kwargs);
    Py_DECREF(argstuple);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t _nargs, PyObject *kwargs) {
    Py_ssize_t nargs = __Pyx_PyVectorcall_NARGS(_nargs);
#if CYTHON_COMPILING_IN_CPYTHON
    if (nargs == 0 && kwargs == NULL) {
#ifdef __Pyx_CyFunction_USED
        if (__Pyx_IsCyOrPyCFunction(func))
#else
        if (PyCFunction_Check(func))
#endif
        {
            if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
                return __Pyx_PyObject_CallMethO(func, NULL);
            }
        }
    }
    else if (nargs == 1 && kwargs == NULL) {
        if (PyCFunction_Check(func))
        {
            if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
                return __Pyx_PyObject_CallMethO(func, args[0]);
            }
        }
    }
#endif
    #if PY_VERSION_HEX < 0x030800B1
    #if CYTHON_FAST_PYCCALL
    if (PyCFunction_Check(func)) {
        if (kwargs) {
            return _PyCFunction_FastCallDict(func, args, nargs, kwargs);
        } else {
            return _PyCFunction_FastCallKeywords(func, args, nargs, NULL);
        }
    }
    #if PY_VERSION_HEX >= 0x030700A1
    if (!kwargs && __Pyx_IS_TYPE(func, &PyMethodDescr_Type)) {
        return _PyMethodDescr_FastCallKeywords(func, args, nargs, NULL);
    }
    #endif
    #endif
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs);
    }
    #endif
    #endif
    #if CYTHON_VECTORCALL
    vectorcallfunc f = _PyVectorcall_Function(func);
    if (f) {
        return f(func, args, nargs, kwargs);
    }
    #elif defined(__Pyx_CyFunction_USED) && CYTHON_BACKPORT_VECTORCALL
    if (__Pyx_CyFunction_CheckExact(func)) {
        __pyx_vectorcallfunc f = __Pyx_CyFunction_func_vectorcall(func);
        if (f) return f(func, args, nargs, kwargs);
    }
    #endif
    if (nargs == 0) {
        return __Pyx_PyObject_Call(func, __pyx_empty_tuple, kwargs);
    }
    return __Pyx_PyObject_FastCall_fallback(func, args, nargs, kwargs);
}

/* PyObjectCallOneArg */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *args[2] = {NULL, arg};
    return __Pyx_PyObject_FastCall(func, args+1, 1 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
}

/* ObjectGetItem */
#if CYTHON_USE_TYPE_SLOTS
static PyObject *__Pyx_PyObject_GetIndex(PyObject *obj, PyObject *index) {
    PyObject *runerr;
    Py_ssize_t key_value;
    key_value = __Pyx_PyIndex_AsSsize_t(index);
    if (likely(key_value != -1 || !(runerr = PyErr_Occurred()))) {
        return __Pyx_GetItemInt_Fast(obj, key_value, 0, 1, 1);
    }
    if (PyErr_GivenExceptionMatches(runerr, PyExc_OverflowError)) {
        __Pyx_TypeName index_type_name = __Pyx_PyType_GetName(Py_TYPE(index));
        PyErr_Clear();
        PyErr_Format(PyExc_IndexError,
            "cannot fit '" __Pyx_FMT_TYPENAME "' into an index-sized integer", index_type_name);
        __Pyx_DECREF_TypeName(index_type_name);
    }
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem_Slow(PyObject *obj, PyObject *key) {
    __Pyx_TypeName obj_type_name;
    if (likely(PyType_Check(obj))) {
        PyObject *meth = __Pyx_PyObject_GetAttrStrNoError(obj, __pyx_n_s_class_getitem);
        if (meth) {
            PyObject *result = __Pyx_PyObject_CallOneArg(meth, key);
            Py_DECREF(meth);
            return result;
        }
    }
    obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    PyErr_Format(PyExc_TypeError,
        "'" __Pyx_FMT_TYPENAME "' object is not subscriptable", obj_type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject *key) {
    PyTypeObject *tp = Py_TYPE(obj);
    PyMappingMethods *mm = tp->tp_as_mapping;
    PySequenceMethods *sm = tp->tp_as_sequence;
    if (likely(mm && mm->mp_subscript)) {
        return mm->mp_subscript(obj, key);
    }
    if (likely(sm && sm->sq_item)) {
        return __Pyx_PyObject_GetIndex(obj, key);
    }
    return __Pyx_PyObject_GetItem_Slow(obj, key);
}
#endif

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#elif CYTHON_COMPILING_IN_LIMITED_API
    if (unlikely(!__pyx_m)) {
        return NULL;
    }
    result = PyObject_GetAttr(__pyx_m, name);
    if (likely(result)) {
        return result;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* TupleAndListFromArray */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE void __Pyx_copy_object_array(PyObject *const *CYTHON_RESTRICT src, PyObject** CYTHON_RESTRICT dest, Py_ssize_t length) {
    PyObject *v;
    Py_ssize_t i;
    for (i = 0; i < length; i++) {
        v = dest[i] = src[i];
        Py_INCREF(v);
    }
}
static CYTHON_INLINE PyObject *
__Pyx_PyTuple_FromArray(PyObject *const *src, Py_ssize_t n)
{
    PyObject *res;
    if (n <= 0) {
        Py_INCREF(__pyx_empty_tuple);
        return __pyx_empty_tuple;
    }
    res = PyTuple_New(n);
    if (unlikely(res == NULL)) return NULL;
    __Pyx_copy_object_array(src, ((PyTupleObject*)res)->ob_item, n);
    return res;
}
static CYTHON_INLINE PyObject *
__Pyx_PyList_FromArray(PyObject *const *src, Py_ssize_t n)
{
    PyObject *res;
    if (n <= 0) {
        return PyList_New(0);
    }
    res = PyList_New(n);
    if (unlikely(res == NULL)) return NULL;
    __Pyx_copy_object_array(src, ((PyListObject*)res)->ob_item, n);
    return res;
}
#endif

/* BytesEquals */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result;
#if CYTHON_USE_UNICODE_INTERNALS
            Py_hash_t hash1, hash2;
            hash1 = ((PyBytesObject*)s1)->ob_shash;
            hash2 = ((PyBytesObject*)s2)->ob_shash;
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                return (equals == Py_NE);
            }
#endif
            result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
#if CYTHON_USE_UNICODE_INTERNALS
        {
            Py_hash_t hash1, hash2;
        #if CYTHON_PEP393_ENABLED
            hash1 = ((PyASCIIObject*)s1)->hash;
            hash2 = ((PyASCIIObject*)s2)->hash;
        #else
            hash1 = ((PyUnicodeObject*)s1)->hash;
            hash2 = ((PyUnicodeObject*)s2)->hash;
        #endif
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                goto return_ne;
            }
        }
#endif
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        #if PY_MAJOR_VERSION < 3
        Py_XDECREF(owned_ref);
        #endif
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* fastcall */
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE PyObject * __Pyx_GetKwValue_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues, PyObject *s)
{
    Py_ssize_t i, n = PyTuple_GET_SIZE(kwnames);
    for (i = 0; i < n; i++)
    {
        if (s == PyTuple_GET_ITEM(kwnames, i)) return kwvalues[i];
    }
    for (i = 0; i < n; i++)
    {
        int eq = __Pyx_PyUnicode_Equals(s, PyTuple_GET_ITEM(kwnames, i), Py_EQ);
        if (unlikely(eq != 0)) {
            if (unlikely(eq < 0)) return NULL;  // error
            return kwvalues[i];
        }
    }
    return NULL;  // not found (no exception set)
}
#endif

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject *const *kwvalues,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    int kwds_is_tuple = CYTHON_METH_FASTCALL && likely(PyTuple_Check(kwds));
    while (1) {
        if (kwds_is_tuple) {
            if (pos >= PyTuple_GET_SIZE(kwds)) break;
            key = PyTuple_GET_ITEM(kwds, pos);
            value = kwvalues[pos];
            pos++;
        }
        else
        {
            if (!PyDict_Next(kwds, &pos, &key, &value)) break;
        }
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key)
                );
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    #if PY_MAJOR_VERSION < 3
    PyErr_Format(PyExc_TypeError,
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
    PyErr_Format(PyExc_TypeError,
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    __Pyx_TypeName type_name;
    __Pyx_TypeName obj_type_name;
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    type_name = __Pyx_PyType_GetName(type);
    obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected " __Pyx_FMT_TYPENAME
        ", got " __Pyx_FMT_TYPENAME ")", name, type_name, obj_type_name);
    __Pyx_DECREF_TypeName(type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    return 0;
}

/* ExtTypeTest */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    __Pyx_TypeName obj_type_name;
    __Pyx_TypeName type_name;
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    type_name = __Pyx_PyType_GetName(type);
    PyErr_Format(PyExc_TypeError,
                 "Cannot convert " __Pyx_FMT_TYPENAME " to " __Pyx_FMT_TYPENAME,
                 obj_type_name, type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    __Pyx_DECREF_TypeName(type_name);
    return 0;
}

/* KeywordStringCheck */
static int __Pyx_CheckKeywordStrings(
    PyObject *kw,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kw, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    if (CYTHON_METH_FASTCALL && likely(PyTuple_Check(kw))) {
        if (unlikely(PyTuple_GET_SIZE(kw) == 0))
            return 1;
        if (!kw_allowed) {
            key = PyTuple_GET_ITEM(kw, 0);
            goto invalid_keyword;
        }
#if PY_VERSION_HEX < 0x03090000
        for (pos = 0; pos < PyTuple_GET_SIZE(kw); pos++) {
            key = PyTuple_GET_ITEM(kw, pos);
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
        }
#endif
        return 1;
    }
    while (PyDict_Next(kw, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if (!kw_allowed && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    #if PY_MAJOR_VERSION < 3
    PyErr_Format(PyExc_TypeError,
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
    PyErr_Format(PyExc_TypeError,
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* WriteUnraisableException */
static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#ifdef _MSC_VER
    else state = (PyGILState_STATE)-1;
#endif
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* PyObjectSetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_setattr))
        return tp->tp_setattr(obj, PyString_AS_STRING(attr_name), value);
#endif
    return PyObject_SetAttr(obj, attr_name, value);
}
#endif

/* PyObject_GenericGetAttrNoDict */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    __Pyx_TypeName type_name = __Pyx_PyType_GetName(tp);
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%U'",
                 type_name, attr_name);
#else
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%.400s'",
                 type_name, PyString_AS_STRING(attr_name));
#endif
    __Pyx_DECREF_TypeName(type_name);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* SetVTable */
#if CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_SetVtable(PyObject *type, void *vtable) {
#else
static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#endif
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
    if (!ob)
        goto bad;
#if CYTHON_COMPILING_IN_LIMITED_API
    if (PyObject_SetAttr(type, __pyx_n_s_pyx_vtable, ob) < 0)
#else
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
#endif
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* SetupReduce */
  #if !CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStrNoError(meth, __pyx_n_s_name);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    if (_PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate)) goto __PYX_GOOD;
#else
    if (PyObject_HasAttr(type_obj, __pyx_n_s_getstate)) goto __PYX_GOOD;
#endif
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto __PYX_BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto __PYX_BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_reduce_cython);
            if (likely(reduce_cython)) {
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            } else if (reduce == object_reduce || PyErr_Occurred()) {
                goto __PYX_BAD;
            }
            setstate = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate_cython);
                if (likely(setstate_cython)) {
                    ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                    ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                } else if (!setstate || PyErr_Occurred()) {
                    goto __PYX_BAD;
                }
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto __PYX_GOOD;
__PYX_BAD:
    if (!PyErr_Occurred()) {
        __Pyx_TypeName type_obj_name =
            __Pyx_PyType_GetName((PyTypeObject*)type_obj);
        PyErr_Format(PyExc_RuntimeError,
            "Unable to initialize pickling for " __Pyx_FMT_TYPENAME, type_obj_name);
        __Pyx_DECREF_TypeName(type_obj_name);
    }
    ret = -1;
__PYX_GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}
#endif

/* TypeImport */
  #ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(PyObject *module, const char *module_name, const char *class_name,
    size_t size, enum __Pyx_ImportType_CheckSize check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *py_basicsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#if !CYTHON_COMPILING_IN_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if ((size_t)basicsize < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error && (size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* GetVTable */
  static void* __Pyx_GetVtable(PyTypeObject *type) {
    void* ptr;
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *ob = PyObject_GetAttr((PyObject *)type, __pyx_n_s_pyx_vtable);
#else
    PyObject *ob = PyObject_GetItem(type->tp_dict, __pyx_n_s_pyx_vtable);
#endif
    if (!ob)
        goto bad;
    ptr = PyCapsule_GetPointer(ob, 0);
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

/* Import */
  static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *module = 0;
    PyObject *empty_dict = 0;
    PyObject *empty_list = 0;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (unlikely(!py_import))
        goto bad;
    if (!from_list) {
        empty_list = PyList_New(0);
        if (unlikely(!empty_list))
            goto bad;
        from_list = empty_list;
    }
    #endif
    empty_dict = PyDict_New();
    if (unlikely(!empty_dict))
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if ((1) && (strchr(__Pyx_MODULE_NAME, '.'))) {
                #if CYTHON_COMPILING_IN_LIMITED_API
                module = PyImport_ImportModuleLevelObject(
                    name, empty_dict, empty_dict, from_list, 1);
                #else
                module = PyImport_ImportModuleLevelObject(
                    name, __pyx_d, empty_dict, from_list, 1);
                #endif
                if (unlikely(!module)) {
                    if (unlikely(!PyErr_ExceptionMatches(PyExc_ImportError)))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (unlikely(!py_level))
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, __pyx_d, empty_dict, from_list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            #if CYTHON_COMPILING_IN_LIMITED_API
            module = PyImport_ImportModuleLevelObject(
                name, empty_dict, empty_dict, from_list, level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, __pyx_d, empty_dict, from_list, level);
            #endif
            #endif
        }
    }
bad:
    Py_XDECREF(empty_dict);
    Py_XDECREF(empty_list);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    return module;
}

/* ImportDottedModule */
  #if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx__ImportDottedModule_Error(PyObject *name, PyObject *parts_tuple, Py_ssize_t count) {
    PyObject *partial_name = NULL, *slice = NULL, *sep = NULL;
    if (unlikely(PyErr_Occurred())) {
        PyErr_Clear();
    }
    if (likely(PyTuple_GET_SIZE(parts_tuple) == count)) {
        partial_name = name;
    } else {
        PyObject *sep;
        PyObject *slice = PySequence_GetSlice(parts_tuple, 0, count);
        if (unlikely(!slice))
            goto bad;
        sep = PyUnicode_FromStringAndSize(".", 1);
        if (unlikely(!sep))
            goto bad;
        partial_name = PyUnicode_Join(sep, slice);
    }
    PyErr_Format(
#if PY_MAJOR_VERSION < 3
        PyExc_ImportError,
        "No module named '%s'", PyString_AS_STRING(partial_name));
#else
#if PY_VERSION_HEX >= 0x030600B1
        PyExc_ModuleNotFoundError,
#else
        PyExc_ImportError,
#endif
        "No module named '%U'", partial_name);
#endif
bad:
    Py_XDECREF(sep);
    Py_XDECREF(slice);
    Py_XDECREF(partial_name);
    return NULL;
}
#endif
#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx__ImportDottedModule_Lookup(PyObject *name) {
    PyObject *imported_module;
#if PY_VERSION_HEX < 0x030700A1
    PyObject *modules = PyImport_GetModuleDict();
    if (unlikely(!modules))
        return NULL;
    imported_module = __Pyx_PyDict_GetItemStr(modules, name);
    Py_XINCREF(imported_module);
#else
    imported_module = PyImport_GetModule(name);
#endif
    return imported_module;
}
#endif
static PyObject *__Pyx__ImportDottedModule(PyObject *name, CYTHON_UNUSED PyObject *parts_tuple) {
#if PY_MAJOR_VERSION < 3
    PyObject *module, *from_list, *star = __pyx_n_s__4;
    from_list = PyList_New(1);
    if (unlikely(!from_list))
        return NULL;
    Py_INCREF(star);
    PyList_SET_ITEM(from_list, 0, star);
    module = __Pyx_Import(name, from_list, 0);
    Py_DECREF(from_list);
    return module;
#else
    Py_ssize_t i, nparts;
    PyObject *imported_module;
    PyObject *module = __Pyx_Import(name, NULL, 0);
    if (!parts_tuple || unlikely(!module))
        return module;
    imported_module = __Pyx__ImportDottedModule_Lookup(name);
    if (likely(imported_module)) {
        Py_DECREF(module);
        return imported_module;
    }
    PyErr_Clear();
    nparts = PyTuple_GET_SIZE(parts_tuple);
    for (i=1; i < nparts && module; i++) {
        PyObject *part, *submodule;
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        part = PyTuple_GET_ITEM(parts_tuple, i);
#else
        part = PySequence_ITEM(parts_tuple, i);
#endif
        submodule = __Pyx_PyObject_GetAttrStrNoError(module, part);
#if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
        Py_DECREF(part);
#endif
        Py_DECREF(module);
        module = submodule;
    }
    if (likely(module))
        return module;
    return __Pyx__ImportDottedModule_Error(name, parts_tuple, i);
#endif
}
static PyObject *__Pyx_ImportDottedModule(PyObject *name, PyObject *parts_tuple) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030400B1
    PyObject *module = __Pyx__ImportDottedModule_Lookup(name);
    if (likely(module)) {
        PyObject *spec = __Pyx_PyObject_GetAttrStrNoError(module, __pyx_n_s_spec);
        if (likely(spec)) {
            PyObject *unsafe = __Pyx_PyObject_GetAttrStrNoError(spec, __pyx_n_s_initializing);
            if (likely(!unsafe || !__Pyx_PyObject_IsTrue(unsafe))) {
                Py_DECREF(spec);
                spec = NULL;
            }
            Py_XDECREF(unsafe);
        }
        if (likely(!spec)) {
            PyErr_Clear();
            return module;
        }
        Py_DECREF(spec);
        Py_DECREF(module);
    } else if (PyErr_Occurred()) {
        PyErr_Clear();
    }
#endif
    return __Pyx__ImportDottedModule(name, parts_tuple);
}

/* ImportFrom */
  static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* FetchCommonType */
  static PyObject *__Pyx_FetchSharedCythonABIModule(void) {
    PyObject *abi_module = PyImport_AddModule((char*) __PYX_ABI_MODULE_NAME);
    if (!abi_module) return NULL;
    Py_INCREF(abi_module);
    return abi_module;
}
static int __Pyx_VerifyCachedType(PyObject *cached_type,
                               const char *name,
                               Py_ssize_t basicsize,
                               Py_ssize_t expected_basicsize) {
    if (!PyType_Check(cached_type)) {
        PyErr_Format(PyExc_TypeError,
            "Shared Cython type %.200s is not a type object", name);
        return -1;
    }
    if (basicsize != expected_basicsize) {
        PyErr_Format(PyExc_TypeError,
            "Shared Cython type %.200s has the wrong size, try recompiling",
            name);
        return -1;
    }
    return 0;
}
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* abi_module;
    PyTypeObject *cached_type = NULL;
    abi_module = __Pyx_FetchSharedCythonABIModule();
    if (!abi_module) return NULL;
    cached_type = (PyTypeObject*) PyObject_GetAttrString(abi_module, type->tp_name);
    if (cached_type) {
        if (__Pyx_VerifyCachedType(
              (PyObject *)cached_type,
              type->tp_name,
              cached_type->tp_basicsize,
              type->tp_basicsize) < 0) {
            goto bad;
        }
        goto done;
    }
    if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
    PyErr_Clear();
    if (PyType_Ready(type) < 0) goto bad;
    if (PyObject_SetAttrString(abi_module, type->tp_name, (PyObject *)type) < 0)
        goto bad;
    Py_INCREF(type);
    cached_type = type;
done:
    Py_DECREF(abi_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}
#if CYTHON_COMPILING_IN_LIMITED_API
static PyTypeObject *__Pyx_FetchCommonTypeFromSpec(PyType_Spec *spec, PyObject *bases) {
    PyObject *abi_module, *py_basicsize, *cached_type = NULL;
    Py_ssize_t basicsize;
    abi_module = __Pyx_FetchSharedCythonABIModule();
    if (!abi_module) return NULL;
    cached_type = PyObject_GetAttrString(abi_module, spec->name);
    if (cached_type) {
        py_basicsize = PyObject_GetAttrString(cached_type, "__basicsize__");
        if (!py_basicsize) goto bad;
        basicsize = PyLong_AsSsize_t(py_basicsize);
        Py_DECREF(py_basicsize);
        py_basicsize = 0;
        if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred()) goto bad;
        if (__Pyx_VerifyCachedType(
              cached_type,
              spec->name,
              basicsize,
              spec->basicsize) < 0) {
            goto bad;
        }
        goto done;
    }
    if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
    PyErr_Clear();
    cached_type = PyType_FromSpecWithBases(spec, bases);
    if (unlikely(!cached_type)) goto bad;
    if (PyObject_SetAttrString(abi_module, spec->name, cached_type) < 0) goto bad;
done:
    Py_DECREF(abi_module);
    assert(cached_type == NULL || PyType_Check(cached_type));
    return (PyTypeObject *) cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}
#endif

/* PyVectorcallFastCallDict */
  #if CYTHON_METH_FASTCALL
static PyObject *__Pyx_PyVectorcall_FastCallDict_kw(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, Py_ssize_t nargs, PyObject *kw)
{
    PyObject *res = NULL;
    PyObject *kwnames;
    PyObject **newargs;
    PyObject **kwvalues;
    Py_ssize_t i, pos;
    PyObject *key, *value;
    unsigned long keys_are_strings;
    Py_ssize_t nkw = PyDict_GET_SIZE(kw);
    newargs = (PyObject **)PyMem_Malloc((nargs + nkw) * sizeof(args[0]));
    if (unlikely(newargs == NULL)) {
        PyErr_NoMemory();
        return NULL;
    }
    for (i = 0; i < nargs; i++) newargs[i] = args[i];
    kwnames = PyTuple_New(nkw);
    if (unlikely(kwnames == NULL)) {
        PyMem_Free(newargs);
        return NULL;
    }
    kwvalues = newargs + nargs;
    pos = i = 0;
    keys_are_strings = Py_TPFLAGS_UNICODE_SUBCLASS;
    while (PyDict_Next(kw, &pos, &key, &value)) {
        keys_are_strings &= Py_TYPE(key)->tp_flags;
        Py_INCREF(key);
        Py_INCREF(value);
        PyTuple_SET_ITEM(kwnames, i, key);
        kwvalues[i] = value;
        i++;
    }
    if (unlikely(!keys_are_strings)) {
        PyErr_SetString(PyExc_TypeError, "keywords must be strings");
        goto cleanup;
    }
    res = vc(func, newargs, nargs, kwnames);
cleanup:
    Py_DECREF(kwnames);
    for (i = 0; i < nkw; i++)
        Py_DECREF(kwvalues[i]);
    PyMem_Free(newargs);
    return res;
}
static CYTHON_INLINE PyObject *__Pyx_PyVectorcall_FastCallDict(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, Py_ssize_t nargs, PyObject *kw)
{
    if (likely(kw == NULL) || PyDict_GET_SIZE(kw) == 0) {
        return vc(func, args, nargs, NULL);
    }
    return __Pyx_PyVectorcall_FastCallDict_kw(func, vc, args, nargs, kw);
}
#endif

/* CythonFunctionShared */
  #include <structmember.h>
static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *closure)
{
    if (unlikely(op->func_doc == NULL)) {
        if (op->func.m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(op->func.m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(op->func.m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_doc, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    if (unlikely(op->func_name == NULL)) {
#if PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(op->func.m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(op->func.m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_name, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_qualname, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_self(__pyx_CyFunctionObject *m, CYTHON_UNUSED void *closure)
{
    PyObject *self;
    self = m->func_closure;
    if (self == NULL)
        self = Py_None;
    Py_INCREF(self);
    return self;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_dict, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(CYTHON_UNUSED __pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    if (!value) {
        value = Py_None;
    } else if (unlikely(value != Py_None && !PyTuple_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->defaults_tuple, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->defaults_tuple;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (unlikely(__Pyx_CyFunction_init_defaults(op) < 0)) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    if (!value) {
        value = Py_None;
    } else if (unlikely(value != Py_None && !PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->defaults_kwdict, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->defaults_kwdict;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (unlikely(__Pyx_CyFunction_init_defaults(op) < 0)) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    if (!value || value == Py_None) {
        value = NULL;
    } else if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_annotations, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->func_annotations;
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "__self__", (getter)__Pyx_CyFunction_get_self, 0, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
    {(char *) "__module__", T_OBJECT, offsetof(PyCFunctionObject, m_module), PY_WRITE_RESTRICTED, 0},
#if CYTHON_COMPILING_IN_LIMITED_API
    {(char *) "__dictoffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_dict), READONLY, 0},
#if PY_VERSION_HEX < 0x030500A0
    {(char *) "__weaklistoffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_weakreflist), READONLY, 0},
#else
    {(char *) "__weaklistoffset__", T_PYSSIZET, offsetof(PyCFunctionObject, m_weakreflist), READONLY, 0},
#endif
#endif
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, CYTHON_UNUSED PyObject *args)
{
#if PY_MAJOR_VERSION >= 3
    Py_INCREF(m->func_qualname);
    return m->func_qualname;
#else
    return PyString_FromString(m->func.m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func.m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject *op, PyMethodDef *ml, int flags, PyObject* qualname,
                                       PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    if (unlikely(op == NULL))
        return NULL;
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
    op->func.m_ml = ml;
    op->func.m_self = (PyObject *) op;
    Py_XINCREF(closure);
    op->func_closure = closure;
    Py_XINCREF(module);
    op->func.m_module = module;
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
    op->func_classobj = NULL;
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults_size = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
#if CYTHON_METH_FASTCALL
    switch (ml->ml_flags & (METH_VARARGS | METH_FASTCALL | METH_NOARGS | METH_O | METH_KEYWORDS)) {
    case METH_NOARGS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_NOARGS;
        break;
    case METH_O:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_O;
        break;
    case METH_FASTCALL | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS;
        break;
    case METH_VARARGS | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = NULL;
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags for CyFunction");
        Py_DECREF(op);
        return NULL;
    }
#endif
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
    Py_CLEAR(m->func.m_module);
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
    Py_CLEAR(m->func_classobj);
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyObject_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx__CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    PyObject_GC_Del(m);
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    __Pyx__CyFunction_dealloc(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
    Py_VISIT(m->func.m_module);
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
    Py_VISIT(m->func_classobj);
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
static PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, PyObject *arg, PyObject *kw) {
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    Py_ssize_t size;
    switch (f->m_ml->ml_flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)(void*)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 0))
                return (*meth)(self, NULL);
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 1)) {
                PyObject *result, *arg0;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                arg0 = PyTuple_GET_ITEM(arg, 0);
                #else
                arg0 = PySequence_ITEM(arg, 0); if (unlikely(!arg0)) return NULL;
                #endif
                result = (*meth)(self, arg0);
                #if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
                Py_DECREF(arg0);
                #endif
                return result;
            }
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags for CyFunction");
        return NULL;
    }
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    return __Pyx_CyFunction_CallMethod(func, ((PyCFunctionObject*)func)->m_self, arg, kw);
}
static PyObject *__Pyx_CyFunction_CallAsMethod(PyObject *func, PyObject *args, PyObject *kw) {
    PyObject *result;
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
#if CYTHON_METH_FASTCALL
     __pyx_vectorcallfunc vc = __Pyx_CyFunction_func_vectorcall(cyfunc);
    if (vc) {
#if CYTHON_ASSUME_SAFE_MACROS
        return __Pyx_PyVectorcall_FastCallDict(func, vc, &PyTuple_GET_ITEM(args, 0), PyTuple_GET_SIZE(args), kw);
#else
        (void) &__Pyx_PyVectorcall_FastCallDict;
        return PyVectorcall_Call(func, args, kw);
#endif
    }
#endif
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        Py_ssize_t argc;
        PyObject *new_args;
        PyObject *self;
        argc = PyTuple_GET_SIZE(args);
        new_args = PyTuple_GetSlice(args, 1, argc);
        if (unlikely(!new_args))
            return NULL;
        self = PyTuple_GetItem(args, 0);
        if (unlikely(!self)) {
            Py_DECREF(new_args);
            return NULL;
        }
        result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);
        Py_DECREF(new_args);
    } else {
        result = __Pyx_CyFunction_Call(func, args, kw);
    }
    return result;
}
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE int __Pyx_CyFunction_Vectorcall_CheckArgs(__pyx_CyFunctionObject *cyfunc, Py_ssize_t nargs, PyObject *kwnames)
{
    int ret = 0;
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        if (unlikely(nargs < 1)) {
            PyErr_Format(PyExc_TypeError, "%.200s() needs an argument",
                         cyfunc->func.m_ml->ml_name);
            return -1;
        }
        ret = 1;
    }
    if (unlikely(kwnames) && unlikely(PyTuple_GET_SIZE(kwnames))) {
        PyErr_Format(PyExc_TypeError,
                     "%.200s() takes no keyword arguments", cyfunc->func.m_ml->ml_name);
        return -1;
    }
    return ret;
}
static PyObject * __Pyx_CyFunction_Vectorcall_NOARGS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = cyfunc->func.m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, kwnames)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = cyfunc->func.m_self;
        break;
    default:
        return NULL;
    }
    if (unlikely(nargs != 0)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
            def->ml_name, nargs);
        return NULL;
    }
    return def->ml_meth(self, NULL);
}
static PyObject * __Pyx_CyFunction_Vectorcall_O(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = cyfunc->func.m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, kwnames)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = cyfunc->func.m_self;
        break;
    default:
        return NULL;
    }
    if (unlikely(nargs != 1)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
            def->ml_name, nargs);
        return NULL;
    }
    return def->ml_meth(self, args[0]);
}
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = cyfunc->func.m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, NULL)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = cyfunc->func.m_self;
        break;
    default:
        return NULL;
    }
    return ((_PyCFunctionFastWithKeywords)(void(*)(void))def->ml_meth)(self, args, nargs, kwnames);
}
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
static PyType_Slot __pyx_CyFunctionType_slots[] = {
    {Py_tp_dealloc, (void *)__Pyx_CyFunction_dealloc},
    {Py_tp_repr, (void *)__Pyx_CyFunction_repr},
    {Py_tp_call, (void *)__Pyx_CyFunction_CallAsMethod},
    {Py_tp_traverse, (void *)__Pyx_CyFunction_traverse},
    {Py_tp_clear, (void *)__Pyx_CyFunction_clear},
    {Py_tp_methods, (void *)__pyx_CyFunction_methods},
    {Py_tp_members, (void *)__pyx_CyFunction_members},
    {Py_tp_getset, (void *)__pyx_CyFunction_getsets},
    {Py_tp_descr_get, (void *)__Pyx_PyMethod_New},
    {0, 0},
};
static PyType_Spec __pyx_CyFunctionType_spec = {
    __PYX_TYPE_MODULE_PREFIX "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC,
    __pyx_CyFunctionType_slots
};
#else
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    __PYX_TYPE_MODULE_PREFIX "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
#if !CYTHON_METH_FASTCALL
    0,
#elif CYTHON_BACKPORT_VECTORCALL
    (printfunc)offsetof(__pyx_CyFunctionObject, func_vectorcall),
#else
    offsetof(__pyx_CyFunctionObject, func.vectorcall),
#endif
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_CallAsMethod,
    0,
    0,
    0,
    0,
#ifdef Py_TPFLAGS_METHOD_DESCRIPTOR
    Py_TPFLAGS_METHOD_DESCRIPTOR |
#endif
#ifdef _Py_TPFLAGS_HAVE_VECTORCALL
    _Py_TPFLAGS_HAVE_VECTORCALL |
#endif
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_PyMethod_New,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
    0,
#endif
#if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
    0,
#endif
};
#endif
static int __pyx_CyFunction_init(void) {
#if CYTHON_COMPILING_IN_LIMITED_API
    __pyx_CyFunctionType = __Pyx_FetchCommonTypeFromSpec(&__pyx_CyFunctionType_spec, NULL);
#else
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
#endif
    if (unlikely(__pyx_CyFunctionType == NULL)) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_Malloc(size);
    if (unlikely(!m->defaults))
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    m->defaults_size = size;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* CythonFunction */
  static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    PyObject *op = __Pyx_CyFunction_Init(
        PyObject_GC_New(__pyx_CyFunctionObject, __pyx_CyFunctionType),
        ml, flags, qualname, closure, module, globals, code
    );
    if (likely(op)) {
        PyObject_GC_Track(op);
    }
    return op;
}

/* GetNameInClass */
  static PyObject *__Pyx__GetNameInClass(PyObject *nmspace, PyObject *name) {
    PyObject *result;
    PyObject *dict;
    assert(PyType_Check(nmspace));
#if CYTHON_USE_TYPE_SLOTS
    dict = ((PyTypeObject*)nmspace)->tp_dict;
    Py_XINCREF(dict);
#else
    dict = PyObject_GetAttr(nmspace, __pyx_n_s_dict);
#endif
    if (likely(dict)) {
        result = PyObject_GetItem(dict, name);
        Py_DECREF(dict);
        if (result) {
            return result;
        }
    }
    PyErr_Clear();
    __Pyx_GetModuleGlobalNameUncached(result, name);
    return result;
}

/* CLineInTraceback */
  #ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_NCP_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStrNoError(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
  #if !CYTHON_COMPILING_IN_LIMITED_API
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}
#endif

/* AddTraceback */
  #include "compile.h"
#include "frameobject.h"
#include "traceback.h"
#if CYTHON_COMPILING_IN_LIMITED_API
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    if (c_line) {
        (void) __pyx_cfilenm;
        c_line = __Pyx_CLineForTraceback(__Pyx_PyThreadState_Current, c_line);
    }
    _PyTraceback_Add(funcname, filename, c_line ? -c_line : py_line);
}
#else
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}
#endif

/* FormatTypeName */
  #if CYTHON_COMPILING_IN_LIMITED_API
static __Pyx_TypeName
__Pyx_PyType_GetName(PyTypeObject* tp)
{
    PyObject *name = __Pyx_PyObject_GetAttrStr((PyObject *)tp,
                                               __pyx_n_s_name);
    if (unlikely(name == NULL) || unlikely(!PyUnicode_Check(name))) {
        PyErr_Clear();
        Py_XSETREF(name, __Pyx_NewRef(__pyx_n_s__30));
    }
    return name;
}
#endif

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPyVerify */
  #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntFromPy */
  static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if (CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntFromPy */
  static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) ((int) 0 - (int) 1), const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if (CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* FastTypeChecks */
  #if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
static CYTHON_INLINE int __Pyx_IsAnySubtype2(PyTypeObject *cls, PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (cls == a || cls == b) return 1;
    mro = cls->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            PyObject *base = PyTuple_GET_ITEM(mro, i);
            if (base == (PyObject *)a || base == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(cls, a) || __Pyx_InBases(cls, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    if (exc_type1) {
        return __Pyx_IsAnySubtype2((PyTypeObject*)err, (PyTypeObject*)exc_type1, (PyTypeObject*)exc_type2);
    } else {
        return __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
  static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* FunctionExport */
  static int __Pyx_ExportFunction(const char *name, void (*f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(__pyx_m, (char *)"__pyx_capi__");
    if (!d) {
        PyErr_Clear();
        d = PyDict_New();
        if (!d)
            goto bad;
        Py_INCREF(d);
        if (PyModule_AddObject(__pyx_m, (char *)"__pyx_capi__", d) < 0)
            goto bad;
    }
    tmp.fp = f;
    cobj = PyCapsule_New(tmp.p, sig, 0);
    if (!cobj)
        goto bad;
    if (PyDict_SetItemString(d, name, cobj) < 0)
        goto bad;
    Py_DECREF(cobj);
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(cobj);
    Py_XDECREF(d);
    return -1;
}

/* VoidPtrImport */
  #ifndef __PYX_HAVE_RT_ImportVoidPtr
#define __PYX_HAVE_RT_ImportVoidPtr
static int __Pyx_ImportVoidPtr(PyObject *module, const char *name, void **p, const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    d = PyObject_GetAttrString(module, (char *)"__pyx_capi__");
    if (!d)
        goto bad;
    cobj = PyDict_GetItemString(d, name);
    if (!cobj) {
        PyErr_Format(PyExc_ImportError,
            "%.200s does not export expected C variable %.200s",
                PyModule_GetName(module), name);
        goto bad;
    }
    if (!PyCapsule_IsValid(cobj, sig)) {
        PyErr_Format(PyExc_TypeError,
            "C variable %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), name, sig, PyCapsule_GetName(cobj));
        goto bad;
    }
    *p = PyCapsule_GetPointer(cobj, sig);
    if (!(*p))
        goto bad;
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(d);
    return -1;
}
#endif

/* FunctionImport */
  #ifndef __PYX_HAVE_RT_ImportFunction
#define __PYX_HAVE_RT_ImportFunction
static int __Pyx_ImportFunction(PyObject *module, const char *funcname, void (**f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(module, (char *)"__pyx_capi__");
    if (!d)
        goto bad;
    cobj = PyDict_GetItemString(d, funcname);
    if (!cobj) {
        PyErr_Format(PyExc_ImportError,
            "%.200s does not export expected C function %.200s",
                PyModule_GetName(module), funcname);
        goto bad;
    }
    if (!PyCapsule_IsValid(cobj, sig)) {
        PyErr_Format(PyExc_TypeError,
            "C function %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), funcname, sig, PyCapsule_GetName(cobj));
        goto bad;
    }
    tmp.p = PyCapsule_GetPointer(cobj, sig);
    *f = tmp.fp;
    if (!(*f))
        goto bad;
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(d);
    return -1;
}
#endif

/* InitStrings */
  #if PY_MAJOR_VERSION >= 3
static int __Pyx_InitString(__Pyx_StringTabEntry t, PyObject **str) {
    if (t.is_unicode | t.is_str) {
        if (t.intern) {
            *str = PyUnicode_InternFromString(t.s);
        } else if (t.encoding) {
            *str = PyUnicode_Decode(t.s, t.n - 1, t.encoding, NULL);
        } else {
            *str = PyUnicode_FromStringAndSize(t.s, t.n - 1);
        }
    } else {
        *str = PyBytes_FromStringAndSize(t.s, t.n - 1);
    }
    if (!*str)
        return -1;
    if (PyObject_Hash(*str) == -1)
        return -1;
    return 0;
}
#endif
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION >= 3
        __Pyx_InitString(*t, t->p);
        #else
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        #endif
        ++t;
    }
    return 0;
}
#endif

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY && !CYTHON_COMPILING_IN_LIMITED_API) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
    __Pyx_TypeName result_type_name = __Pyx_PyType_GetName(Py_TYPE(result));
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type " __Pyx_FMT_TYPENAME ").  "
                "The ability to return an instance of a strict subclass of int is deprecated, "
                "and may be removed in a future version of Python.",
                result_type_name)) {
            __Pyx_DECREF_TypeName(result_type_name);
            Py_DECREF(result);
            return NULL;
        }
        __Pyx_DECREF_TypeName(result_type_name);
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type " __Pyx_FMT_TYPENAME ")",
                 type_name, type_name, result_type_name);
    __Pyx_DECREF_TypeName(result_type_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject* o) {
  if (sizeof(Py_hash_t) == sizeof(Py_ssize_t)) {
    return (Py_hash_t) __Pyx_PyIndex_AsSsize_t(o);
#if PY_MAJOR_VERSION < 3
  } else if (likely(PyInt_CheckExact(o))) {
    return PyInt_AS_LONG(o);
#endif
  } else {
    Py_ssize_t ival;
    PyObject *x;
    x = PyNumber_Index(o);
    if (!x) return -1;
    ival = PyInt_AsLong(x);
    Py_DECREF(x);
    return ival;
  }
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


/* #### Code section: end ### */
#endif /* Py_PYTHON_H */
